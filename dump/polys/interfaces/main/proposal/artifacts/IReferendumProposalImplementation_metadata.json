{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "AbstainIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "AgainstIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "caption",
						"type": "string"
					}
				],
				"name": "CaptionSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "CreatorSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "data",
						"type": "address"
					}
				],
				"name": "DataSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "seconds_",
						"type": "uint256"
					}
				],
				"name": "DurationSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Executed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "response",
						"type": "bytes"
					}
				],
				"name": "LowLevelCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "MessageSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MultiSigProposalFactorySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Passed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "ReferendumProposalFactorySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "RequiredQuorumSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "RequiredThresholdSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					}
				],
				"name": "SnapshotTaken",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "StartTimestampSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "SupportIncreased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "TargetSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "TerminalSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "erc20",
						"type": "address"
					}
				],
				"name": "VotingERC20Set",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "abstain",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "abstainKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "against",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "againstKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "caption",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "captionKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "counting",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creatorKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "data",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dataKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "duration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "durationKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ended",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "execute",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "executed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "executedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initializedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "message",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "messageKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "multiSigProposalFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "multiSigProposalFactoryKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ownerkey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "passed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "passedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "quorum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "referendumProposalFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "referendumProposalFactoryKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredQuorum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredQuorumKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredQuorumNumber",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredThresholdKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "secondsLeft",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "caption",
						"type": "string"
					}
				],
				"name": "setCaption",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setCreator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "seconds_",
						"type": "uint256"
					}
				],
				"name": "setDuration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "setMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setMultiSigProposalFactory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setReferendumProposalFactory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "setRequiredQuorum",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "setRequiredThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "setStartTimestamp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setTarget",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setTerminal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "erc20",
						"type": "address"
					}
				],
				"name": "setVotingERC20",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "snapshot",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "snapshotId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "snapshotIdKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTimestampKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "started",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sufficientQuorum",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sufficientThreshold",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "support",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "supportKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "target",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "targetKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "terminal",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "terminalKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "threshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "side",
						"type": "uint256"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingERC20",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "votingERC20Key",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"AbstainIncreased(address,uint256)": {
					"params": {
						"account": "The address that has voted.",
						"amount": "The amount of votes they have dedicated to this side."
					}
				},
				"AgainstIncreased(address,uint256)": {
					"params": {
						"account": "The address that has voted.",
						"amount": "The amount of votes they have dedicated to this side."
					}
				},
				"CaptionSet(string)": {
					"details": "Emitted when the caption of a proposal is set.",
					"params": {
						"caption": "The new caption for the proposal."
					}
				},
				"CreatorSet(address)": {
					"details": "Emitted when the creator of a proposal is set.",
					"params": {
						"creator": "The address of the new creator for the proposal."
					}
				},
				"DataSet(address)": {
					"details": "Emitted when the data of a proposal is set.",
					"params": {
						"data": "The new data for the proposal."
					}
				},
				"DurationSet(uint256)": {
					"details": "Emitted when the duration of a proposal is set.",
					"params": {
						"seconds_": "The new duration in seconds for the proposal."
					}
				},
				"Executed()": {
					"details": "Emitted when a proposal is marked as executed."
				},
				"LowLevelCall(address,bytes,bytes)": {
					"details": "Emitted when a low-level call is executed.",
					"params": {
						"data": "The data passed to the call.",
						"response": "The response received from the call.",
						"target": "The target address of the call."
					}
				},
				"MessageSet(string)": {
					"details": "Emitted when the message of a proposal is set.",
					"params": {
						"message": "The new message for the proposal."
					}
				},
				"MultiSigProposalFactorySet(address)": {
					"details": "Emitted when the MultiSigProposalFactory address is set.",
					"params": {
						"account": "The address of the new MultiSigProposalFactory."
					}
				},
				"OwnershipTransferred(address,address)": {
					"details": "Emitted when ownership of the contract is transferred.",
					"params": {
						"newOwner": "The address of the new owner.",
						"oldOwner": "The address of the old owner."
					}
				},
				"Passed()": {
					"details": "Emitted when a proposal is marked as passed."
				},
				"ReferendumProposalFactorySet(address)": {
					"details": "Emitted when the ReferendumProposalFactory address is set.",
					"params": {
						"account": "The address of the new ReferendumProposalFactory."
					}
				},
				"RequiredQuorumSet(uint256)": {
					"details": "Emitted when the required quorum of a proposal is set.",
					"params": {
						"bp": "The new required quorum as a basis point for the proposal."
					}
				},
				"RequiredThresholdSet(uint256)": {
					"details": "Emitted when the required threshold of a proposal is set.",
					"params": {
						"bp": "The new required threshold as a basis point for the proposal."
					}
				},
				"SnapshotTaken(uint256)": {
					"details": "Emitted when a snapshot is taken for a specific ID.",
					"params": {
						"id": "The index or identifier of the snapshot."
					}
				},
				"StartTimestampSet(uint256)": {
					"details": "Emitted when the start timestamp of a proposal is set.",
					"params": {
						"timestamp": "The new start timestamp for the proposal."
					}
				},
				"SupportIncreased(address,uint256)": {
					"params": {
						"account": "The address that has voted.",
						"amount": "The amount of votes they have dedicated to this side."
					}
				},
				"TargetSet(address)": {
					"details": "Emitted when the target address of a proposal is set.",
					"params": {
						"target": "The address of the new target for the proposal."
					}
				},
				"TerminalSet(address)": {
					"details": "Emitted when the terminal address is set.",
					"params": {
						"account": "The address of the new terminal."
					}
				},
				"VotingERC20Set(address)": {
					"details": "Emitted when the Voting ERC20 address is set.",
					"params": {
						"erc20": "The address of the new Voting ERC20 contract."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"abstain()": {
					"details": "Gets the current abstain votes for a proposal.",
					"returns": {
						"_0": "uint256 The current abstain votes value."
					}
				},
				"abstainKey()": {
					"details": "Returns the keccak256 hash key for accessing the abstain votes in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the abstain votes."
					}
				},
				"against()": {
					"details": "Gets the current against votes for a proposal.",
					"returns": {
						"_0": "uint256 The current against votes value."
					}
				},
				"againstKey()": {
					"details": "Returns the keccak256 hash key for accessing the against votes in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the against votes."
					}
				},
				"caption()": {
					"details": "Returns the caption associated with the proposal."
				},
				"captionKey()": {
					"details": "Returns the key for storing the caption in storage."
				},
				"counting()": {
					"details": "Checks if the timer is actively counting."
				},
				"creator()": {
					"details": "Returns the address of the creator of the proposal."
				},
				"creatorKey()": {
					"details": "Returns the key for storing the creator in storage."
				},
				"data()": {
					"details": "Returns the current data bytes."
				},
				"dataKey()": {
					"details": "Returns the key for storing the data."
				},
				"duration()": {
					"details": "Returns the duration."
				},
				"durationKey()": {
					"details": "Returns the key for the duration."
				},
				"endTimestamp()": {
					"details": "Returns the end timestamp."
				},
				"ended()": {
					"details": "Checks if the timer has ended."
				},
				"execute()": {
					"details": "Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. Calls terminal low level call and returns result."
				},
				"executed()": {
					"details": "Checks if the proposal has been executed.",
					"returns": {
						"_0": "bool True if the proposal has been executed, false otherwise."
					}
				},
				"executedKey()": {
					"details": "Returns the keccak256 hash key for accessing the \"executed\" status in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the \"executed\" status."
					}
				},
				"initialize()": {
					"details": "Initializes the contract. Should be called only once during deployment."
				},
				"initialized()": {
					"details": "Checks if the contract has been initialized."
				},
				"initializedKey()": {
					"details": "Returns the key for checking if the contract has been initialized."
				},
				"message()": {
					"details": "Returns the message associated with the proposal."
				},
				"messageKey()": {
					"details": "Returns the key for storing the message in storage."
				},
				"multiSigProposalFactory()": {
					"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the MultiSigProposalFactory."
					}
				},
				"multiSigProposalFactoryKey()": {
					"details": "Returns the key used to store the MultiSigProposalFactory address.",
					"returns": {
						"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
					}
				},
				"owner()": {
					"details": "Returns the current owner of the contract.",
					"returns": {
						"_0": "The address of the current owner."
					}
				},
				"ownerkey()": {
					"details": "Returns the key for the owner in the storage mapping.",
					"returns": {
						"_0": "The key for the owner."
					}
				},
				"passed()": {
					"details": "Checks if the proposal has passed.",
					"returns": {
						"_0": "bool True if the proposal has passed, false otherwise."
					}
				},
				"passedKey()": {
					"details": "Returns the keccak256 hash key for accessing the \"passed\" status in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the \"passed\" status."
					}
				},
				"quorum()": {
					"details": "Calculates the total quorum by summing up the support, against, and abstain votes.",
					"returns": {
						"_0": "uint256 The total quorum."
					}
				},
				"referendumProposalFactory()": {
					"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the ReferendumProposalFactory."
					}
				},
				"referendumProposalFactoryKey()": {
					"details": "Returns the key used to store the ReferendumProposalFactory address.",
					"returns": {
						"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
					}
				},
				"renounceOwnership()": {
					"details": "Renounces ownership, leaving the contract without an owner."
				},
				"requiredQuorum()": {
					"details": "Gets the current required quorum for proposals.",
					"returns": {
						"_0": "uint256 The required quorum as a basis point."
					}
				},
				"requiredQuorumKey()": {
					"details": "Returns the keccak256 hash key for accessing the required quorum in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the required quorum."
					}
				},
				"requiredQuorumNumber()": {
					"details": "Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.",
					"returns": {
						"_0": "uint256 The required quorum number."
					}
				},
				"requiredThreshold()": {
					"details": "Gets the current required threshold for proposals.",
					"returns": {
						"_0": "uint256 The required threshold as a basis point."
					}
				},
				"requiredThresholdKey()": {
					"details": "Returns the keccak256 hash key for accessing the required threshold in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the required threshold."
					}
				},
				"secondsLeft()": {
					"details": "Calculates the remaining seconds in the timer."
				},
				"setCaption(string)": {
					"details": "Sets the caption of the proposal.",
					"params": {
						"caption": "The new caption to be set."
					}
				},
				"setCreator(address)": {
					"details": "Sets the creator of the proposal.",
					"params": {
						"account": "The address of the new creator."
					}
				},
				"setData(bytes)": {
					"details": "Sets the data of the proposal.",
					"params": {
						"data": "The new data to be set."
					}
				},
				"setDuration(uint256)": {
					"details": "Sets the duration of the proposal in seconds.",
					"params": {
						"seconds_": "The new duration in seconds."
					}
				},
				"setMessage(string)": {
					"details": "Sets the message of the proposal.",
					"params": {
						"message": "The new message to be set."
					}
				},
				"setMultiSigProposalFactory(address)": {
					"details": "Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
					"params": {
						"account": "The address of the new MultiSigProposalFactory."
					}
				},
				"setReferendumProposalFactory(address)": {
					"details": "Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
					"params": {
						"account": "The address of the new ReferendumProposalFactory."
					}
				},
				"setRequiredQuorum(uint256)": {
					"details": "Sets the required quorum percentage for the proposal.",
					"params": {
						"bp": "The new required quorum percentage (basis points)."
					}
				},
				"setRequiredThreshold(uint256)": {
					"details": "Sets the required threshold percentage for the proposal.",
					"params": {
						"bp": "The new required threshold percentage (basis points)."
					}
				},
				"setStartTimestamp(uint256)": {
					"details": "Sets the start timestamp of the proposal.",
					"params": {
						"timestamp": "The new start timestamp."
					}
				},
				"setTarget(address)": {
					"details": "Sets the target address of the proposal.",
					"params": {
						"account": "The new target address."
					}
				},
				"setVotingERC20(address)": {
					"details": "Sets the ERC20 token used for voting in the proposal.",
					"params": {
						"erc20": "The address of the ERC20 token contract."
					}
				},
				"snapshot()": {
					"details": "Takes a snapshot of the voting ERC20 balances and supply. Only the owner can trigger a snapshot."
				},
				"snapshotId()": {
					"details": "Gets the current snapshot ID.",
					"returns": {
						"_0": "uint256 The current snapshot ID."
					}
				},
				"snapshotIdKey()": {
					"details": "Returns the keccak256 hash key for accessing the snapshot ID in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the snapshot ID."
					}
				},
				"startTimestamp()": {
					"details": "Returns the start timestamp."
				},
				"startTimestampKey()": {
					"details": "Returns the key for the start timestamp."
				},
				"started()": {
					"details": "Checks if the timer has started."
				},
				"sufficientQuorum()": {
					"details": "Checks if the current quorum is sufficient, comparing it to the required quorum number.",
					"returns": {
						"_0": "bool True if there is sufficient quorum, false otherwise."
					}
				},
				"sufficientThreshold()": {
					"details": "Checks if the current threshold is sufficient, comparing it to the required threshold.",
					"returns": {
						"_0": "bool True if there is sufficient threshold, false otherwise."
					}
				},
				"support()": {
					"details": "Gets the current support for a proposal.",
					"returns": {
						"_0": "uint256 The current support value."
					}
				},
				"supportKey()": {
					"details": "Returns the keccak256 hash key for accessing the support in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the support."
					}
				},
				"target()": {
					"details": "Returns the current target address."
				},
				"targetKey()": {
					"details": "Returns the key for storing the target address."
				},
				"terminal()": {
					"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the terminal."
					}
				},
				"terminalKey()": {
					"details": "Returns the key used to store the terminal address.",
					"returns": {
						"_0": "bytes32 The key for the terminal in keccak256 hash."
					}
				},
				"threshold()": {
					"details": "Calculates the threshold by expressing the support as a percentage of the total quorum.",
					"returns": {
						"_0": "uint256 The threshold value."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"vote(uint256)": {
					"details": "Casts a vote for the specified side in the proposal.",
					"params": {
						"side": "The side to vote for (0: Abstain, 1: Against, 2: Support)."
					}
				},
				"votingERC20()": {
					"details": "Gets the current address of the Voting ERC20 contract.",
					"returns": {
						"_0": "address The address of the Voting ERC20 contract."
					}
				},
				"votingERC20Key()": {
					"details": "Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.",
					"returns": {
						"_0": "bytes32 The keccak256 hash key for the Voting ERC20 address."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol": "IReferendumProposalImplementation"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/polygon/interfaces/access-control/IOwnable.sol": {
			"keccak256": "0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960",
			"license": "MIT",
			"urls": [
				"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb",
				"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a"
			]
		},
		"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol": {
			"keccak256": "0xae4d7ddaa80ad651a294d0f7e3583d7897045b9593affc277fa35e9e0d99fde0",
			"license": "MIT",
			"urls": [
				"bzz-raw://18faa0aa9db89b64650f505cc4260faf1d8d9edaa1a15b96816c4215460fbf92",
				"dweb:/ipfs/QmPCqZWG8ZrxxtUF2Tqyqj6QtLNQnDHiQ1cWwpvsCQJWof"
			]
		},
		"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol": {
			"keccak256": "0xe8a033202ad3f4409b78e9ddc3258e20234f52dc55659c69c729bf1ed8710cb5",
			"license": "MIT",
			"urls": [
				"bzz-raw://ceb4b85972c1cf8cd319ed3e059b198fa374734bddf1599c0432f97fffab3a06",
				"dweb:/ipfs/QmVz34rzTuuYCLJgUSn51vdhqDQidgwLPy8FjbfzjV9tat"
			]
		},
		"contracts/polygon/interfaces/utils/IAddressBook.sol": {
			"keccak256": "0x48949b286894826ceca3e10c392c89b58c9a96e53c5a9f652d23fe6b20808061",
			"license": "MIT",
			"urls": [
				"bzz-raw://f0a130270d281538df250808a43ebb4e5d9bdbc82d94cd79a8a582b7c1803933",
				"dweb:/ipfs/QmdptXfaHwTrL7wgqJMC6Xow4r65Njsyiuo1CmCZ83iXan"
			]
		},
		"contracts/polygon/interfaces/utils/IInitializable.sol": {
			"keccak256": "0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d",
			"license": "MIT",
			"urls": [
				"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512",
				"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8"
			]
		},
		"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
			"keccak256": "0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756",
			"license": "MIT",
			"urls": [
				"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49",
				"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo"
			]
		},
		"contracts/polygon/interfaces/utils/IPayload.sol": {
			"keccak256": "0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e",
			"license": "MIT",
			"urls": [
				"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8",
				"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf"
			]
		},
		"contracts/polygon/interfaces/utils/ITag.sol": {
			"keccak256": "0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35",
			"license": "MIT",
			"urls": [
				"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4",
				"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM"
			]
		},
		"contracts/polygon/interfaces/utils/ITimer.sol": {
			"keccak256": "0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563",
			"license": "MIT",
			"urls": [
				"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158",
				"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS"
			]
		}
	},
	"version": 1
}