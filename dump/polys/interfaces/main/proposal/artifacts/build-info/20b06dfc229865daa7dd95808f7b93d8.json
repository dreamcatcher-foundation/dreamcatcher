{
	"id": "20b06dfc229865daa7dd95808f7b93d8",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol\";\nimport \"contracts/polygon/interfaces/utils/IAddressBook.sol\";\n\ninterface IReferendumProposalImplementation is IReferendumProposal, IAddressBook {\n\n    /**\n    * @dev Emitted when the terminal address is set.\n    * @param account The address of the new terminal.\n    */\n    event TerminalSet(address indexed account);\n\n    /**\n    * @dev Emitted when the MultiSigProposalFactory address is set.\n    * @param account The address of the new MultiSigProposalFactory.\n    */\n    event MultiSigProposalFactorySet(address indexed account);\n\n    /**\n    * @dev Emitted when the ReferendumProposalFactory address is set.\n    * @param account The address of the new ReferendumProposalFactory.\n    */\n    event ReferendumProposalFactorySet(address indexed account);\n\n    /**\n    * @dev Executes the MultiSigProposal and triggers additional actions.\n    * Calls the internal _execute function to mark the proposal as executed.\n    * Emits an Executed event.\n    * Calls terminal low level call and returns result.\n    */\n    function execute() external returns (bytes memory);\n\n    function setTerminal(address account) external;\n\n    /**\n    * @dev Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n    * Only the owner is allowed to perform this action.\n    * @param account The address of the new MultiSigProposalFactory.\n    */\n    function setMultiSigProposalFactory(address account) external;\n\n    /**\n    * @dev Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n    * Only the owner is allowed to perform this action.\n    * @param account The address of the new ReferendumProposalFactory.\n    */\n    function setReferendumProposalFactory(address account) external;\n}"
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* terminalKey => address\n* multiSigProposalFactoryKey => address\n* referendumProposalFactorykey => address\n */\ninterface IAddressBook {\n\n    /**\n    * @dev Returns the key used to store the terminal address.\n    * @return bytes32 The key for the terminal in keccak256 hash.\n    */\n    function terminalKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key used to store the MultiSigProposalFactory address.\n    * @return bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\n    */\n    function multiSigProposalFactoryKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key used to store the ReferendumProposalFactory address.\n    * @return bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\n    */\n    function referendumProposalFactoryKey() external pure returns (bytes32);\n\n    /**\n    * @dev Retrieves the address of the terminal associated with the MultiSigProposalFactory.\n    * @return address The address of the terminal.\n    */\n    function terminal() external view returns (address);\n\n    /**\n    * @dev Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n    * @return address The address of the MultiSigProposalFactory.\n    */\n    function multiSigProposalFactory() external view returns (address);\n\n    /**\n    * @dev Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n    * @return address The address of the ReferendumProposalFactory.\n    */\n    function referendumProposalFactory() external view returns (address);\n}"
			},
			"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"contracts/polygon/interfaces/utils/ILowLevelCall.sol\";\nimport \"contracts/polygon/interfaces/utils/ITag.sol\";\nimport \"contracts/polygon/interfaces/utils/ITimer.sol\";\nimport \"contracts/polygon/interfaces/utils/IPayload.sol\";\nimport \"contracts/polygon/interfaces/access-control/IOwnable.sol\";\nimport \"contracts/polygon/interfaces/utils/IInitializable.sol\";\n\ninterface IReferendumProposal is \n    ITag,\n    IPayload,\n    ITimer,\n    ILowLevelCall,\n    IInitializable,\n    IOwnable {\n\n    /**\n    * @param account The address that has voted.\n    * @param amount The amount of votes they have dedicated to this side.\n    */\n    event SupportIncreased(address indexed account, uint256 indexed amount);\n\n    /**\n    * @param account The address that has voted.\n    * @param amount The amount of votes they have dedicated to this side.\n    */\n    event AgainstIncreased(address indexed account, uint256 indexed amount);\n\n    /**\n    * @param account The address that has voted.\n    * @param amount The amount of votes they have dedicated to this side.\n    */\n    event AbstainIncreased(address indexed account, uint256 indexed amount);\n\n    /**\n    * @dev Emitted when a proposal is marked as passed.\n    */\n    event Passed();\n\n    /**\n    * @dev Emitted when a proposal is marked as executed.\n    */\n    event Executed();\n\n    /**\n    * @dev Emitted when the caption of a proposal is set.\n    * @param caption The new caption for the proposal.\n    */\n    event CaptionSet(string indexed caption);\n\n    /**\n    * @dev Emitted when the message of a proposal is set.\n    * @param message The new message for the proposal.\n    */\n    event MessageSet(string indexed message);\n\n    /**\n    * @dev Emitted when the creator of a proposal is set.\n    * @param creator The address of the new creator for the proposal.\n    */\n    event CreatorSet(address indexed creator);\n\n    /**\n    * @dev Emitted when the target address of a proposal is set.\n    * @param target The address of the new target for the proposal.\n    */\n    event TargetSet(address indexed target);\n\n    /**\n    * @dev Emitted when the data of a proposal is set.\n    * @param data The new data for the proposal.\n    */\n    event DataSet(address indexed data);\n\n    /**\n    * @dev Emitted when the start timestamp of a proposal is set.\n    * @param timestamp The new start timestamp for the proposal.\n    */\n    event StartTimestampSet(uint256 indexed timestamp);\n\n    /**\n    * @dev Emitted when the duration of a proposal is set.\n    * @param seconds_ The new duration in seconds for the proposal.\n    */\n    event DurationSet(uint256 indexed seconds_);\n\n    /**\n    * @dev Emitted when the required quorum of a proposal is set.\n    * @param bp The new required quorum as a basis point for the proposal.\n    */\n    event RequiredQuorumSet(uint256 indexed bp);\n\n    /**\n    * @dev Emitted when the required threshold of a proposal is set.\n    * @param bp The new required threshold as a basis point for the proposal.\n    */\n    event RequiredThresholdSet(uint256 indexed bp);\n\n    /**\n    * @dev Emitted when a snapshot is taken for a specific ID.\n    * @param id The index or identifier of the snapshot.\n    */\n    event SnapshotTaken(uint256 indexed id);\n\n    /**\n    * @dev Emitted when the Voting ERC20 address is set.\n    * @param erc20 The address of the new Voting ERC20 contract.\n    */\n    event VotingERC20Set(address indexed erc20);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the required quorum in storage.\n    * @return bytes32 The keccak256 hash key for the required quorum.\n    */\n    function requiredQuorumKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the required threshold in storage.\n    * @return bytes32 The keccak256 hash key for the required threshold.\n    */\n    function requiredThresholdKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the snapshot ID in storage.\n    * @return bytes32 The keccak256 hash key for the snapshot ID.\n    */\n    function snapshotIdKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.\n    * @return bytes32 The keccak256 hash key for the Voting ERC20 address.\n    */\n    function votingERC20Key() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the support in storage.\n    * @return bytes32 The keccak256 hash key for the support.\n    */\n    function supportKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the against votes in storage.\n    * @return bytes32 The keccak256 hash key for the against votes.\n    */\n    function againstKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the abstain votes in storage.\n    * @return bytes32 The keccak256 hash key for the abstain votes.\n    */\n    function abstainKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the \"passed\" status in storage.\n    * @return bytes32 The keccak256 hash key for the \"passed\" status.\n    */\n    function passedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash key for accessing the \"executed\" status in storage.\n    * @return bytes32 The keccak256 hash key for the \"executed\" status.\n    */\n    function executedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Gets the current required quorum for proposals.\n    * @return uint256 The required quorum as a basis point.\n    */\n    function requiredQuorum() external view returns (uint256);\n\n    /**\n    * @dev Gets the current required threshold for proposals.\n    * @return uint256 The required threshold as a basis point.\n    */\n    function requiredThreshold() external view returns (uint256);\n\n    /**\n    * @dev Gets the current snapshot ID.\n    * @return uint256 The current snapshot ID.\n    */\n    function snapshotId() external view returns (uint256);\n\n    /**\n    * @dev Gets the current address of the Voting ERC20 contract.\n    * @return address The address of the Voting ERC20 contract.\n    */\n    function votingERC20() external view returns (address);\n\n    /**\n    * @dev Gets the current support for a proposal.\n    * @return uint256 The current support value.\n    */\n    function support() external view returns (uint256);\n\n    /**\n    * @dev Gets the current against votes for a proposal.\n    * @return uint256 The current against votes value.\n    */\n    function against() external view returns (uint256);\n\n    /**\n    * @dev Gets the current abstain votes for a proposal.\n    * @return uint256 The current abstain votes value.\n    */\n    function abstain() external view returns (uint256);\n\n    /**\n    * @dev Calculates the total quorum by summing up the support, against, and abstain votes.\n    * @return uint256 The total quorum.\n    */\n    function quorum() external view returns (uint256);\n\n    /**\n    * @dev Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.\n    * @return uint256 The required quorum number.\n    */\n    function requiredQuorumNumber() external view returns (uint256);\n\n    /**\n    * @dev Checks if the current quorum is sufficient, comparing it to the required quorum number.\n    * @return bool True if there is sufficient quorum, false otherwise.\n    */\n    function sufficientQuorum() external view returns (bool);\n\n    /**\n    * @dev Calculates the threshold by expressing the support as a percentage of the total quorum.\n    * @return uint256 The threshold value.\n    */\n    function threshold() external view returns (uint256);\n\n    /**\n    * @dev Checks if the current threshold is sufficient, comparing it to the required threshold.\n    * @return bool True if there is sufficient threshold, false otherwise.\n    */\n    function sufficientThreshold() external view returns (bool);\n\n    /**\n    * @dev Checks if the proposal has passed.\n    * @return bool True if the proposal has passed, false otherwise.\n    */\n    function passed() external view returns (bool);\n\n    /**\n    * @dev Checks if the proposal has been executed.\n    * @return bool True if the proposal has been executed, false otherwise.\n    */\n    function executed() external view returns (bool);\n\n    /**\n    * @dev Initializes the contract. Should be called only once during deployment.\n    */\n    function initialize() external;\n\n    /**\n    * @dev Sets the caption of the proposal.\n    * @param caption The new caption to be set.\n    */\n    function setCaption(string memory caption) external;\n\n    /**\n    * @dev Sets the message of the proposal.\n    * @param message The new message to be set.\n    */\n    function setMessage(string memory message) external;\n\n    /**\n    * @dev Sets the creator of the proposal.\n    * @param account The address of the new creator.\n    */\n    function setCreator(address account) external;\n\n    /**\n    * @dev Sets the target address of the proposal.\n    * @param account The new target address.\n    */\n    function setTarget(address account) external;\n\n    /**\n    * @dev Sets the data of the proposal.\n    * @param data The new data to be set.\n    */\n    function setData(bytes memory data) external;\n\n    /**\n    * @dev Sets the start timestamp of the proposal.\n    * @param timestamp The new start timestamp.\n    */\n    function setStartTimestamp(uint256 timestamp) external;\n\n    /**\n    * @dev Sets the duration of the proposal in seconds.\n    * @param seconds_ The new duration in seconds.\n    */\n    function setDuration(uint256 seconds_) external;\n\n    /**\n    * @dev Sets the required quorum percentage for the proposal.\n    * @param bp The new required quorum percentage (basis points).\n    */\n    function setRequiredQuorum(uint256 bp) external;\n\n    /**\n    * @dev Sets the required threshold percentage for the proposal.\n    * @param bp The new required threshold percentage (basis points).\n    */\n    function setRequiredThreshold(uint256 bp) external;\n\n    /**\n    * @dev Takes a snapshot of the voting ERC20 balances and supply.\n    * Only the owner can trigger a snapshot.\n    */\n    function snapshot() external;\n\n    /**\n    * @dev Sets the ERC20 token used for voting in the proposal.\n    * @param erc20 The address of the ERC20 token contract.\n    */\n    function setVotingERC20(address erc20) external;\n\n    /**\n    * @dev Casts a vote for the specified side in the proposal.\n    * @param side The side to vote for (0: Abstain, 1: Against, 2: Support).\n    */\n    function vote(uint256 side) external;\n}"
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IInitializable {\n\n    /**\n    * @dev Returns the key for checking if the contract has been initialized.\n    */\n    function initializedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Checks if the contract has been initialized.\n    */\n    function initialized() external view returns (bool);\n}"
			},
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* ownerKey => address\n */\ninterface IOwnable {\n\n    /**\n    * @dev Emitted when ownership of the contract is transferred.\n    * @param oldOwner The address of the old owner.\n    * @param newOwner The address of the new owner.\n    */\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /**\n    * @dev Returns the key for the owner in the storage mapping.\n    * @return The key for the owner.\n    */\n    function ownerkey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the current owner of the contract.\n    * @return The address of the current owner.\n    */\n    function owner() external view returns (address);\n\n    /**\n    * @dev Renounces ownership, leaving the contract without an owner.\n    */\n    function renounceOwnership() external;\n\n    /**\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n    function transferOwnership(address newOwner) external;\n}"
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* targetKey => address\n* dataKey => bytes\n */\ninterface IPayload {\n\n    /**\n    * @dev Returns the key for storing the target address.\n    */\n    function targetKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the data.\n    */\n    function dataKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the current target address.\n    */\n    function target() external view returns (address);\n\n    /**\n    * @dev Returns the current data bytes.\n    */\n    function data() external view returns (bytes memory);\n}"
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ITimer {\n\n    /**\n    * @dev Returns the key for the start timestamp.\n    */\n    function startTimestampKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for the duration.\n    */\n    function durationKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the start timestamp.\n    */\n    function startTimestamp() external view returns (uint256);\n\n    /**\n    * @dev Returns the end timestamp.\n    */\n    function endTimestamp() external view returns (uint256);\n\n    /**\n    * @dev Returns the duration.\n    */\n    function duration() external view returns (uint256);\n\n    /**\n    * @dev Checks if the timer has started.\n    */\n    function started() external view returns (bool);\n\n    /**\n    * @dev Checks if the timer has ended.\n    */\n    function ended() external view returns (bool);\n\n    /**\n    * @dev Checks if the timer is actively counting.\n    */\n    function counting() external view returns (bool);\n\n    /**\n    * @dev Calculates the remaining seconds in the timer.\n    */\n    function secondsLeft() external view returns (uint256);\n}"
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ITag {\n\n    /**\n    * @dev Returns the key for storing the caption in storage.\n    */\n    function captionKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the message in storage.\n    */\n    function messageKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the creator in storage.\n    */\n    function creatorKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the caption associated with the proposal.\n    */\n    function caption() external view returns (string memory);\n\n    /**\n    * @dev Returns the message associated with the proposal.\n    */\n    function message() external view returns (string memory);\n\n    /**\n    * @dev Returns the address of the creator of the proposal.\n    */\n    function creator() external view returns (address);\n}"
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ILowLevelCall {\n\n    /**\n    * @dev Emitted when a low-level call is executed.\n    * @param target The target address of the call.\n    * @param data The data passed to the call.\n    * @param response The response received from the call.\n    */\n    event LowLevelCall(address indexed target, bytes indexed data, bytes indexed response);\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"IOwnable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"ownerKey => address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "ownerKey => address",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol": {
				"IReferendumProposal": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AbstainIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AgainstIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "CaptionSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								}
							],
							"name": "CreatorSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "data",
									"type": "address"
								}
							],
							"name": "DataSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "DurationSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "MessageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Passed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredQuorumSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredThresholdSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "SnapshotTaken",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "StartTimestampSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "SupportIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "TargetSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "erc20",
									"type": "address"
								}
							],
							"name": "VotingERC20Set",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "abstain",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "abstainKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "against",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "againstKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "quorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumNumber",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredThreshold",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredThresholdKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "setCaption",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setCreator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "setData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "setDuration",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "setMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredQuorum",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredThreshold",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "setStartTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTarget",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "erc20",
									"type": "address"
								}
							],
							"name": "setVotingERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshotId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshotIdKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sufficientQuorum",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sufficientThreshold",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "support",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "supportKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "threshold",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "side",
									"type": "uint256"
								}
							],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "votingERC20",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "votingERC20Key",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"AbstainIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"AgainstIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"CaptionSet(string)": {
								"details": "Emitted when the caption of a proposal is set.",
								"params": {
									"caption": "The new caption for the proposal."
								}
							},
							"CreatorSet(address)": {
								"details": "Emitted when the creator of a proposal is set.",
								"params": {
									"creator": "The address of the new creator for the proposal."
								}
							},
							"DataSet(address)": {
								"details": "Emitted when the data of a proposal is set.",
								"params": {
									"data": "The new data for the proposal."
								}
							},
							"DurationSet(uint256)": {
								"details": "Emitted when the duration of a proposal is set.",
								"params": {
									"seconds_": "The new duration in seconds for the proposal."
								}
							},
							"Executed()": {
								"details": "Emitted when a proposal is marked as executed."
							},
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							},
							"MessageSet(string)": {
								"details": "Emitted when the message of a proposal is set.",
								"params": {
									"message": "The new message for the proposal."
								}
							},
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							},
							"Passed()": {
								"details": "Emitted when a proposal is marked as passed."
							},
							"RequiredQuorumSet(uint256)": {
								"details": "Emitted when the required quorum of a proposal is set.",
								"params": {
									"bp": "The new required quorum as a basis point for the proposal."
								}
							},
							"RequiredThresholdSet(uint256)": {
								"details": "Emitted when the required threshold of a proposal is set.",
								"params": {
									"bp": "The new required threshold as a basis point for the proposal."
								}
							},
							"SnapshotTaken(uint256)": {
								"details": "Emitted when a snapshot is taken for a specific ID.",
								"params": {
									"id": "The index or identifier of the snapshot."
								}
							},
							"StartTimestampSet(uint256)": {
								"details": "Emitted when the start timestamp of a proposal is set.",
								"params": {
									"timestamp": "The new start timestamp for the proposal."
								}
							},
							"SupportIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"TargetSet(address)": {
								"details": "Emitted when the target address of a proposal is set.",
								"params": {
									"target": "The address of the new target for the proposal."
								}
							},
							"VotingERC20Set(address)": {
								"details": "Emitted when the Voting ERC20 address is set.",
								"params": {
									"erc20": "The address of the new Voting ERC20 contract."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"abstain()": {
								"details": "Gets the current abstain votes for a proposal.",
								"returns": {
									"_0": "uint256 The current abstain votes value."
								}
							},
							"abstainKey()": {
								"details": "Returns the keccak256 hash key for accessing the abstain votes in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the abstain votes."
								}
							},
							"against()": {
								"details": "Gets the current against votes for a proposal.",
								"returns": {
									"_0": "uint256 The current against votes value."
								}
							},
							"againstKey()": {
								"details": "Returns the keccak256 hash key for accessing the against votes in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the against votes."
								}
							},
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"executed()": {
								"details": "Checks if the proposal has been executed.",
								"returns": {
									"_0": "bool True if the proposal has been executed, false otherwise."
								}
							},
							"executedKey()": {
								"details": "Returns the keccak256 hash key for accessing the \"executed\" status in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the \"executed\" status."
								}
							},
							"initialize()": {
								"details": "Initializes the contract. Should be called only once during deployment."
							},
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							},
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"passed()": {
								"details": "Checks if the proposal has passed.",
								"returns": {
									"_0": "bool True if the proposal has passed, false otherwise."
								}
							},
							"passedKey()": {
								"details": "Returns the keccak256 hash key for accessing the \"passed\" status in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the \"passed\" status."
								}
							},
							"quorum()": {
								"details": "Calculates the total quorum by summing up the support, against, and abstain votes.",
								"returns": {
									"_0": "uint256 The total quorum."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"requiredQuorum()": {
								"details": "Gets the current required quorum for proposals.",
								"returns": {
									"_0": "uint256 The required quorum as a basis point."
								}
							},
							"requiredQuorumKey()": {
								"details": "Returns the keccak256 hash key for accessing the required quorum in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the required quorum."
								}
							},
							"requiredQuorumNumber()": {
								"details": "Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.",
								"returns": {
									"_0": "uint256 The required quorum number."
								}
							},
							"requiredThreshold()": {
								"details": "Gets the current required threshold for proposals.",
								"returns": {
									"_0": "uint256 The required threshold as a basis point."
								}
							},
							"requiredThresholdKey()": {
								"details": "Returns the keccak256 hash key for accessing the required threshold in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the required threshold."
								}
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"setCaption(string)": {
								"details": "Sets the caption of the proposal.",
								"params": {
									"caption": "The new caption to be set."
								}
							},
							"setCreator(address)": {
								"details": "Sets the creator of the proposal.",
								"params": {
									"account": "The address of the new creator."
								}
							},
							"setData(bytes)": {
								"details": "Sets the data of the proposal.",
								"params": {
									"data": "The new data to be set."
								}
							},
							"setDuration(uint256)": {
								"details": "Sets the duration of the proposal in seconds.",
								"params": {
									"seconds_": "The new duration in seconds."
								}
							},
							"setMessage(string)": {
								"details": "Sets the message of the proposal.",
								"params": {
									"message": "The new message to be set."
								}
							},
							"setRequiredQuorum(uint256)": {
								"details": "Sets the required quorum percentage for the proposal.",
								"params": {
									"bp": "The new required quorum percentage (basis points)."
								}
							},
							"setRequiredThreshold(uint256)": {
								"details": "Sets the required threshold percentage for the proposal.",
								"params": {
									"bp": "The new required threshold percentage (basis points)."
								}
							},
							"setStartTimestamp(uint256)": {
								"details": "Sets the start timestamp of the proposal.",
								"params": {
									"timestamp": "The new start timestamp."
								}
							},
							"setTarget(address)": {
								"details": "Sets the target address of the proposal.",
								"params": {
									"account": "The new target address."
								}
							},
							"setVotingERC20(address)": {
								"details": "Sets the ERC20 token used for voting in the proposal.",
								"params": {
									"erc20": "The address of the ERC20 token contract."
								}
							},
							"snapshot()": {
								"details": "Takes a snapshot of the voting ERC20 balances and supply. Only the owner can trigger a snapshot."
							},
							"snapshotId()": {
								"details": "Gets the current snapshot ID.",
								"returns": {
									"_0": "uint256 The current snapshot ID."
								}
							},
							"snapshotIdKey()": {
								"details": "Returns the keccak256 hash key for accessing the snapshot ID in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the snapshot ID."
								}
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							},
							"sufficientQuorum()": {
								"details": "Checks if the current quorum is sufficient, comparing it to the required quorum number.",
								"returns": {
									"_0": "bool True if there is sufficient quorum, false otherwise."
								}
							},
							"sufficientThreshold()": {
								"details": "Checks if the current threshold is sufficient, comparing it to the required threshold.",
								"returns": {
									"_0": "bool True if there is sufficient threshold, false otherwise."
								}
							},
							"support()": {
								"details": "Gets the current support for a proposal.",
								"returns": {
									"_0": "uint256 The current support value."
								}
							},
							"supportKey()": {
								"details": "Returns the keccak256 hash key for accessing the support in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the support."
								}
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							},
							"threshold()": {
								"details": "Calculates the threshold by expressing the support as a percentage of the total quorum.",
								"returns": {
									"_0": "uint256 The threshold value."
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"vote(uint256)": {
								"details": "Casts a vote for the specified side in the proposal.",
								"params": {
									"side": "The side to vote for (0: Abstain, 1: Against, 2: Support)."
								}
							},
							"votingERC20()": {
								"details": "Gets the current address of the Voting ERC20 contract.",
								"returns": {
									"_0": "address The address of the Voting ERC20 contract."
								}
							},
							"votingERC20Key()": {
								"details": "Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the Voting ERC20 address."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"abstain()": "5e98e4c7",
							"abstainKey()": "28f9b0c7",
							"against()": "dc50af26",
							"againstKey()": "689e4d8d",
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"counting()": "8554b847",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"executed()": "31a38c89",
							"executedKey()": "7870dfae",
							"initialize()": "8129fc1c",
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b",
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"passed()": "a05b5c30",
							"passedKey()": "becfa6c0",
							"quorum()": "1703a018",
							"renounceOwnership()": "715018a6",
							"requiredQuorum()": "7036014e",
							"requiredQuorumKey()": "372fdd00",
							"requiredQuorumNumber()": "beb0a18d",
							"requiredThreshold()": "4af5e37f",
							"requiredThresholdKey()": "b0687ad7",
							"secondsLeft()": "86a83735",
							"setCaption(string)": "04b9f2f0",
							"setCreator(address)": "3f516018",
							"setData(bytes)": "ab62f0e1",
							"setDuration(uint256)": "f6be71d1",
							"setMessage(string)": "368b8772",
							"setRequiredQuorum(uint256)": "fc19e8ed",
							"setRequiredThreshold(uint256)": "6f206f2c",
							"setStartTimestamp(uint256)": "c44bef75",
							"setTarget(address)": "776d1a01",
							"setVotingERC20(address)": "d92f1c96",
							"snapshot()": "9711715a",
							"snapshotId()": "2ddc79b7",
							"snapshotIdKey()": "efc1b2c3",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab",
							"sufficientQuorum()": "9eace5cd",
							"sufficientThreshold()": "152737b2",
							"support()": "119f8747",
							"supportKey()": "647baea1",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36",
							"threshold()": "42cde4e8",
							"transferOwnership(address)": "f2fde38b",
							"vote(uint256)": "0121b93f",
							"votingERC20()": "5c098f1a",
							"votingERC20Key()": "d4b927fd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AbstainIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AgainstIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"CaptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"DurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Passed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupportIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"VotingERC20Set\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abstain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abstainKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"against\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"againstKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredThresholdKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"setCaption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"setVotingERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotIdKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sufficientQuorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sufficientThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingERC20Key\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AbstainIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"AgainstIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"CaptionSet(string)\":{\"details\":\"Emitted when the caption of a proposal is set.\",\"params\":{\"caption\":\"The new caption for the proposal.\"}},\"CreatorSet(address)\":{\"details\":\"Emitted when the creator of a proposal is set.\",\"params\":{\"creator\":\"The address of the new creator for the proposal.\"}},\"DataSet(address)\":{\"details\":\"Emitted when the data of a proposal is set.\",\"params\":{\"data\":\"The new data for the proposal.\"}},\"DurationSet(uint256)\":{\"details\":\"Emitted when the duration of a proposal is set.\",\"params\":{\"seconds_\":\"The new duration in seconds for the proposal.\"}},\"Executed()\":{\"details\":\"Emitted when a proposal is marked as executed.\"},\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}},\"MessageSet(string)\":{\"details\":\"Emitted when the message of a proposal is set.\",\"params\":{\"message\":\"The new message for the proposal.\"}},\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}},\"Passed()\":{\"details\":\"Emitted when a proposal is marked as passed.\"},\"RequiredQuorumSet(uint256)\":{\"details\":\"Emitted when the required quorum of a proposal is set.\",\"params\":{\"bp\":\"The new required quorum as a basis point for the proposal.\"}},\"RequiredThresholdSet(uint256)\":{\"details\":\"Emitted when the required threshold of a proposal is set.\",\"params\":{\"bp\":\"The new required threshold as a basis point for the proposal.\"}},\"SnapshotTaken(uint256)\":{\"details\":\"Emitted when a snapshot is taken for a specific ID.\",\"params\":{\"id\":\"The index or identifier of the snapshot.\"}},\"StartTimestampSet(uint256)\":{\"details\":\"Emitted when the start timestamp of a proposal is set.\",\"params\":{\"timestamp\":\"The new start timestamp for the proposal.\"}},\"SupportIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"TargetSet(address)\":{\"details\":\"Emitted when the target address of a proposal is set.\",\"params\":{\"target\":\"The address of the new target for the proposal.\"}},\"VotingERC20Set(address)\":{\"details\":\"Emitted when the Voting ERC20 address is set.\",\"params\":{\"erc20\":\"The address of the new Voting ERC20 contract.\"}}},\"kind\":\"dev\",\"methods\":{\"abstain()\":{\"details\":\"Gets the current abstain votes for a proposal.\",\"returns\":{\"_0\":\"uint256 The current abstain votes value.\"}},\"abstainKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the abstain votes in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the abstain votes.\"}},\"against()\":{\"details\":\"Gets the current against votes for a proposal.\",\"returns\":{\"_0\":\"uint256 The current against votes value.\"}},\"againstKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the against votes in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the against votes.\"}},\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"executed()\":{\"details\":\"Checks if the proposal has been executed.\",\"returns\":{\"_0\":\"bool True if the proposal has been executed, false otherwise.\"}},\"executedKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the \\\"executed\\\" status in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the \\\"executed\\\" status.\"}},\"initialize()\":{\"details\":\"Initializes the contract. Should be called only once during deployment.\"},\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"},\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"passed()\":{\"details\":\"Checks if the proposal has passed.\",\"returns\":{\"_0\":\"bool True if the proposal has passed, false otherwise.\"}},\"passedKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the \\\"passed\\\" status in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the \\\"passed\\\" status.\"}},\"quorum()\":{\"details\":\"Calculates the total quorum by summing up the support, against, and abstain votes.\",\"returns\":{\"_0\":\"uint256 The total quorum.\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"requiredQuorum()\":{\"details\":\"Gets the current required quorum for proposals.\",\"returns\":{\"_0\":\"uint256 The required quorum as a basis point.\"}},\"requiredQuorumKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the required quorum in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the required quorum.\"}},\"requiredQuorumNumber()\":{\"details\":\"Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.\",\"returns\":{\"_0\":\"uint256 The required quorum number.\"}},\"requiredThreshold()\":{\"details\":\"Gets the current required threshold for proposals.\",\"returns\":{\"_0\":\"uint256 The required threshold as a basis point.\"}},\"requiredThresholdKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the required threshold in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the required threshold.\"}},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"setCaption(string)\":{\"details\":\"Sets the caption of the proposal.\",\"params\":{\"caption\":\"The new caption to be set.\"}},\"setCreator(address)\":{\"details\":\"Sets the creator of the proposal.\",\"params\":{\"account\":\"The address of the new creator.\"}},\"setData(bytes)\":{\"details\":\"Sets the data of the proposal.\",\"params\":{\"data\":\"The new data to be set.\"}},\"setDuration(uint256)\":{\"details\":\"Sets the duration of the proposal in seconds.\",\"params\":{\"seconds_\":\"The new duration in seconds.\"}},\"setMessage(string)\":{\"details\":\"Sets the message of the proposal.\",\"params\":{\"message\":\"The new message to be set.\"}},\"setRequiredQuorum(uint256)\":{\"details\":\"Sets the required quorum percentage for the proposal.\",\"params\":{\"bp\":\"The new required quorum percentage (basis points).\"}},\"setRequiredThreshold(uint256)\":{\"details\":\"Sets the required threshold percentage for the proposal.\",\"params\":{\"bp\":\"The new required threshold percentage (basis points).\"}},\"setStartTimestamp(uint256)\":{\"details\":\"Sets the start timestamp of the proposal.\",\"params\":{\"timestamp\":\"The new start timestamp.\"}},\"setTarget(address)\":{\"details\":\"Sets the target address of the proposal.\",\"params\":{\"account\":\"The new target address.\"}},\"setVotingERC20(address)\":{\"details\":\"Sets the ERC20 token used for voting in the proposal.\",\"params\":{\"erc20\":\"The address of the ERC20 token contract.\"}},\"snapshot()\":{\"details\":\"Takes a snapshot of the voting ERC20 balances and supply. Only the owner can trigger a snapshot.\"},\"snapshotId()\":{\"details\":\"Gets the current snapshot ID.\",\"returns\":{\"_0\":\"uint256 The current snapshot ID.\"}},\"snapshotIdKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the snapshot ID in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the snapshot ID.\"}},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"},\"sufficientQuorum()\":{\"details\":\"Checks if the current quorum is sufficient, comparing it to the required quorum number.\",\"returns\":{\"_0\":\"bool True if there is sufficient quorum, false otherwise.\"}},\"sufficientThreshold()\":{\"details\":\"Checks if the current threshold is sufficient, comparing it to the required threshold.\",\"returns\":{\"_0\":\"bool True if there is sufficient threshold, false otherwise.\"}},\"support()\":{\"details\":\"Gets the current support for a proposal.\",\"returns\":{\"_0\":\"uint256 The current support value.\"}},\"supportKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the support in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the support.\"}},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"},\"threshold()\":{\"details\":\"Calculates the threshold by expressing the support as a percentage of the total quorum.\",\"returns\":{\"_0\":\"uint256 The threshold value.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256)\":{\"details\":\"Casts a vote for the specified side in the proposal.\",\"params\":{\"side\":\"The side to vote for (0: Abstain, 1: Against, 2: Support).\"}},\"votingERC20()\":{\"details\":\"Gets the current address of the Voting ERC20 contract.\",\"returns\":{\"_0\":\"address The address of the Voting ERC20 contract.\"}},\"votingERC20Key()\":{\"details\":\"Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the Voting ERC20 address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol\":\"IReferendumProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]},\"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol\":{\"keccak256\":\"0xae4d7ddaa80ad651a294d0f7e3583d7897045b9593affc277fa35e9e0d99fde0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18faa0aa9db89b64650f505cc4260faf1d8d9edaa1a15b96816c4215460fbf92\",\"dweb:/ipfs/QmPCqZWG8ZrxxtUF2Tqyqj6QtLNQnDHiQ1cWwpvsCQJWof\"]},\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]},\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]},\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]},\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]},\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol": {
				"IReferendumProposalImplementation": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AbstainIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "AgainstIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "CaptionSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								}
							],
							"name": "CreatorSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "data",
									"type": "address"
								}
							],
							"name": "DataSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "DurationSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "MessageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "MultiSigProposalFactorySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Passed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "ReferendumProposalFactorySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredQuorumSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredThresholdSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								}
							],
							"name": "SnapshotTaken",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "StartTimestampSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "SupportIncreased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "TargetSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "TerminalSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "erc20",
									"type": "address"
								}
							],
							"name": "VotingERC20Set",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "abstain",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "abstainKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "against",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "againstKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "execute",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "quorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumNumber",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredThreshold",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredThresholdKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "setCaption",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setCreator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "setData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "setDuration",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "setMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setMultiSigProposalFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setReferendumProposalFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredQuorum",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredThreshold",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "setStartTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTarget",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTerminal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "erc20",
									"type": "address"
								}
							],
							"name": "setVotingERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshot",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshotId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "snapshotIdKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sufficientQuorum",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sufficientThreshold",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "support",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "supportKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminal",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminalKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "threshold",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "side",
									"type": "uint256"
								}
							],
							"name": "vote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "votingERC20",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "votingERC20Key",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"AbstainIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"AgainstIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"CaptionSet(string)": {
								"details": "Emitted when the caption of a proposal is set.",
								"params": {
									"caption": "The new caption for the proposal."
								}
							},
							"CreatorSet(address)": {
								"details": "Emitted when the creator of a proposal is set.",
								"params": {
									"creator": "The address of the new creator for the proposal."
								}
							},
							"DataSet(address)": {
								"details": "Emitted when the data of a proposal is set.",
								"params": {
									"data": "The new data for the proposal."
								}
							},
							"DurationSet(uint256)": {
								"details": "Emitted when the duration of a proposal is set.",
								"params": {
									"seconds_": "The new duration in seconds for the proposal."
								}
							},
							"Executed()": {
								"details": "Emitted when a proposal is marked as executed."
							},
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							},
							"MessageSet(string)": {
								"details": "Emitted when the message of a proposal is set.",
								"params": {
									"message": "The new message for the proposal."
								}
							},
							"MultiSigProposalFactorySet(address)": {
								"details": "Emitted when the MultiSigProposalFactory address is set.",
								"params": {
									"account": "The address of the new MultiSigProposalFactory."
								}
							},
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							},
							"Passed()": {
								"details": "Emitted when a proposal is marked as passed."
							},
							"ReferendumProposalFactorySet(address)": {
								"details": "Emitted when the ReferendumProposalFactory address is set.",
								"params": {
									"account": "The address of the new ReferendumProposalFactory."
								}
							},
							"RequiredQuorumSet(uint256)": {
								"details": "Emitted when the required quorum of a proposal is set.",
								"params": {
									"bp": "The new required quorum as a basis point for the proposal."
								}
							},
							"RequiredThresholdSet(uint256)": {
								"details": "Emitted when the required threshold of a proposal is set.",
								"params": {
									"bp": "The new required threshold as a basis point for the proposal."
								}
							},
							"SnapshotTaken(uint256)": {
								"details": "Emitted when a snapshot is taken for a specific ID.",
								"params": {
									"id": "The index or identifier of the snapshot."
								}
							},
							"StartTimestampSet(uint256)": {
								"details": "Emitted when the start timestamp of a proposal is set.",
								"params": {
									"timestamp": "The new start timestamp for the proposal."
								}
							},
							"SupportIncreased(address,uint256)": {
								"params": {
									"account": "The address that has voted.",
									"amount": "The amount of votes they have dedicated to this side."
								}
							},
							"TargetSet(address)": {
								"details": "Emitted when the target address of a proposal is set.",
								"params": {
									"target": "The address of the new target for the proposal."
								}
							},
							"TerminalSet(address)": {
								"details": "Emitted when the terminal address is set.",
								"params": {
									"account": "The address of the new terminal."
								}
							},
							"VotingERC20Set(address)": {
								"details": "Emitted when the Voting ERC20 address is set.",
								"params": {
									"erc20": "The address of the new Voting ERC20 contract."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"abstain()": {
								"details": "Gets the current abstain votes for a proposal.",
								"returns": {
									"_0": "uint256 The current abstain votes value."
								}
							},
							"abstainKey()": {
								"details": "Returns the keccak256 hash key for accessing the abstain votes in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the abstain votes."
								}
							},
							"against()": {
								"details": "Gets the current against votes for a proposal.",
								"returns": {
									"_0": "uint256 The current against votes value."
								}
							},
							"againstKey()": {
								"details": "Returns the keccak256 hash key for accessing the against votes in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the against votes."
								}
							},
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"execute()": {
								"details": "Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. Calls terminal low level call and returns result."
							},
							"executed()": {
								"details": "Checks if the proposal has been executed.",
								"returns": {
									"_0": "bool True if the proposal has been executed, false otherwise."
								}
							},
							"executedKey()": {
								"details": "Returns the keccak256 hash key for accessing the \"executed\" status in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the \"executed\" status."
								}
							},
							"initialize()": {
								"details": "Initializes the contract. Should be called only once during deployment."
							},
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							},
							"multiSigProposalFactory()": {
								"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the MultiSigProposalFactory."
								}
							},
							"multiSigProposalFactoryKey()": {
								"details": "Returns the key used to store the MultiSigProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
								}
							},
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"passed()": {
								"details": "Checks if the proposal has passed.",
								"returns": {
									"_0": "bool True if the proposal has passed, false otherwise."
								}
							},
							"passedKey()": {
								"details": "Returns the keccak256 hash key for accessing the \"passed\" status in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the \"passed\" status."
								}
							},
							"quorum()": {
								"details": "Calculates the total quorum by summing up the support, against, and abstain votes.",
								"returns": {
									"_0": "uint256 The total quorum."
								}
							},
							"referendumProposalFactory()": {
								"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the ReferendumProposalFactory."
								}
							},
							"referendumProposalFactoryKey()": {
								"details": "Returns the key used to store the ReferendumProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"requiredQuorum()": {
								"details": "Gets the current required quorum for proposals.",
								"returns": {
									"_0": "uint256 The required quorum as a basis point."
								}
							},
							"requiredQuorumKey()": {
								"details": "Returns the keccak256 hash key for accessing the required quorum in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the required quorum."
								}
							},
							"requiredQuorumNumber()": {
								"details": "Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.",
								"returns": {
									"_0": "uint256 The required quorum number."
								}
							},
							"requiredThreshold()": {
								"details": "Gets the current required threshold for proposals.",
								"returns": {
									"_0": "uint256 The required threshold as a basis point."
								}
							},
							"requiredThresholdKey()": {
								"details": "Returns the keccak256 hash key for accessing the required threshold in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the required threshold."
								}
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"setCaption(string)": {
								"details": "Sets the caption of the proposal.",
								"params": {
									"caption": "The new caption to be set."
								}
							},
							"setCreator(address)": {
								"details": "Sets the creator of the proposal.",
								"params": {
									"account": "The address of the new creator."
								}
							},
							"setData(bytes)": {
								"details": "Sets the data of the proposal.",
								"params": {
									"data": "The new data to be set."
								}
							},
							"setDuration(uint256)": {
								"details": "Sets the duration of the proposal in seconds.",
								"params": {
									"seconds_": "The new duration in seconds."
								}
							},
							"setMessage(string)": {
								"details": "Sets the message of the proposal.",
								"params": {
									"message": "The new message to be set."
								}
							},
							"setMultiSigProposalFactory(address)": {
								"details": "Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
								"params": {
									"account": "The address of the new MultiSigProposalFactory."
								}
							},
							"setReferendumProposalFactory(address)": {
								"details": "Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
								"params": {
									"account": "The address of the new ReferendumProposalFactory."
								}
							},
							"setRequiredQuorum(uint256)": {
								"details": "Sets the required quorum percentage for the proposal.",
								"params": {
									"bp": "The new required quorum percentage (basis points)."
								}
							},
							"setRequiredThreshold(uint256)": {
								"details": "Sets the required threshold percentage for the proposal.",
								"params": {
									"bp": "The new required threshold percentage (basis points)."
								}
							},
							"setStartTimestamp(uint256)": {
								"details": "Sets the start timestamp of the proposal.",
								"params": {
									"timestamp": "The new start timestamp."
								}
							},
							"setTarget(address)": {
								"details": "Sets the target address of the proposal.",
								"params": {
									"account": "The new target address."
								}
							},
							"setVotingERC20(address)": {
								"details": "Sets the ERC20 token used for voting in the proposal.",
								"params": {
									"erc20": "The address of the ERC20 token contract."
								}
							},
							"snapshot()": {
								"details": "Takes a snapshot of the voting ERC20 balances and supply. Only the owner can trigger a snapshot."
							},
							"snapshotId()": {
								"details": "Gets the current snapshot ID.",
								"returns": {
									"_0": "uint256 The current snapshot ID."
								}
							},
							"snapshotIdKey()": {
								"details": "Returns the keccak256 hash key for accessing the snapshot ID in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the snapshot ID."
								}
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							},
							"sufficientQuorum()": {
								"details": "Checks if the current quorum is sufficient, comparing it to the required quorum number.",
								"returns": {
									"_0": "bool True if there is sufficient quorum, false otherwise."
								}
							},
							"sufficientThreshold()": {
								"details": "Checks if the current threshold is sufficient, comparing it to the required threshold.",
								"returns": {
									"_0": "bool True if there is sufficient threshold, false otherwise."
								}
							},
							"support()": {
								"details": "Gets the current support for a proposal.",
								"returns": {
									"_0": "uint256 The current support value."
								}
							},
							"supportKey()": {
								"details": "Returns the keccak256 hash key for accessing the support in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the support."
								}
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							},
							"terminal()": {
								"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the terminal."
								}
							},
							"terminalKey()": {
								"details": "Returns the key used to store the terminal address.",
								"returns": {
									"_0": "bytes32 The key for the terminal in keccak256 hash."
								}
							},
							"threshold()": {
								"details": "Calculates the threshold by expressing the support as a percentage of the total quorum.",
								"returns": {
									"_0": "uint256 The threshold value."
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"vote(uint256)": {
								"details": "Casts a vote for the specified side in the proposal.",
								"params": {
									"side": "The side to vote for (0: Abstain, 1: Against, 2: Support)."
								}
							},
							"votingERC20()": {
								"details": "Gets the current address of the Voting ERC20 contract.",
								"returns": {
									"_0": "address The address of the Voting ERC20 contract."
								}
							},
							"votingERC20Key()": {
								"details": "Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.",
								"returns": {
									"_0": "bytes32 The keccak256 hash key for the Voting ERC20 address."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"abstain()": "5e98e4c7",
							"abstainKey()": "28f9b0c7",
							"against()": "dc50af26",
							"againstKey()": "689e4d8d",
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"counting()": "8554b847",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"execute()": "61461954",
							"executed()": "31a38c89",
							"executedKey()": "7870dfae",
							"initialize()": "8129fc1c",
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b",
							"multiSigProposalFactory()": "0065d30d",
							"multiSigProposalFactoryKey()": "d63391c0",
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"passed()": "a05b5c30",
							"passedKey()": "becfa6c0",
							"quorum()": "1703a018",
							"referendumProposalFactory()": "2053aa53",
							"referendumProposalFactoryKey()": "dedaace5",
							"renounceOwnership()": "715018a6",
							"requiredQuorum()": "7036014e",
							"requiredQuorumKey()": "372fdd00",
							"requiredQuorumNumber()": "beb0a18d",
							"requiredThreshold()": "4af5e37f",
							"requiredThresholdKey()": "b0687ad7",
							"secondsLeft()": "86a83735",
							"setCaption(string)": "04b9f2f0",
							"setCreator(address)": "3f516018",
							"setData(bytes)": "ab62f0e1",
							"setDuration(uint256)": "f6be71d1",
							"setMessage(string)": "368b8772",
							"setMultiSigProposalFactory(address)": "297da9e1",
							"setReferendumProposalFactory(address)": "c138d1a0",
							"setRequiredQuorum(uint256)": "fc19e8ed",
							"setRequiredThreshold(uint256)": "6f206f2c",
							"setStartTimestamp(uint256)": "c44bef75",
							"setTarget(address)": "776d1a01",
							"setTerminal(address)": "bd9f98e1",
							"setVotingERC20(address)": "d92f1c96",
							"snapshot()": "9711715a",
							"snapshotId()": "2ddc79b7",
							"snapshotIdKey()": "efc1b2c3",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab",
							"sufficientQuorum()": "9eace5cd",
							"sufficientThreshold()": "152737b2",
							"support()": "119f8747",
							"supportKey()": "647baea1",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36",
							"terminal()": "f45d0bc6",
							"terminalKey()": "41346f0a",
							"threshold()": "42cde4e8",
							"transferOwnership(address)": "f2fde38b",
							"vote(uint256)": "0121b93f",
							"votingERC20()": "5c098f1a",
							"votingERC20Key()": "d4b927fd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AbstainIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AgainstIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"CaptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"DurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MultiSigProposalFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Passed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ReferendumProposalFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupportIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TerminalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"VotingERC20Set\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abstain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abstainKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"against\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"againstKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredThresholdKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"setCaption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMultiSigProposalFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setReferendumProposalFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"setVotingERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotIdKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sufficientQuorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sufficientThreshold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"support\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"side\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingERC20Key\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AbstainIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"AgainstIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"CaptionSet(string)\":{\"details\":\"Emitted when the caption of a proposal is set.\",\"params\":{\"caption\":\"The new caption for the proposal.\"}},\"CreatorSet(address)\":{\"details\":\"Emitted when the creator of a proposal is set.\",\"params\":{\"creator\":\"The address of the new creator for the proposal.\"}},\"DataSet(address)\":{\"details\":\"Emitted when the data of a proposal is set.\",\"params\":{\"data\":\"The new data for the proposal.\"}},\"DurationSet(uint256)\":{\"details\":\"Emitted when the duration of a proposal is set.\",\"params\":{\"seconds_\":\"The new duration in seconds for the proposal.\"}},\"Executed()\":{\"details\":\"Emitted when a proposal is marked as executed.\"},\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}},\"MessageSet(string)\":{\"details\":\"Emitted when the message of a proposal is set.\",\"params\":{\"message\":\"The new message for the proposal.\"}},\"MultiSigProposalFactorySet(address)\":{\"details\":\"Emitted when the MultiSigProposalFactory address is set.\",\"params\":{\"account\":\"The address of the new MultiSigProposalFactory.\"}},\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}},\"Passed()\":{\"details\":\"Emitted when a proposal is marked as passed.\"},\"ReferendumProposalFactorySet(address)\":{\"details\":\"Emitted when the ReferendumProposalFactory address is set.\",\"params\":{\"account\":\"The address of the new ReferendumProposalFactory.\"}},\"RequiredQuorumSet(uint256)\":{\"details\":\"Emitted when the required quorum of a proposal is set.\",\"params\":{\"bp\":\"The new required quorum as a basis point for the proposal.\"}},\"RequiredThresholdSet(uint256)\":{\"details\":\"Emitted when the required threshold of a proposal is set.\",\"params\":{\"bp\":\"The new required threshold as a basis point for the proposal.\"}},\"SnapshotTaken(uint256)\":{\"details\":\"Emitted when a snapshot is taken for a specific ID.\",\"params\":{\"id\":\"The index or identifier of the snapshot.\"}},\"StartTimestampSet(uint256)\":{\"details\":\"Emitted when the start timestamp of a proposal is set.\",\"params\":{\"timestamp\":\"The new start timestamp for the proposal.\"}},\"SupportIncreased(address,uint256)\":{\"params\":{\"account\":\"The address that has voted.\",\"amount\":\"The amount of votes they have dedicated to this side.\"}},\"TargetSet(address)\":{\"details\":\"Emitted when the target address of a proposal is set.\",\"params\":{\"target\":\"The address of the new target for the proposal.\"}},\"TerminalSet(address)\":{\"details\":\"Emitted when the terminal address is set.\",\"params\":{\"account\":\"The address of the new terminal.\"}},\"VotingERC20Set(address)\":{\"details\":\"Emitted when the Voting ERC20 address is set.\",\"params\":{\"erc20\":\"The address of the new Voting ERC20 contract.\"}}},\"kind\":\"dev\",\"methods\":{\"abstain()\":{\"details\":\"Gets the current abstain votes for a proposal.\",\"returns\":{\"_0\":\"uint256 The current abstain votes value.\"}},\"abstainKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the abstain votes in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the abstain votes.\"}},\"against()\":{\"details\":\"Gets the current against votes for a proposal.\",\"returns\":{\"_0\":\"uint256 The current against votes value.\"}},\"againstKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the against votes in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the against votes.\"}},\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"execute()\":{\"details\":\"Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. Calls terminal low level call and returns result.\"},\"executed()\":{\"details\":\"Checks if the proposal has been executed.\",\"returns\":{\"_0\":\"bool True if the proposal has been executed, false otherwise.\"}},\"executedKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the \\\"executed\\\" status in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the \\\"executed\\\" status.\"}},\"initialize()\":{\"details\":\"Initializes the contract. Should be called only once during deployment.\"},\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"},\"multiSigProposalFactory()\":{\"details\":\"Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the MultiSigProposalFactory.\"}},\"multiSigProposalFactoryKey()\":{\"details\":\"Returns the key used to store the MultiSigProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\"}},\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"passed()\":{\"details\":\"Checks if the proposal has passed.\",\"returns\":{\"_0\":\"bool True if the proposal has passed, false otherwise.\"}},\"passedKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the \\\"passed\\\" status in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the \\\"passed\\\" status.\"}},\"quorum()\":{\"details\":\"Calculates the total quorum by summing up the support, against, and abstain votes.\",\"returns\":{\"_0\":\"uint256 The total quorum.\"}},\"referendumProposalFactory()\":{\"details\":\"Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the ReferendumProposalFactory.\"}},\"referendumProposalFactoryKey()\":{\"details\":\"Returns the key used to store the ReferendumProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"requiredQuorum()\":{\"details\":\"Gets the current required quorum for proposals.\",\"returns\":{\"_0\":\"uint256 The required quorum as a basis point.\"}},\"requiredQuorumKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the required quorum in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the required quorum.\"}},\"requiredQuorumNumber()\":{\"details\":\"Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.\",\"returns\":{\"_0\":\"uint256 The required quorum number.\"}},\"requiredThreshold()\":{\"details\":\"Gets the current required threshold for proposals.\",\"returns\":{\"_0\":\"uint256 The required threshold as a basis point.\"}},\"requiredThresholdKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the required threshold in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the required threshold.\"}},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"setCaption(string)\":{\"details\":\"Sets the caption of the proposal.\",\"params\":{\"caption\":\"The new caption to be set.\"}},\"setCreator(address)\":{\"details\":\"Sets the creator of the proposal.\",\"params\":{\"account\":\"The address of the new creator.\"}},\"setData(bytes)\":{\"details\":\"Sets the data of the proposal.\",\"params\":{\"data\":\"The new data to be set.\"}},\"setDuration(uint256)\":{\"details\":\"Sets the duration of the proposal in seconds.\",\"params\":{\"seconds_\":\"The new duration in seconds.\"}},\"setMessage(string)\":{\"details\":\"Sets the message of the proposal.\",\"params\":{\"message\":\"The new message to be set.\"}},\"setMultiSigProposalFactory(address)\":{\"details\":\"Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.\",\"params\":{\"account\":\"The address of the new MultiSigProposalFactory.\"}},\"setReferendumProposalFactory(address)\":{\"details\":\"Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.\",\"params\":{\"account\":\"The address of the new ReferendumProposalFactory.\"}},\"setRequiredQuorum(uint256)\":{\"details\":\"Sets the required quorum percentage for the proposal.\",\"params\":{\"bp\":\"The new required quorum percentage (basis points).\"}},\"setRequiredThreshold(uint256)\":{\"details\":\"Sets the required threshold percentage for the proposal.\",\"params\":{\"bp\":\"The new required threshold percentage (basis points).\"}},\"setStartTimestamp(uint256)\":{\"details\":\"Sets the start timestamp of the proposal.\",\"params\":{\"timestamp\":\"The new start timestamp.\"}},\"setTarget(address)\":{\"details\":\"Sets the target address of the proposal.\",\"params\":{\"account\":\"The new target address.\"}},\"setVotingERC20(address)\":{\"details\":\"Sets the ERC20 token used for voting in the proposal.\",\"params\":{\"erc20\":\"The address of the ERC20 token contract.\"}},\"snapshot()\":{\"details\":\"Takes a snapshot of the voting ERC20 balances and supply. Only the owner can trigger a snapshot.\"},\"snapshotId()\":{\"details\":\"Gets the current snapshot ID.\",\"returns\":{\"_0\":\"uint256 The current snapshot ID.\"}},\"snapshotIdKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the snapshot ID in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the snapshot ID.\"}},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"},\"sufficientQuorum()\":{\"details\":\"Checks if the current quorum is sufficient, comparing it to the required quorum number.\",\"returns\":{\"_0\":\"bool True if there is sufficient quorum, false otherwise.\"}},\"sufficientThreshold()\":{\"details\":\"Checks if the current threshold is sufficient, comparing it to the required threshold.\",\"returns\":{\"_0\":\"bool True if there is sufficient threshold, false otherwise.\"}},\"support()\":{\"details\":\"Gets the current support for a proposal.\",\"returns\":{\"_0\":\"uint256 The current support value.\"}},\"supportKey()\":{\"details\":\"Returns the keccak256 hash key for accessing the support in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the support.\"}},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"},\"terminal()\":{\"details\":\"Retrieves the address of the terminal associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the terminal.\"}},\"terminalKey()\":{\"details\":\"Returns the key used to store the terminal address.\",\"returns\":{\"_0\":\"bytes32 The key for the terminal in keccak256 hash.\"}},\"threshold()\":{\"details\":\"Calculates the threshold by expressing the support as a percentage of the total quorum.\",\"returns\":{\"_0\":\"uint256 The threshold value.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256)\":{\"details\":\"Casts a vote for the specified side in the proposal.\",\"params\":{\"side\":\"The side to vote for (0: Abstain, 1: Against, 2: Support).\"}},\"votingERC20()\":{\"details\":\"Gets the current address of the Voting ERC20 contract.\",\"returns\":{\"_0\":\"address The address of the Voting ERC20 contract.\"}},\"votingERC20Key()\":{\"details\":\"Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash key for the Voting ERC20 address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol\":\"IReferendumProposalImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]},\"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol\":{\"keccak256\":\"0xae4d7ddaa80ad651a294d0f7e3583d7897045b9593affc277fa35e9e0d99fde0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18faa0aa9db89b64650f505cc4260faf1d8d9edaa1a15b96816c4215460fbf92\",\"dweb:/ipfs/QmPCqZWG8ZrxxtUF2Tqyqj6QtLNQnDHiQ1cWwpvsCQJWof\"]},\"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol\":{\"keccak256\":\"0xe8a033202ad3f4409b78e9ddc3258e20234f52dc55659c69c729bf1ed8710cb5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ceb4b85972c1cf8cd319ed3e059b198fa374734bddf1599c0432f97fffab3a06\",\"dweb:/ipfs/QmVz34rzTuuYCLJgUSn51vdhqDQidgwLPy8FjbfzjV9tat\"]},\"contracts/polygon/interfaces/utils/IAddressBook.sol\":{\"keccak256\":\"0x48949b286894826ceca3e10c392c89b58c9a96e53c5a9f652d23fe6b20808061\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0a130270d281538df250808a43ebb4e5d9bdbc82d94cd79a8a582b7c1803933\",\"dweb:/ipfs/QmdptXfaHwTrL7wgqJMC6Xow4r65Njsyiuo1CmCZ83iXan\"]},\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]},\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]},\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]},\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]},\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"IAddressBook": {
					"abi": [
						{
							"inputs": [],
							"name": "multiSigProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminal",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminalKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multiSigProposalFactory()": {
								"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the MultiSigProposalFactory."
								}
							},
							"multiSigProposalFactoryKey()": {
								"details": "Returns the key used to store the MultiSigProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
								}
							},
							"referendumProposalFactory()": {
								"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the ReferendumProposalFactory."
								}
							},
							"referendumProposalFactoryKey()": {
								"details": "Returns the key used to store the ReferendumProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
								}
							},
							"terminal()": {
								"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the terminal."
								}
							},
							"terminalKey()": {
								"details": "Returns the key used to store the terminal address.",
								"returns": {
									"_0": "bytes32 The key for the terminal in keccak256 hash."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multiSigProposalFactory()": "0065d30d",
							"multiSigProposalFactoryKey()": "d63391c0",
							"referendumProposalFactory()": "2053aa53",
							"referendumProposalFactoryKey()": "dedaace5",
							"terminal()": "f45d0bc6",
							"terminalKey()": "41346f0a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"multiSigProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multiSigProposalFactory()\":{\"details\":\"Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the MultiSigProposalFactory.\"}},\"multiSigProposalFactoryKey()\":{\"details\":\"Returns the key used to store the MultiSigProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\"}},\"referendumProposalFactory()\":{\"details\":\"Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the ReferendumProposalFactory.\"}},\"referendumProposalFactoryKey()\":{\"details\":\"Returns the key used to store the ReferendumProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\"}},\"terminal()\":{\"details\":\"Retrieves the address of the terminal associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the terminal.\"}},\"terminalKey()\":{\"details\":\"Returns the key used to store the terminal address.\",\"returns\":{\"_0\":\"bytes32 The key for the terminal in keccak256 hash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"terminalKey => address multiSigProposalFactoryKey => address referendumProposalFactorykey => address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IAddressBook.sol\":\"IAddressBook\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IAddressBook.sol\":{\"keccak256\":\"0x48949b286894826ceca3e10c392c89b58c9a96e53c5a9f652d23fe6b20808061\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0a130270d281538df250808a43ebb4e5d9bdbc82d94cd79a8a582b7c1803933\",\"dweb:/ipfs/QmdptXfaHwTrL7wgqJMC6Xow4r65Njsyiuo1CmCZ83iXan\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "terminalKey => address multiSigProposalFactoryKey => address referendumProposalFactorykey => address",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"IInitializable": {
					"abi": [
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IInitializable.sol\":\"IInitializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"ILowLevelCall": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":\"ILowLevelCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"IPayload": {
					"abi": [
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"targetKey => address dataKey => bytes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IPayload.sol\":\"IPayload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "targetKey => address dataKey => bytes",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"ITag": {
					"abi": [
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ITag.sol\":\"ITag\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"ITimer": {
					"abi": [
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"counting()": "8554b847",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"secondsLeft()": "86a83735",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ITimer.sol\":\"ITimer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/access-control/IOwnable.sol",
					"exportedSymbols": {
						"IOwnable": [
							32
						]
					},
					"id": 33,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IOwnable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:29:0",
								"text": " ownerKey => address"
							},
							"fullyImplemented": false,
							"id": 32,
							"linearizedBaseContracts": [
								32
							],
							"name": "IOwnable",
							"nameLocation": "97:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "113:180:0",
										"text": " @dev Emitted when ownership of the contract is transferred.\n @param oldOwner The address of the old owner.\n @param newOwner The address of the new owner."
									},
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 9,
									"name": "OwnershipTransferred",
									"nameLocation": "304:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nameLocation": "341:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "325:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "367:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "351:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "351:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:52:0"
									},
									"src": "298:79:0"
								},
								{
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "383:112:0",
										"text": " @dev Returns the key for the owner in the storage mapping.\n @return The key for the owner."
									},
									"functionSelector": "8133f6b1",
									"id": 15,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerkey",
									"nameLocation": "509:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "517:2:0"
									},
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "543:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 12,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "543:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "542:9:0"
									},
									"scope": 32,
									"src": "500:52:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "558:112:0",
										"text": " @dev Returns the current owner of the contract.\n @return The address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 21,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "684:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "689:2:0"
									},
									"returnParameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "715:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:9:0"
									},
									"scope": 32,
									"src": "675:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "730:81:0",
										"text": " @dev Renounces ownership, leaving the contract without an owner."
									},
									"functionSelector": "715018a6",
									"id": 25,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceOwnership",
									"nameLocation": "825:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "842:2:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "853:0:0"
									},
									"scope": 32,
									"src": "816:38:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "860:135:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 31,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferOwnership",
									"nameLocation": "1009:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1035:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "1027:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1026:18:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1053:0:0"
									},
									"scope": 32,
									"src": "1000:54:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 33,
							"src": "87:969:0",
							"usedErrors": []
						}
					],
					"src": "32:1024:0"
				},
				"id": 0
			},
			"contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol",
					"exportedSymbols": {
						"IInitializable": [
							449
						],
						"ILowLevelCall": [
							461
						],
						"IOwnable": [
							32
						],
						"IPayload": [
							489
						],
						"IReferendumProposal": [
							347
						],
						"ITag": [
							528
						],
						"ITimer": [
							585
						]
					},
					"id": 348,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 34,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
							"file": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
							"id": 35,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 462,
							"src": "56:62:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ITag.sol",
							"file": "contracts/polygon/interfaces/utils/ITag.sol",
							"id": 36,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 529,
							"src": "119:53:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ITimer.sol",
							"file": "contracts/polygon/interfaces/utils/ITimer.sol",
							"id": 37,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 586,
							"src": "173:55:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IPayload.sol",
							"file": "contracts/polygon/interfaces/utils/IPayload.sol",
							"id": 38,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 490,
							"src": "229:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/access-control/IOwnable.sol",
							"file": "contracts/polygon/interfaces/access-control/IOwnable.sol",
							"id": 39,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 33,
							"src": "287:66:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IInitializable.sol",
							"file": "contracts/polygon/interfaces/utils/IInitializable.sol",
							"id": 40,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 348,
							"sourceUnit": 450,
							"src": "354:63:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 41,
										"name": "ITag",
										"nameLocations": [
											"457:4:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 528,
										"src": "457:4:1"
									},
									"id": 42,
									"nodeType": "InheritanceSpecifier",
									"src": "457:4:1"
								},
								{
									"baseName": {
										"id": 43,
										"name": "IPayload",
										"nameLocations": [
											"467:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 489,
										"src": "467:8:1"
									},
									"id": 44,
									"nodeType": "InheritanceSpecifier",
									"src": "467:8:1"
								},
								{
									"baseName": {
										"id": 45,
										"name": "ITimer",
										"nameLocations": [
											"481:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 585,
										"src": "481:6:1"
									},
									"id": 46,
									"nodeType": "InheritanceSpecifier",
									"src": "481:6:1"
								},
								{
									"baseName": {
										"id": 47,
										"name": "ILowLevelCall",
										"nameLocations": [
											"493:13:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 461,
										"src": "493:13:1"
									},
									"id": 48,
									"nodeType": "InheritanceSpecifier",
									"src": "493:13:1"
								},
								{
									"baseName": {
										"id": 49,
										"name": "IInitializable",
										"nameLocations": [
											"512:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 449,
										"src": "512:14:1"
									},
									"id": 50,
									"nodeType": "InheritanceSpecifier",
									"src": "512:14:1"
								},
								{
									"baseName": {
										"id": 51,
										"name": "IOwnable",
										"nameLocations": [
											"532:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 32,
										"src": "532:8:1"
									},
									"id": 52,
									"nodeType": "InheritanceSpecifier",
									"src": "532:8:1"
								}
							],
							"canonicalName": "IReferendumProposal",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 347,
							"linearizedBaseContracts": [
								347,
								32,
								449,
								461,
								585,
								489,
								528
							],
							"name": "IReferendumProposal",
							"nameLocation": "429:19:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "548:133:1",
										"text": " @param account The address that has voted.\n @param amount The amount of votes they have dedicated to this side."
									},
									"eventSelector": "da8e2bce8fd493451fdd1339476184fde26e2b59c861fef937d7da5a846f895b",
									"id": 59,
									"name": "SupportIncreased",
									"nameLocation": "692:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "725:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "709:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"indexed": true,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "750:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 59,
												"src": "734:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "734:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:49:1"
									},
									"src": "686:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 60,
										"nodeType": "StructuredDocumentation",
										"src": "764:133:1",
										"text": " @param account The address that has voted.\n @param amount The amount of votes they have dedicated to this side."
									},
									"eventSelector": "a83aa407c0aea80c3a1e1433f5a87c67e906dafe3e78b22d449979ec22847c5b",
									"id": 66,
									"name": "AgainstIncreased",
									"nameLocation": "908:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "941:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "925:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 64,
												"indexed": true,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "966:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "950:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 63,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "950:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:49:1"
									},
									"src": "902:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "980:133:1",
										"text": " @param account The address that has voted.\n @param amount The amount of votes they have dedicated to this side."
									},
									"eventSelector": "c795fd933e199d367001436a8cd6f9d694ce6f65f0e4787f90342007833a1253",
									"id": 73,
									"name": "AbstainIncreased",
									"nameLocation": "1124:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1157:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "1141:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1141:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"indexed": true,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1182:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "1166:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1166:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1140:49:1"
									},
									"src": "1118:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "1196:66:1",
										"text": " @dev Emitted when a proposal is marked as passed."
									},
									"eventSelector": "5aa8a44622c21066164c551945caf713792e9fbee8ce54bb83cb3d5410549dfe",
									"id": 76,
									"name": "Passed",
									"nameLocation": "1273:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1279:2:1"
									},
									"src": "1267:15:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "1288:68:1",
										"text": " @dev Emitted when a proposal is marked as executed."
									},
									"eventSelector": "68f46c45a243a0e9065a97649faf9a5afe1692f2679e650c2f853b9cd734cc0e",
									"id": 79,
									"name": "Executed",
									"nameLocation": "1367:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:2:1"
									},
									"src": "1361:17:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "1384:123:1",
										"text": " @dev Emitted when the caption of a proposal is set.\n @param caption The new caption for the proposal."
									},
									"eventSelector": "7935b61140db6ed0dbbd02b692adfaa25439ab982bd6eea1879ae7be537cbfed",
									"id": 84,
									"name": "CaptionSet",
									"nameLocation": "1518:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"indexed": true,
												"mutability": "mutable",
												"name": "caption",
												"nameLocation": "1544:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "1529:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 81,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1529:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1528:24:1"
									},
									"src": "1512:41:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1559:123:1",
										"text": " @dev Emitted when the message of a proposal is set.\n @param message The new message for the proposal."
									},
									"eventSelector": "3d7f415c35b881f2d0a109b3d9a1377e1e14afec5cc1fd06b563ed160c5e2630",
									"id": 89,
									"name": "MessageSet",
									"nameLocation": "1693:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"indexed": true,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "1719:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "1704:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 86,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1704:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1703:24:1"
									},
									"src": "1687:41:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "1734:138:1",
										"text": " @dev Emitted when the creator of a proposal is set.\n @param creator The address of the new creator for the proposal."
									},
									"eventSelector": "d4396a7e1ee1013c611432f59b862687db5c35b5ae1fd43334ccba88fac8e678",
									"id": 94,
									"name": "CreatorSet",
									"nameLocation": "1883:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"indexed": true,
												"mutability": "mutable",
												"name": "creator",
												"nameLocation": "1910:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1894:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 91,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1894:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1893:25:1"
									},
									"src": "1877:42:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "1925:143:1",
										"text": " @dev Emitted when the target address of a proposal is set.\n @param target The address of the new target for the proposal."
									},
									"eventSelector": "3bfb4bbf112628248058745a3c57e35b13369386e474b8e56c552f3063a4a196",
									"id": 99,
									"name": "TargetSet",
									"nameLocation": "2079:9:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2105:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "2089:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2089:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2088:24:1"
									},
									"src": "2073:40:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 100,
										"nodeType": "StructuredDocumentation",
										"src": "2119:114:1",
										"text": " @dev Emitted when the data of a proposal is set.\n @param data The new data for the proposal."
									},
									"eventSelector": "3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec",
									"id": 104,
									"name": "DataSet",
									"nameLocation": "2244:7:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"indexed": true,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2268:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "2252:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2252:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2251:22:1"
									},
									"src": "2238:36:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "2280:141:1",
										"text": " @dev Emitted when the start timestamp of a proposal is set.\n @param timestamp The new start timestamp for the proposal."
									},
									"eventSelector": "2b9ea1248daf3a58246ca1b3401344f8f1809f146bad26ccc6059cba160ed221",
									"id": 109,
									"name": "StartTimestampSet",
									"nameLocation": "2432:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"indexed": true,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2466:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "2450:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2449:27:1"
									},
									"src": "2426:51:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 110,
										"nodeType": "StructuredDocumentation",
										"src": "2483:137:1",
										"text": " @dev Emitted when the duration of a proposal is set.\n @param seconds_ The new duration in seconds for the proposal."
									},
									"eventSelector": "234a8b70e70d5fc5ace24d19c8c988edfd5dc006d6f8356cab0273e2f084a909",
									"id": 114,
									"name": "DurationSet",
									"nameLocation": "2631:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"indexed": true,
												"mutability": "mutable",
												"name": "seconds_",
												"nameLocation": "2659:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "2643:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2643:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2642:26:1"
									},
									"src": "2625:44:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 115,
										"nodeType": "StructuredDocumentation",
										"src": "2675:151:1",
										"text": " @dev Emitted when the required quorum of a proposal is set.\n @param bp The new required quorum as a basis point for the proposal."
									},
									"eventSelector": "79ba8674a90cd5c280a86c18d9b4fa843c1bc0a11c3afaf2c50df52c0ca0fb06",
									"id": 119,
									"name": "RequiredQuorumSet",
									"nameLocation": "2837:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 117,
												"indexed": true,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "2871:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "2855:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2855:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2854:20:1"
									},
									"src": "2831:44:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "2881:157:1",
										"text": " @dev Emitted when the required threshold of a proposal is set.\n @param bp The new required threshold as a basis point for the proposal."
									},
									"eventSelector": "8c3c72bc6cbbe96b506aec6d1e60128ed7aff893e475f219672f7b5cbeb17f99",
									"id": 124,
									"name": "RequiredThresholdSet",
									"nameLocation": "3049:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"indexed": true,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "3086:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "3070:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:20:1"
									},
									"src": "3043:47:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "3096:130:1",
										"text": " @dev Emitted when a snapshot is taken for a specific ID.\n @param id The index or identifier of the snapshot."
									},
									"eventSelector": "d6d4ba5cdc121c3d1e1d9d83bf92765b05c9c7c4c50c1054df6682ff3dde9386",
									"id": 129,
									"name": "SnapshotTaken",
									"nameLocation": "3237:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3267:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 129,
												"src": "3251:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3251:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3250:20:1"
									},
									"src": "3231:40:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 130,
										"nodeType": "StructuredDocumentation",
										"src": "3277:132:1",
										"text": " @dev Emitted when the Voting ERC20 address is set.\n @param erc20 The address of the new Voting ERC20 contract."
									},
									"eventSelector": "114d15828c0b9d9edda29c2b42efbef9d2c1ed07528e4716bfbb326a30f39a52",
									"id": 134,
									"name": "VotingERC20Set",
									"nameLocation": "3420:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"indexed": true,
												"mutability": "mutable",
												"name": "erc20",
												"nameLocation": "3451:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "3435:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3435:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3434:23:1"
									},
									"src": "3414:44:1"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "3464:168:1",
										"text": " @dev Returns the keccak256 hash key for accessing the required quorum in storage.\n @return bytes32 The keccak256 hash key for the required quorum."
									},
									"functionSelector": "372fdd00",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredQuorumKey",
									"nameLocation": "3646:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3663:2:1"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "3689:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 137,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3689:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3688:9:1"
									},
									"scope": 347,
									"src": "3637:61:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "3704:174:1",
										"text": " @dev Returns the keccak256 hash key for accessing the required threshold in storage.\n @return bytes32 The keccak256 hash key for the required threshold."
									},
									"functionSelector": "b0687ad7",
									"id": 146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredThresholdKey",
									"nameLocation": "3892:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 142,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3912:2:1"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "3938:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3938:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3937:9:1"
									},
									"scope": 347,
									"src": "3883:64:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "3953:160:1",
										"text": " @dev Returns the keccak256 hash key for accessing the snapshot ID in storage.\n @return bytes32 The keccak256 hash key for the snapshot ID."
									},
									"functionSelector": "efc1b2c3",
									"id": 152,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotIdKey",
									"nameLocation": "4127:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4140:2:1"
									},
									"returnParameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 152,
												"src": "4166:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 149,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4166:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4165:9:1"
									},
									"scope": 347,
									"src": "4118:57:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "4181:178:1",
										"text": " @dev Returns the keccak256 hash key for accessing the Voting ERC20 address in storage.\n @return bytes32 The keccak256 hash key for the Voting ERC20 address."
									},
									"functionSelector": "d4b927fd",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "votingERC20Key",
									"nameLocation": "4373:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4387:2:1"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "4413:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 155,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4413:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4412:9:1"
									},
									"scope": 347,
									"src": "4364:58:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "4428:152:1",
										"text": " @dev Returns the keccak256 hash key for accessing the support in storage.\n @return bytes32 The keccak256 hash key for the support."
									},
									"functionSelector": "647baea1",
									"id": 164,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportKey",
									"nameLocation": "4594:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4604:2:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "4630:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 161,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4630:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4629:9:1"
									},
									"scope": 347,
									"src": "4585:54:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "4645:164:1",
										"text": " @dev Returns the keccak256 hash key for accessing the against votes in storage.\n @return bytes32 The keccak256 hash key for the against votes."
									},
									"functionSelector": "689e4d8d",
									"id": 170,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "againstKey",
									"nameLocation": "4823:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4833:2:1"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "4859:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 167,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4859:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4858:9:1"
									},
									"scope": 347,
									"src": "4814:54:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "4874:164:1",
										"text": " @dev Returns the keccak256 hash key for accessing the abstain votes in storage.\n @return bytes32 The keccak256 hash key for the abstain votes."
									},
									"functionSelector": "28f9b0c7",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "abstainKey",
									"nameLocation": "5052:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5062:2:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "5088:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 173,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5088:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5087:9:1"
									},
									"scope": 347,
									"src": "5043:54:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "5103:168:1",
										"text": " @dev Returns the keccak256 hash key for accessing the \"passed\" status in storage.\n @return bytes32 The keccak256 hash key for the \"passed\" status."
									},
									"functionSelector": "becfa6c0",
									"id": 182,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "passedKey",
									"nameLocation": "5285:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5294:2:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 182,
												"src": "5320:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 179,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5320:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5319:9:1"
									},
									"scope": 347,
									"src": "5276:53:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 183,
										"nodeType": "StructuredDocumentation",
										"src": "5335:172:1",
										"text": " @dev Returns the keccak256 hash key for accessing the \"executed\" status in storage.\n @return bytes32 The keccak256 hash key for the \"executed\" status."
									},
									"functionSelector": "7870dfae",
									"id": 188,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executedKey",
									"nameLocation": "5521:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5532:2:1"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "5558:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 185,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5558:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5557:9:1"
									},
									"scope": 347,
									"src": "5512:55:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "5573:129:1",
										"text": " @dev Gets the current required quorum for proposals.\n @return uint256 The required quorum as a basis point."
									},
									"functionSelector": "7036014e",
									"id": 194,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredQuorum",
									"nameLocation": "5716:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5730:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "5756:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5756:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5755:9:1"
									},
									"scope": 347,
									"src": "5707:58:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "5771:135:1",
										"text": " @dev Gets the current required threshold for proposals.\n @return uint256 The required threshold as a basis point."
									},
									"functionSelector": "4af5e37f",
									"id": 200,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredThreshold",
									"nameLocation": "5920:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5937:2:1"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "5963:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5963:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5962:9:1"
									},
									"scope": 347,
									"src": "5911:61:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "5978:98:1",
										"text": " @dev Gets the current snapshot ID.\n @return uint256 The current snapshot ID."
									},
									"functionSelector": "2ddc79b7",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshotId",
									"nameLocation": "6090:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6100:2:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "6126:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6126:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6125:9:1"
									},
									"scope": 347,
									"src": "6081:54:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "6141:140:1",
										"text": " @dev Gets the current address of the Voting ERC20 contract.\n @return address The address of the Voting ERC20 contract."
									},
									"functionSelector": "5c098f1a",
									"id": 212,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "votingERC20",
									"nameLocation": "6295:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6306:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "6332:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6332:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6331:9:1"
									},
									"scope": 347,
									"src": "6286:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "6347:111:1",
										"text": " @dev Gets the current support for a proposal.\n @return uint256 The current support value."
									},
									"functionSelector": "119f8747",
									"id": 218,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "support",
									"nameLocation": "6472:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6479:2:1"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "6505:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6505:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6504:9:1"
									},
									"scope": 347,
									"src": "6463:51:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "6520:123:1",
										"text": " @dev Gets the current against votes for a proposal.\n @return uint256 The current against votes value."
									},
									"functionSelector": "dc50af26",
									"id": 224,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "against",
									"nameLocation": "6657:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6664:2:1"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "6690:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6690:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6689:9:1"
									},
									"scope": 347,
									"src": "6648:51:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "6705:123:1",
										"text": " @dev Gets the current abstain votes for a proposal.\n @return uint256 The current abstain votes value."
									},
									"functionSelector": "5e98e4c7",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "abstain",
									"nameLocation": "6842:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6849:2:1"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "6875:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6875:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6874:9:1"
									},
									"scope": 347,
									"src": "6833:51:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "6890:144:1",
										"text": " @dev Calculates the total quorum by summing up the support, against, and abstain votes.\n @return uint256 The total quorum."
									},
									"functionSelector": "1703a018",
									"id": 236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "quorum",
									"nameLocation": "7048:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7054:2:1"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "7080:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 233,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7080:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7079:9:1"
									},
									"scope": 347,
									"src": "7039:50:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "7095:185:1",
										"text": " @dev Calculates the required quorum number based on the total supply at a snapshot and the required quorum percentage.\n @return uint256 The required quorum number."
									},
									"functionSelector": "beb0a18d",
									"id": 242,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredQuorumNumber",
									"nameLocation": "7294:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7314:2:1"
									},
									"returnParameters": {
										"id": 241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 242,
												"src": "7340:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7340:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7339:9:1"
									},
									"scope": 347,
									"src": "7285:64:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 243,
										"nodeType": "StructuredDocumentation",
										"src": "7355:181:1",
										"text": " @dev Checks if the current quorum is sufficient, comparing it to the required quorum number.\n @return bool True if there is sufficient quorum, false otherwise."
									},
									"functionSelector": "9eace5cd",
									"id": 248,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sufficientQuorum",
									"nameLocation": "7550:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7566:2:1"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "7592:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7592:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7591:6:1"
									},
									"scope": 347,
									"src": "7541:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "7604:152:1",
										"text": " @dev Calculates the threshold by expressing the support as a percentage of the total quorum.\n @return uint256 The threshold value."
									},
									"functionSelector": "42cde4e8",
									"id": 254,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "threshold",
									"nameLocation": "7770:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7779:2:1"
									},
									"returnParameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "7805:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 251,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7805:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7804:9:1"
									},
									"scope": 347,
									"src": "7761:53:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "7820:183:1",
										"text": " @dev Checks if the current threshold is sufficient, comparing it to the required threshold.\n @return bool True if there is sufficient threshold, false otherwise."
									},
									"functionSelector": "152737b2",
									"id": 260,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sufficientThreshold",
									"nameLocation": "8017:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8036:2:1"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 260,
												"src": "8062:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 257,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8062:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8061:6:1"
									},
									"scope": 347,
									"src": "8008:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "8074:125:1",
										"text": " @dev Checks if the proposal has passed.\n @return bool True if the proposal has passed, false otherwise."
									},
									"functionSelector": "a05b5c30",
									"id": 266,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "passed",
									"nameLocation": "8213:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8219:2:1"
									},
									"returnParameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "8245:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 263,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8245:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8244:6:1"
									},
									"scope": 347,
									"src": "8204:47:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "8257:139:1",
										"text": " @dev Checks if the proposal has been executed.\n @return bool True if the proposal has been executed, false otherwise."
									},
									"functionSelector": "31a38c89",
									"id": 272,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executed",
									"nameLocation": "8410:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8418:2:1"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "8444:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 269,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8444:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8443:6:1"
									},
									"scope": 347,
									"src": "8401:49:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "8456:93:1",
										"text": " @dev Initializes the contract. Should be called only once during deployment."
									},
									"functionSelector": "8129fc1c",
									"id": 276,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "8563:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8573:2:1"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8584:0:1"
									},
									"scope": 347,
									"src": "8554:31:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "8591:103:1",
										"text": " @dev Sets the caption of the proposal.\n @param caption The new caption to be set."
									},
									"functionSelector": "04b9f2f0",
									"id": 282,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCaption",
									"nameLocation": "8708:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "caption",
												"nameLocation": "8733:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 282,
												"src": "8719:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 278,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8719:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8718:23:1"
									},
									"returnParameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8750:0:1"
									},
									"scope": 347,
									"src": "8699:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 283,
										"nodeType": "StructuredDocumentation",
										"src": "8757:103:1",
										"text": " @dev Sets the message of the proposal.\n @param message The new message to be set."
									},
									"functionSelector": "368b8772",
									"id": 288,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setMessage",
									"nameLocation": "8874:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "8899:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "8885:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 284,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8885:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8884:23:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8916:0:1"
									},
									"scope": 347,
									"src": "8865:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "8923:108:1",
										"text": " @dev Sets the creator of the proposal.\n @param account The address of the new creator."
									},
									"functionSelector": "3f516018",
									"id": 294,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCreator",
									"nameLocation": "9045:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9064:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 294,
												"src": "9056:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9056:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9055:17:1"
									},
									"returnParameters": {
										"id": 293,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9081:0:1"
									},
									"scope": 347,
									"src": "9036:46:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 295,
										"nodeType": "StructuredDocumentation",
										"src": "9088:107:1",
										"text": " @dev Sets the target address of the proposal.\n @param account The new target address."
									},
									"functionSelector": "776d1a01",
									"id": 300,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTarget",
									"nameLocation": "9209:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9227:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "9219:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 296,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9219:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9218:17:1"
									},
									"returnParameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9244:0:1"
									},
									"scope": 347,
									"src": "9200:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "9251:94:1",
										"text": " @dev Sets the data of the proposal.\n @param data The new data to be set."
									},
									"functionSelector": "ab62f0e1",
									"id": 306,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setData",
									"nameLocation": "9359:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9380:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "9367:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 302,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9367:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9366:19:1"
									},
									"returnParameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9394:0:1"
									},
									"scope": 347,
									"src": "9350:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "9401:111:1",
										"text": " @dev Sets the start timestamp of the proposal.\n @param timestamp The new start timestamp."
									},
									"functionSelector": "c44bef75",
									"id": 312,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setStartTimestamp",
									"nameLocation": "9526:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "9552:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 312,
												"src": "9544:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9544:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9543:19:1"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9571:0:1"
									},
									"scope": 347,
									"src": "9517:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 313,
										"nodeType": "StructuredDocumentation",
										"src": "9578:118:1",
										"text": " @dev Sets the duration of the proposal in seconds.\n @param seconds_ The new duration in seconds."
									},
									"functionSelector": "f6be71d1",
									"id": 318,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDuration",
									"nameLocation": "9710:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 315,
												"mutability": "mutable",
												"name": "seconds_",
												"nameLocation": "9730:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 318,
												"src": "9722:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9722:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9721:18:1"
									},
									"returnParameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9748:0:1"
									},
									"scope": 347,
									"src": "9701:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 319,
										"nodeType": "StructuredDocumentation",
										"src": "9755:142:1",
										"text": " @dev Sets the required quorum percentage for the proposal.\n @param bp The new required quorum percentage (basis points)."
									},
									"functionSelector": "fc19e8ed",
									"id": 324,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRequiredQuorum",
									"nameLocation": "9911:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "9937:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 324,
												"src": "9929:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9929:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9928:12:1"
									},
									"returnParameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9949:0:1"
									},
									"scope": 347,
									"src": "9902:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 325,
										"nodeType": "StructuredDocumentation",
										"src": "9956:148:1",
										"text": " @dev Sets the required threshold percentage for the proposal.\n @param bp The new required threshold percentage (basis points)."
									},
									"functionSelector": "6f206f2c",
									"id": 330,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRequiredThreshold",
									"nameLocation": "10118:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "10147:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "10139:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10139:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10138:12:1"
									},
									"returnParameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10159:0:1"
									},
									"scope": 347,
									"src": "10109:51:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 331,
										"nodeType": "StructuredDocumentation",
										"src": "10166:124:1",
										"text": " @dev Takes a snapshot of the voting ERC20 balances and supply.\n Only the owner can trigger a snapshot."
									},
									"functionSelector": "9711715a",
									"id": 334,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "snapshot",
									"nameLocation": "10304:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10312:2:1"
									},
									"returnParameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10323:0:1"
									},
									"scope": 347,
									"src": "10295:29:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "10330:135:1",
										"text": " @dev Sets the ERC20 token used for voting in the proposal.\n @param erc20 The address of the ERC20 token contract."
									},
									"functionSelector": "d92f1c96",
									"id": 340,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setVotingERC20",
									"nameLocation": "10479:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "erc20",
												"nameLocation": "10502:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 340,
												"src": "10494:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10494:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10493:15:1"
									},
									"returnParameters": {
										"id": 339,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10517:0:1"
									},
									"scope": 347,
									"src": "10470:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "10524:151:1",
										"text": " @dev Casts a vote for the specified side in the proposal.\n @param side The side to vote for (0: Abstain, 1: Against, 2: Support)."
									},
									"functionSelector": "0121b93f",
									"id": 346,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "vote",
									"nameLocation": "10689:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 343,
												"mutability": "mutable",
												"name": "side",
												"nameLocation": "10702:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "10694:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 342,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10694:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10693:14:1"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10716:0:1"
									},
									"scope": 347,
									"src": "10680:37:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 348,
							"src": "419:10300:1",
							"usedErrors": []
						}
					],
					"src": "32:10687:1"
				},
				"id": 1
			},
			"contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/main/proposal/IReferendumProposalImplementation.sol",
					"exportedSymbols": {
						"IAddressBook": [
							434
						],
						"IInitializable": [
							449
						],
						"ILowLevelCall": [
							461
						],
						"IOwnable": [
							32
						],
						"IPayload": [
							489
						],
						"IReferendumProposal": [
							347
						],
						"IReferendumProposalImplementation": [
							394
						],
						"ITag": [
							528
						],
						"ITimer": [
							585
						]
					},
					"id": 395,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 349,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:2"
						},
						{
							"absolutePath": "contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol",
							"file": "contracts/polygon/interfaces/governance/proposal/IReferendumProposal.sol",
							"id": 350,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 348,
							"src": "56:82:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IAddressBook.sol",
							"file": "contracts/polygon/interfaces/utils/IAddressBook.sol",
							"id": 351,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 395,
							"sourceUnit": 435,
							"src": "139:61:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 352,
										"name": "IReferendumProposal",
										"nameLocations": [
											"249:19:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 347,
										"src": "249:19:2"
									},
									"id": 353,
									"nodeType": "InheritanceSpecifier",
									"src": "249:19:2"
								},
								{
									"baseName": {
										"id": 354,
										"name": "IAddressBook",
										"nameLocations": [
											"270:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 434,
										"src": "270:12:2"
									},
									"id": 355,
									"nodeType": "InheritanceSpecifier",
									"src": "270:12:2"
								}
							],
							"canonicalName": "IReferendumProposalImplementation",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 394,
							"linearizedBaseContracts": [
								394,
								434,
								347,
								32,
								449,
								461,
								585,
								489,
								528
							],
							"name": "IReferendumProposalImplementation",
							"nameLocation": "212:33:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "290:117:2",
										"text": " @dev Emitted when the terminal address is set.\n @param account The address of the new terminal."
									},
									"eventSelector": "da041d56f89460d53852e1b9f9576dc62eb726bde1008706dd87cdfe647a6973",
									"id": 360,
									"name": "TerminalSet",
									"nameLocation": "418:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "446:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 360,
												"src": "430:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 357,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "430:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "429:25:2"
									},
									"src": "412:43:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "461:147:2",
										"text": " @dev Emitted when the MultiSigProposalFactory address is set.\n @param account The address of the new MultiSigProposalFactory."
									},
									"eventSelector": "d09c0624caca0531ea4b7bd26613634cf337f4065ef6aff84501cbc8182c5355",
									"id": 365,
									"name": "MultiSigProposalFactorySet",
									"nameLocation": "619:26:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "662:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 365,
												"src": "646:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "646:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:25:2"
									},
									"src": "613:58:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "677:151:2",
										"text": " @dev Emitted when the ReferendumProposalFactory address is set.\n @param account The address of the new ReferendumProposalFactory."
									},
									"eventSelector": "35c343c1b11e5cc8ae3b77869ed9a3d1c4191286edcfa2ad41e689ab012eadc1",
									"id": 370,
									"name": "ReferendumProposalFactorySet",
									"nameLocation": "839:28:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "884:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "868:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "868:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "867:25:2"
									},
									"src": "833:60:2"
								},
								{
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "899:248:2",
										"text": " @dev Executes the MultiSigProposal and triggers additional actions.\n Calls the internal _execute function to mark the proposal as executed.\n Emits an Executed event.\n Calls terminal low level call and returns result."
									},
									"functionSelector": "61461954",
									"id": 376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "1161:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1168:2:2"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "1189:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 373,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1189:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1188:14:2"
									},
									"scope": 394,
									"src": "1152:51:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "bd9f98e1",
									"id": 381,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTerminal",
									"nameLocation": "1218:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1238:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "1230:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1230:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1229:17:2"
									},
									"returnParameters": {
										"id": 380,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1255:0:2"
									},
									"scope": 394,
									"src": "1209:47:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "1262:239:2",
										"text": " @dev Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n Only the owner is allowed to perform this action.\n @param account The address of the new MultiSigProposalFactory."
									},
									"functionSelector": "297da9e1",
									"id": 387,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setMultiSigProposalFactory",
									"nameLocation": "1515:26:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1550:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "1542:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1541:17:2"
									},
									"returnParameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1567:0:2"
									},
									"scope": 394,
									"src": "1506:62:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "1574:243:2",
										"text": " @dev Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n Only the owner is allowed to perform this action.\n @param account The address of the new ReferendumProposalFactory."
									},
									"functionSelector": "c138d1a0",
									"id": 393,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setReferendumProposalFactory",
									"nameLocation": "1831:28:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1868:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 393,
												"src": "1860:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1860:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1859:17:2"
									},
									"returnParameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:2"
									},
									"scope": 394,
									"src": "1822:64:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 395,
							"src": "202:1686:2",
							"usedErrors": []
						}
					],
					"src": "32:1856:2"
				},
				"id": 2
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IAddressBook.sol",
					"exportedSymbols": {
						"IAddressBook": [
							434
						]
					},
					"id": 435,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 396,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAddressBook",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 397,
								"nodeType": "StructuredDocumentation",
								"src": "57:114:3",
								"text": " terminalKey => address\n multiSigProposalFactoryKey => address\n referendumProposalFactorykey => address"
							},
							"fullyImplemented": false,
							"id": 434,
							"linearizedBaseContracts": [
								434
							],
							"name": "IAddressBook",
							"nameLocation": "182:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "202:139:3",
										"text": " @dev Returns the key used to store the terminal address.\n @return bytes32 The key for the terminal in keccak256 hash."
									},
									"functionSelector": "41346f0a",
									"id": 403,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminalKey",
									"nameLocation": "355:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "366:2:3"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "392:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "392:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "391:9:3"
									},
									"scope": 434,
									"src": "346:55:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "407:169:3",
										"text": " @dev Returns the key used to store the MultiSigProposalFactory address.\n @return bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
									},
									"functionSelector": "d63391c0",
									"id": 409,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multiSigProposalFactoryKey",
									"nameLocation": "590:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "616:2:3"
									},
									"returnParameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "642:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 406,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:9:3"
									},
									"scope": 434,
									"src": "581:70:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "657:173:3",
										"text": " @dev Returns the key used to store the ReferendumProposalFactory address.\n @return bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
									},
									"functionSelector": "dedaace5",
									"id": 415,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "referendumProposalFactoryKey",
									"nameLocation": "844:28:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "872:2:3"
									},
									"returnParameters": {
										"id": 414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "898:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "897:9:3"
									},
									"scope": 434,
									"src": "835:72:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 416,
										"nodeType": "StructuredDocumentation",
										"src": "913:155:3",
										"text": " @dev Retrieves the address of the terminal associated with the MultiSigProposalFactory.\n @return address The address of the terminal."
									},
									"functionSelector": "f45d0bc6",
									"id": 421,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminal",
									"nameLocation": "1082:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1090:2:3"
									},
									"returnParameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 421,
												"src": "1116:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 418,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1116:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1115:9:3"
									},
									"scope": 434,
									"src": "1073:52:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "1131:185:3",
										"text": " @dev Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n @return address The address of the MultiSigProposalFactory."
									},
									"functionSelector": "0065d30d",
									"id": 427,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multiSigProposalFactory",
									"nameLocation": "1330:23:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1353:2:3"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "1379:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1378:9:3"
									},
									"scope": 434,
									"src": "1321:67:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "1394:189:3",
										"text": " @dev Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n @return address The address of the ReferendumProposalFactory."
									},
									"functionSelector": "2053aa53",
									"id": 433,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "referendumProposalFactory",
									"nameLocation": "1597:25:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1622:2:3"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1648:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1648:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1647:9:3"
									},
									"scope": 434,
									"src": "1588:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 435,
							"src": "172:1487:3",
							"usedErrors": []
						}
					],
					"src": "32:1627:3"
				},
				"id": 3
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IInitializable.sol",
					"exportedSymbols": {
						"IInitializable": [
							449
						]
					},
					"id": 450,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 436,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInitializable",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 449,
							"linearizedBaseContracts": [
								449
							],
							"name": "IInitializable",
							"nameLocation": "67:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "89:88:4",
										"text": " @dev Returns the key for checking if the contract has been initialized."
									},
									"functionSelector": "6676e926",
									"id": 442,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializedKey",
									"nameLocation": "191:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "205:2:4"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "231:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 439,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "231:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "230:9:4"
									},
									"scope": 449,
									"src": "182:58:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 443,
										"nodeType": "StructuredDocumentation",
										"src": "246:66:4",
										"text": " @dev Checks if the contract has been initialized."
									},
									"functionSelector": "158ef93e",
									"id": 448,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialized",
									"nameLocation": "326:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:4"
									},
									"returnParameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 448,
												"src": "363:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 445,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "363:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:6:4"
									},
									"scope": 449,
									"src": "317:52:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 450,
							"src": "57:314:4",
							"usedErrors": []
						}
					],
					"src": "32:339:4"
				},
				"id": 4
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
					"exportedSymbols": {
						"ILowLevelCall": [
							461
						]
					},
					"id": 462,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 451,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ILowLevelCall",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 461,
							"linearizedBaseContracts": [
								461
							],
							"name": "ILowLevelCall",
							"nameLocation": "67:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "88:222:5",
										"text": " @dev Emitted when a low-level call is executed.\n @param target The target address of the call.\n @param data The data passed to the call.\n @param response The response received from the call."
									},
									"eventSelector": "2bbbbbf24d2d80cec39de7a4633cf4c5e30a805731376b32927d93fd29cec143",
									"id": 460,
									"name": "LowLevelCall",
									"nameLocation": "321:12:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"indexed": true,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "350:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "334:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"indexed": true,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "372:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "358:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 455,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "358:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"indexed": true,
												"mutability": "mutable",
												"name": "response",
												"nameLocation": "392:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 460,
												"src": "378:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 457,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "378:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "333:68:5"
									},
									"src": "315:87:5"
								}
							],
							"scope": 462,
							"src": "57:347:5",
							"usedErrors": []
						}
					],
					"src": "32:372:5"
				},
				"id": 5
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IPayload.sol",
					"exportedSymbols": {
						"IPayload": [
							489
						]
					},
					"id": 490,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 463,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPayload",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 464,
								"nodeType": "StructuredDocumentation",
								"src": "57:49:6",
								"text": " targetKey => address\n dataKey => bytes"
							},
							"fullyImplemented": false,
							"id": 489,
							"linearizedBaseContracts": [
								489
							],
							"name": "IPayload",
							"nameLocation": "117:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 465,
										"nodeType": "StructuredDocumentation",
										"src": "133:69:6",
										"text": " @dev Returns the key for storing the target address."
									},
									"functionSelector": "a73e8e36",
									"id": 470,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "targetKey",
									"nameLocation": "216:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "225:2:6"
									},
									"returnParameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "251:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 467,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "251:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "250:9:6"
									},
									"scope": 489,
									"src": "207:53:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 471,
										"nodeType": "StructuredDocumentation",
										"src": "266:59:6",
										"text": " @dev Returns the key for storing the data."
									},
									"functionSelector": "b859dd3e",
									"id": 476,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "dataKey",
									"nameLocation": "339:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:2:6"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 476,
												"src": "372:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 473,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:9:6"
									},
									"scope": 489,
									"src": "330:51:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 477,
										"nodeType": "StructuredDocumentation",
										"src": "387:57:6",
										"text": " @dev Returns the current target address."
									},
									"functionSelector": "d4b83992",
									"id": 482,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "target",
									"nameLocation": "458:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "464:2:6"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "490:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "490:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:9:6"
									},
									"scope": 489,
									"src": "449:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "505:53:6",
										"text": " @dev Returns the current data bytes."
									},
									"functionSelector": "73d4a13a",
									"id": 488,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "data",
									"nameLocation": "572:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "576:2:6"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "602:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 485,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "602:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "601:14:6"
									},
									"scope": 489,
									"src": "563:53:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 490,
							"src": "107:511:6",
							"usedErrors": []
						}
					],
					"src": "32:586:6"
				},
				"id": 6
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ITag.sol",
					"exportedSymbols": {
						"ITag": [
							528
						]
					},
					"id": 529,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 491,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITag",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 528,
							"linearizedBaseContracts": [
								528
							],
							"name": "ITag",
							"nameLocation": "67:4:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "79:73:7",
										"text": " @dev Returns the key for storing the caption in storage."
									},
									"functionSelector": "476221fe",
									"id": 497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "captionKey",
									"nameLocation": "166:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "176:2:7"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 497,
												"src": "202:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 494,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "202:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "201:9:7"
									},
									"scope": 528,
									"src": "157:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 498,
										"nodeType": "StructuredDocumentation",
										"src": "217:73:7",
										"text": " @dev Returns the key for storing the message in storage."
									},
									"functionSelector": "58221c6b",
									"id": 503,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "messageKey",
									"nameLocation": "304:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "314:2:7"
									},
									"returnParameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 503,
												"src": "340:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 500,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "340:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "339:9:7"
									},
									"scope": 528,
									"src": "295:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "355:73:7",
										"text": " @dev Returns the key for storing the creator in storage."
									},
									"functionSelector": "5d32eeb5",
									"id": 509,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "creatorKey",
									"nameLocation": "442:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "452:2:7"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 509,
												"src": "478:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 506,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "477:9:7"
									},
									"scope": 528,
									"src": "433:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 510,
										"nodeType": "StructuredDocumentation",
										"src": "493:71:7",
										"text": " @dev Returns the caption associated with the proposal."
									},
									"functionSelector": "39540e5e",
									"id": 515,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "caption",
									"nameLocation": "578:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "585:2:7"
									},
									"returnParameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 515,
												"src": "611:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 512,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "611:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "610:15:7"
									},
									"scope": 528,
									"src": "569:57:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 516,
										"nodeType": "StructuredDocumentation",
										"src": "632:71:7",
										"text": " @dev Returns the message associated with the proposal."
									},
									"functionSelector": "e21f37ce",
									"id": 521,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "message",
									"nameLocation": "717:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:2:7"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 521,
												"src": "750:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "750:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "749:15:7"
									},
									"scope": 528,
									"src": "708:57:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 522,
										"nodeType": "StructuredDocumentation",
										"src": "771:73:7",
										"text": " @dev Returns the address of the creator of the proposal."
									},
									"functionSelector": "02d05d3f",
									"id": 527,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "creator",
									"nameLocation": "858:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:2:7"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "891:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 524,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:9:7"
									},
									"scope": 528,
									"src": "849:51:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 529,
							"src": "57:845:7",
							"usedErrors": []
						}
					],
					"src": "32:870:7"
				},
				"id": 7
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ITimer.sol",
					"exportedSymbols": {
						"ITimer": [
							585
						]
					},
					"id": 586,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 530,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITimer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 585,
							"linearizedBaseContracts": [
								585
							],
							"name": "ITimer",
							"nameLocation": "67:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "81:62:8",
										"text": " @dev Returns the key for the start timestamp."
									},
									"functionSelector": "6c6169bd",
									"id": 536,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "startTimestampKey",
									"nameLocation": "157:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "174:2:8"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "200:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 533,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "200:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "199:9:8"
									},
									"scope": 585,
									"src": "148:61:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 537,
										"nodeType": "StructuredDocumentation",
										"src": "215:55:8",
										"text": " @dev Returns the key for the duration."
									},
									"functionSelector": "902b29ed",
									"id": 542,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "durationKey",
									"nameLocation": "284:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "295:2:8"
									},
									"returnParameters": {
										"id": 541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "321:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 539,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "321:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "320:9:8"
									},
									"scope": 585,
									"src": "275:55:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "336:50:8",
										"text": " @dev Returns the start timestamp."
									},
									"functionSelector": "e6fd48bc",
									"id": 548,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "startTimestamp",
									"nameLocation": "400:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "414:2:8"
									},
									"returnParameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "440:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "439:9:8"
									},
									"scope": 585,
									"src": "391:58:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "455:48:8",
										"text": " @dev Returns the end timestamp."
									},
									"functionSelector": "a85adeab",
									"id": 554,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "endTimestamp",
									"nameLocation": "517:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "529:2:8"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 552,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "555:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 551,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:9:8"
									},
									"scope": 585,
									"src": "508:56:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "570:43:8",
										"text": " @dev Returns the duration."
									},
									"functionSelector": "0fb5a6b4",
									"id": 560,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "duration",
									"nameLocation": "627:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:8"
									},
									"returnParameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 560,
												"src": "661:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:8"
									},
									"scope": 585,
									"src": "618:52:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 561,
										"nodeType": "StructuredDocumentation",
										"src": "676:54:8",
										"text": " @dev Checks if the timer has started."
									},
									"functionSelector": "1f2698ab",
									"id": 566,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "started",
									"nameLocation": "744:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "751:2:8"
									},
									"returnParameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 566,
												"src": "777:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 563,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "777:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:6:8"
									},
									"scope": 585,
									"src": "735:48:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 567,
										"nodeType": "StructuredDocumentation",
										"src": "789:52:8",
										"text": " @dev Checks if the timer has ended."
									},
									"functionSelector": "12fa6feb",
									"id": 572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ended",
									"nameLocation": "855:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "860:2:8"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "886:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 569,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "886:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:6:8"
									},
									"scope": 585,
									"src": "846:46:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "898:63:8",
										"text": " @dev Checks if the timer is actively counting."
									},
									"functionSelector": "8554b847",
									"id": 578,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "counting",
									"nameLocation": "975:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:2:8"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "1009:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 575,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1009:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1008:6:8"
									},
									"scope": 585,
									"src": "966:49:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "1021:68:8",
										"text": " @dev Calculates the remaining seconds in the timer."
									},
									"functionSelector": "86a83735",
									"id": 584,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "secondsLeft",
									"nameLocation": "1103:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1114:2:8"
									},
									"returnParameters": {
										"id": 583,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1140:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 581,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1140:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1139:9:8"
									},
									"scope": 585,
									"src": "1094:55:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 586,
							"src": "57:1094:8",
							"usedErrors": []
						}
					],
					"src": "32:1119:8"
				},
				"id": 8
			}
		}
	}
}