{
	"id": "99ffe8e8e7b206d050d9fae4936cea2b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol\";\nimport \"contracts/polygon/interfaces/utils/IAddressBook.sol\";\n\ninterface IMultiSigProposalImplementation is IMultiSigProposal, IAddressBook {\n    \n    /**\n    * @dev Emitted when the terminal address is set.\n    * @param account The address of the new terminal.\n    */\n    event TerminalSet(address indexed account);\n\n    /**\n    * @dev Emitted when the MultiSigProposalFactory address is set.\n    * @param account The address of the new MultiSigProposalFactory.\n    */\n    event MultiSigProposalFactorySet(address indexed account);\n\n    /**\n    * @dev Emitted when the ReferendumProposalFactory address is set.\n    * @param account The address of the new ReferendumProposalFactory.\n    */\n    event ReferendumProposalFactorySet(address indexed account);\n\n    /**\n    * @dev Executes the MultiSigProposal and triggers additional actions.\n    * Calls the internal _execute function to mark the proposal as executed.\n    * Emits an Executed event.\n    * TODO: Create another referendum proposal using the ReferendumProposalFactory.\n    */\n    function execute() external returns (address);\n\n    /**\n    * @dev Sets the address of the terminal associated with the MultiSigProposalFactory.\n    * Only the owner is allowed to perform this action.\n    * @param account The address of the new terminal.\n    */\n    function setTerminal(address account) external;\n\n    /**\n    * @dev Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n    * Only the owner is allowed to perform this action.\n    * @param account The address of the new MultiSigProposalFactory.\n    */\n    function setMultiSigProposalFactory(address account) external;\n\n    /**\n    * @dev Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n    * Only the owner is allowed to perform this action.\n    * @param account The address of the new ReferendumProposalFactory.\n    */\n    function setReferendumProposalFactory(address account) external;\n}"
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* terminalKey => address\n* multiSigProposalFactoryKey => address\n* referendumProposalFactorykey => address\n */\ninterface IAddressBook {\n\n    /**\n    * @dev Returns the key used to store the terminal address.\n    * @return bytes32 The key for the terminal in keccak256 hash.\n    */\n    function terminalKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key used to store the MultiSigProposalFactory address.\n    * @return bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\n    */\n    function multiSigProposalFactoryKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key used to store the ReferendumProposalFactory address.\n    * @return bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\n    */\n    function referendumProposalFactoryKey() external pure returns (bytes32);\n\n    /**\n    * @dev Retrieves the address of the terminal associated with the MultiSigProposalFactory.\n    * @return address The address of the terminal.\n    */\n    function terminal() external view returns (address);\n\n    /**\n    * @dev Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n    * @return address The address of the MultiSigProposalFactory.\n    */\n    function multiSigProposalFactory() external view returns (address);\n\n    /**\n    * @dev Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n    * @return address The address of the ReferendumProposalFactory.\n    */\n    function referendumProposalFactory() external view returns (address);\n}"
			},
			"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"contracts/polygon/interfaces/utils/ITag.sol\";\nimport \"contracts/polygon/interfaces/utils/IPayload.sol\";\nimport \"contracts/polygon/interfaces/utils/ITimer.sol\";\nimport \"contracts/polygon/interfaces/utils/ILowLevelCall.sol\";\nimport \"contracts/polygon/interfaces/utils/IInitializable.sol\";\nimport \"contracts/polygon/interfaces/access-control/IOwnable.sol\";\n\ninterface IMultiSigProposal is\n    ITag,\n    IPayload,\n    ITimer,\n    ILowLevelCall,\n    IInitializable,\n    IOwnable {\n\n    /**\n    * @dev Emitted when a new signer is added.\n    * @param signer The address of the added signer. Indexed for efficient log filtering.\n    */\n    event SignerAdded(address indexed signer);\n\n    /**\n    * @dev Emitted when a signing action occurs.\n    * @param signer The address of the signer. Indexed for efficient log filtering.\n    */\n    event Signed(address indexed signer);\n\n    /**\n    * @dev Emitted when a condition or step is successfully passed.\n    * This event signifies the successful completion of a specific action or checkpoint.\n    */\n    event Passed();\n\n    /**\n    * @dev Emitted when an execution or operation is successfully completed.\n    * This event signals the successful execution of a particular functionality or task.\n    */\n    event Executed();\n\n    /**\n    * @dev Emitted when a caption is set.\n    * @param caption The string representing the new caption. Indexed for efficient log filtering.\n    */\n    event CaptionSet(string indexed caption);\n\n    /**\n    * @dev Emitted when a message is set.\n    * @param message The string representing the new message. Indexed for efficient log filtering.\n    */\n    event MessageSet(string indexed message);\n\n    /**\n    * @dev Emitted when the creator address is set.\n    * @param creator The address of the newly set creator. Indexed for efficient log filtering.\n    */\n    event CreatorSet(address indexed creator);\n\n    /**\n    * @dev Emitted when the target address is set.\n    * @param target The address of the newly set target. Indexed for efficient log filtering.\n    */\n    event TargetSet(address indexed target);\n\n    /**\n    * @dev Emitted when a data address is set.\n    * @param data The address of the newly set data. Indexed for efficient log filtering.\n    */\n    event DataSet(address indexed data);\n\n    /**\n    * @dev Emitted when the start timestamp is set.\n    * @param timestamp The uint256 representing the newly set start timestamp. Indexed for efficient log filtering.\n    */\n    event StartTimestampSet(uint256 indexed timestamp);\n\n    /**\n    * @dev Emitted when the duration in seconds is set.\n    * @param seconds_ The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering.\n    */\n    event DurationSet(uint256 indexed seconds_);\n\n    /**\n    * @dev Emitted when the required quorum is set.\n    * @param bp The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering.\n    */\n    event RequiredQuorumSet(uint256 indexed bp);\n\n    /**\n    * @dev Returns the keccak256 hash of the string \"REQUIRED_QUORUM\".\n    * This function is used to generate a unique key for accessing the required quorum value.\n    * @return bytes32 The keccak256 hash of \"REQUIRED_QUORUM\".\n    */\n    function requiredQuorumKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash of the string \"SIGNERS\".\n    * This function is used to generate a unique key for managing a set of signers.\n    * @return bytes32 The keccak256 hash of \"SIGNERS\".\n    */\n    function signersKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash of the string \"SIGNATURES\".\n    * This function is used to generate a unique key for storing signatures related to a process or action.\n    * @return bytes32 The keccak256 hash of \"SIGNATURES\".\n    */\n    function signaturesKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash of the string \"PASSED\".\n    * This function is used to generate a unique key for tracking the completion status of a specific action or step.\n    * @return bytes32 The keccak256 hash of \"PASSED\".\n    */\n    function passedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the keccak256 hash of the string \"EXECUTED\".\n    * This function is used to generate a unique key for tracking the execution status of a specific operation or task.\n    * @return bytes32 The keccak256 hash of \"EXECUTED\".\n    */\n    function executedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Retrieves the required quorum value from storage.\n    * @return uint256 The current required quorum value.\n    */\n    function requiredQuorum() external view returns (uint256);\n\n    /**\n    * @dev Calculates the required number of signatures based on the quorum and the number of signers.\n    * @return uint256 The current required number of signatures for a successful action.\n    */\n    function requiredSignaturesLength() external view returns (uint256);\n\n    /**\n    * @dev Checks whether the number of collected signatures meets or exceeds the required threshold.\n    * @return bool True if there are sufficient signatures, otherwise false.\n    */\n    function hasSufficientSignatures() external view returns (bool);\n\n    /**\n    * @dev Retrieves the address of a signer based on their unique identifier.\n    * @param signerId The identifier of the signer.\n    * @return address The address of the specified signer.\n    */\n    function signers(uint256 signerId) external view returns (address);\n\n    /**\n    * @dev Retrieves the total number of signers currently registered.\n    * @return uint256 The current length of the signers set.\n    */\n    function signersLength() external view returns (uint256);\n\n    /**\n    * @dev Checks if an address is a registered signer.\n    * @param account The address to check.\n    * @return bool True if the address is a signer, otherwise false.\n    */\n    function isSigner(address account) external view returns (bool);\n\n    /**\n    * @dev Retrieves the address of a signature based on its unique identifier.\n    * @param signatureId The identifier of the signature.\n    * @return address The address of the specified signature.\n    */\n    function signatures(uint256 signatureId) external view returns (address);\n\n    /**\n    * @dev Retrieves the total number of signatures collected.\n    * @return uint256 The current length of the signatures set.\n    */\n    function signaturesLength() external view returns (uint256);\n\n    /**\n    * @dev Checks if an address has already provided a signature.\n    * @param account The address to check.\n    * @return bool True if the address has signed, otherwise false.\n    */\n    function hasSigned(address account) external view returns (bool);\n\n    /**\n    * @dev Checks if a specific action or step has been successfully passed.\n    * @return bool True if the action or step has passed, otherwise false.\n    */\n    function passed() external view returns (bool);\n\n    /**\n    * @dev Checks if a specific operation or task has been successfully executed.\n    * @return bool True if the operation or task has been executed, otherwise false.\n    */\n    function executed() external view returns (bool);\n\n    /**\n    * @dev Initializes the contract, setting up any initial configurations or values.\n    * This function is typically called once, often during deployment.\n    */\n    function initialize() external;\n\n    /**\n    * @dev Sets a new caption for the contract.\n    * Only the owner has the privilege to update the caption.\n    * @param caption The new caption to be set.\n    */\n    function setCaption(string memory caption) external;\n\n    /**\n    * @dev Sets a new message for the contract.\n    * Only the owner has the privilege to update the message.\n    * @param message The new message to be set.\n    */\n    function setMessage(string memory message) external;\n\n    /**\n    * @dev Sets a new creator for the contract.\n    * Only the owner has the privilege to update the creator address.\n    * @param account The new creator address to be set.\n    */\n    function setCreator(address account) external;\n\n    /**\n    * @dev Sets a new target address for the contract.\n    * Only the owner has the privilege to update the target address.\n    * @param account The new target address to be set.\n    */\n    function setTarget(address account) external;\n\n    /**\n    * @dev Sets new data for the contract.\n    * Only the owner has the privilege to update the data.\n    * @param data The new data to be set.\n    */\n    function setData(bytes memory data) external;\n\n    /**\n    * @dev Sets a new start timestamp for the contract.\n    * Only the owner has the privilege to update the start timestamp.\n    * @param timestamp The new start timestamp to be set.\n    */\n    function setStartTimestamp(uint256 timestamp) external;\n\n    /**\n    * @dev Sets a new duration in seconds for the contract.\n    * Only the owner has the privilege to update the duration.\n    * @param seconds_ The new duration in seconds to be set.\n    */\n    function setDuration(uint256 seconds_) external;\n\n    /**\n    * @dev Sets a new required quorum in basis points for the contract.\n    * Only the owner has the privilege to update the required quorum.\n    * @param bp The new required quorum in basis points to be set.\n    */\n    function setRequiredQuorum(uint256 bp) external;\n\n    /**\n    * @dev Adds a new signer to the contract.\n    * Only the owner has the privilege to add a new signer.\n    * @param account The address of the new signer to be added.\n    */\n    function addSigner(address account) external;\n\n    /**\n    * @dev Signs the contract, indicating the sender's agreement or authorization.\n    * This function is typically called by a signer to provide their signature.\n    */\n    function sign() external;\n}"
			},
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* ownerKey => address\n */\ninterface IOwnable {\n\n    /**\n    * @dev Emitted when ownership of the contract is transferred.\n    * @param oldOwner The address of the old owner.\n    * @param newOwner The address of the new owner.\n    */\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    /**\n    * @dev Returns the key for the owner in the storage mapping.\n    * @return The key for the owner.\n    */\n    function ownerkey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the current owner of the contract.\n    * @return The address of the current owner.\n    */\n    function owner() external view returns (address);\n\n    /**\n    * @dev Renounces ownership, leaving the contract without an owner.\n    */\n    function renounceOwnership() external;\n\n    /**\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n    * Can only be called by the current owner.\n    */\n    function transferOwnership(address newOwner) external;\n}"
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IInitializable {\n\n    /**\n    * @dev Returns the key for checking if the contract has been initialized.\n    */\n    function initializedKey() external pure returns (bytes32);\n\n    /**\n    * @dev Checks if the contract has been initialized.\n    */\n    function initialized() external view returns (bool);\n}"
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ILowLevelCall {\n\n    /**\n    * @dev Emitted when a low-level call is executed.\n    * @param target The target address of the call.\n    * @param data The data passed to the call.\n    * @param response The response received from the call.\n    */\n    event LowLevelCall(address indexed target, bytes indexed data, bytes indexed response);\n}"
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ITimer {\n\n    /**\n    * @dev Returns the key for the start timestamp.\n    */\n    function startTimestampKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for the duration.\n    */\n    function durationKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the start timestamp.\n    */\n    function startTimestamp() external view returns (uint256);\n\n    /**\n    * @dev Returns the end timestamp.\n    */\n    function endTimestamp() external view returns (uint256);\n\n    /**\n    * @dev Returns the duration.\n    */\n    function duration() external view returns (uint256);\n\n    /**\n    * @dev Checks if the timer has started.\n    */\n    function started() external view returns (bool);\n\n    /**\n    * @dev Checks if the timer has ended.\n    */\n    function ended() external view returns (bool);\n\n    /**\n    * @dev Checks if the timer is actively counting.\n    */\n    function counting() external view returns (bool);\n\n    /**\n    * @dev Calculates the remaining seconds in the timer.\n    */\n    function secondsLeft() external view returns (uint256);\n}"
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\n/**\n* targetKey => address\n* dataKey => bytes\n */\ninterface IPayload {\n\n    /**\n    * @dev Returns the key for storing the target address.\n    */\n    function targetKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the data.\n    */\n    function dataKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the current target address.\n    */\n    function target() external view returns (address);\n\n    /**\n    * @dev Returns the current data bytes.\n    */\n    function data() external view returns (bytes memory);\n}"
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface ITag {\n\n    /**\n    * @dev Returns the key for storing the caption in storage.\n    */\n    function captionKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the message in storage.\n    */\n    function messageKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the key for storing the creator in storage.\n    */\n    function creatorKey() external pure returns (bytes32);\n\n    /**\n    * @dev Returns the caption associated with the proposal.\n    */\n    function caption() external view returns (string memory);\n\n    /**\n    * @dev Returns the message associated with the proposal.\n    */\n    function message() external view returns (string memory);\n\n    /**\n    * @dev Returns the address of the creator of the proposal.\n    */\n    function creator() external view returns (address);\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"IOwnable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"ownerKey => address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":\"IOwnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "ownerKey => address",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol": {
				"IMultiSigProposal": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "CaptionSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								}
							],
							"name": "CreatorSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "data",
									"type": "address"
								}
							],
							"name": "DataSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "DurationSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "MessageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Passed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredQuorumSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								}
							],
							"name": "Signed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								}
							],
							"name": "SignerAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "StartTimestampSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "TargetSet",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "addSigner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasSigned",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasSufficientSignatures",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isSigner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredSignaturesLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "setCaption",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setCreator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "setData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "setDuration",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "setMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredQuorum",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "setStartTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTarget",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sign",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "signatureId",
									"type": "uint256"
								}
							],
							"name": "signatures",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signaturesKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signaturesLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "signerId",
									"type": "uint256"
								}
							],
							"name": "signers",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signersKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signersLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"CaptionSet(string)": {
								"details": "Emitted when a caption is set.",
								"params": {
									"caption": "The string representing the new caption. Indexed for efficient log filtering."
								}
							},
							"CreatorSet(address)": {
								"details": "Emitted when the creator address is set.",
								"params": {
									"creator": "The address of the newly set creator. Indexed for efficient log filtering."
								}
							},
							"DataSet(address)": {
								"details": "Emitted when a data address is set.",
								"params": {
									"data": "The address of the newly set data. Indexed for efficient log filtering."
								}
							},
							"DurationSet(uint256)": {
								"details": "Emitted when the duration in seconds is set.",
								"params": {
									"seconds_": "The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering."
								}
							},
							"Executed()": {
								"details": "Emitted when an execution or operation is successfully completed. This event signals the successful execution of a particular functionality or task."
							},
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							},
							"MessageSet(string)": {
								"details": "Emitted when a message is set.",
								"params": {
									"message": "The string representing the new message. Indexed for efficient log filtering."
								}
							},
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							},
							"Passed()": {
								"details": "Emitted when a condition or step is successfully passed. This event signifies the successful completion of a specific action or checkpoint."
							},
							"RequiredQuorumSet(uint256)": {
								"details": "Emitted when the required quorum is set.",
								"params": {
									"bp": "The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering."
								}
							},
							"Signed(address)": {
								"details": "Emitted when a signing action occurs.",
								"params": {
									"signer": "The address of the signer. Indexed for efficient log filtering."
								}
							},
							"SignerAdded(address)": {
								"details": "Emitted when a new signer is added.",
								"params": {
									"signer": "The address of the added signer. Indexed for efficient log filtering."
								}
							},
							"StartTimestampSet(uint256)": {
								"details": "Emitted when the start timestamp is set.",
								"params": {
									"timestamp": "The uint256 representing the newly set start timestamp. Indexed for efficient log filtering."
								}
							},
							"TargetSet(address)": {
								"details": "Emitted when the target address is set.",
								"params": {
									"target": "The address of the newly set target. Indexed for efficient log filtering."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addSigner(address)": {
								"details": "Adds a new signer to the contract. Only the owner has the privilege to add a new signer.",
								"params": {
									"account": "The address of the new signer to be added."
								}
							},
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"executed()": {
								"details": "Checks if a specific operation or task has been successfully executed.",
								"returns": {
									"_0": "bool True if the operation or task has been executed, otherwise false."
								}
							},
							"executedKey()": {
								"details": "Returns the keccak256 hash of the string \"EXECUTED\". This function is used to generate a unique key for tracking the execution status of a specific operation or task.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"EXECUTED\"."
								}
							},
							"hasSigned(address)": {
								"details": "Checks if an address has already provided a signature.",
								"params": {
									"account": "The address to check."
								},
								"returns": {
									"_0": "bool True if the address has signed, otherwise false."
								}
							},
							"hasSufficientSignatures()": {
								"details": "Checks whether the number of collected signatures meets or exceeds the required threshold.",
								"returns": {
									"_0": "bool True if there are sufficient signatures, otherwise false."
								}
							},
							"initialize()": {
								"details": "Initializes the contract, setting up any initial configurations or values. This function is typically called once, often during deployment."
							},
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							},
							"isSigner(address)": {
								"details": "Checks if an address is a registered signer.",
								"params": {
									"account": "The address to check."
								},
								"returns": {
									"_0": "bool True if the address is a signer, otherwise false."
								}
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							},
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"passed()": {
								"details": "Checks if a specific action or step has been successfully passed.",
								"returns": {
									"_0": "bool True if the action or step has passed, otherwise false."
								}
							},
							"passedKey()": {
								"details": "Returns the keccak256 hash of the string \"PASSED\". This function is used to generate a unique key for tracking the completion status of a specific action or step.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"PASSED\"."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"requiredQuorum()": {
								"details": "Retrieves the required quorum value from storage.",
								"returns": {
									"_0": "uint256 The current required quorum value."
								}
							},
							"requiredQuorumKey()": {
								"details": "Returns the keccak256 hash of the string \"REQUIRED_QUORUM\". This function is used to generate a unique key for accessing the required quorum value.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"REQUIRED_QUORUM\"."
								}
							},
							"requiredSignaturesLength()": {
								"details": "Calculates the required number of signatures based on the quorum and the number of signers.",
								"returns": {
									"_0": "uint256 The current required number of signatures for a successful action."
								}
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"setCaption(string)": {
								"details": "Sets a new caption for the contract. Only the owner has the privilege to update the caption.",
								"params": {
									"caption": "The new caption to be set."
								}
							},
							"setCreator(address)": {
								"details": "Sets a new creator for the contract. Only the owner has the privilege to update the creator address.",
								"params": {
									"account": "The new creator address to be set."
								}
							},
							"setData(bytes)": {
								"details": "Sets new data for the contract. Only the owner has the privilege to update the data.",
								"params": {
									"data": "The new data to be set."
								}
							},
							"setDuration(uint256)": {
								"details": "Sets a new duration in seconds for the contract. Only the owner has the privilege to update the duration.",
								"params": {
									"seconds_": "The new duration in seconds to be set."
								}
							},
							"setMessage(string)": {
								"details": "Sets a new message for the contract. Only the owner has the privilege to update the message.",
								"params": {
									"message": "The new message to be set."
								}
							},
							"setRequiredQuorum(uint256)": {
								"details": "Sets a new required quorum in basis points for the contract. Only the owner has the privilege to update the required quorum.",
								"params": {
									"bp": "The new required quorum in basis points to be set."
								}
							},
							"setStartTimestamp(uint256)": {
								"details": "Sets a new start timestamp for the contract. Only the owner has the privilege to update the start timestamp.",
								"params": {
									"timestamp": "The new start timestamp to be set."
								}
							},
							"setTarget(address)": {
								"details": "Sets a new target address for the contract. Only the owner has the privilege to update the target address.",
								"params": {
									"account": "The new target address to be set."
								}
							},
							"sign()": {
								"details": "Signs the contract, indicating the sender's agreement or authorization. This function is typically called by a signer to provide their signature."
							},
							"signatures(uint256)": {
								"details": "Retrieves the address of a signature based on its unique identifier.",
								"params": {
									"signatureId": "The identifier of the signature."
								},
								"returns": {
									"_0": "address The address of the specified signature."
								}
							},
							"signaturesKey()": {
								"details": "Returns the keccak256 hash of the string \"SIGNATURES\". This function is used to generate a unique key for storing signatures related to a process or action.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"SIGNATURES\"."
								}
							},
							"signaturesLength()": {
								"details": "Retrieves the total number of signatures collected.",
								"returns": {
									"_0": "uint256 The current length of the signatures set."
								}
							},
							"signers(uint256)": {
								"details": "Retrieves the address of a signer based on their unique identifier.",
								"params": {
									"signerId": "The identifier of the signer."
								},
								"returns": {
									"_0": "address The address of the specified signer."
								}
							},
							"signersKey()": {
								"details": "Returns the keccak256 hash of the string \"SIGNERS\". This function is used to generate a unique key for managing a set of signers.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"SIGNERS\"."
								}
							},
							"signersLength()": {
								"details": "Retrieves the total number of signers currently registered.",
								"returns": {
									"_0": "uint256 The current length of the signers set."
								}
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addSigner(address)": "eb12d61e",
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"counting()": "8554b847",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"executed()": "31a38c89",
							"executedKey()": "7870dfae",
							"hasSigned(address)": "bf6a1413",
							"hasSufficientSignatures()": "8bc301fd",
							"initialize()": "8129fc1c",
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926",
							"isSigner(address)": "7df73e27",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b",
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"passed()": "a05b5c30",
							"passedKey()": "becfa6c0",
							"renounceOwnership()": "715018a6",
							"requiredQuorum()": "7036014e",
							"requiredQuorumKey()": "372fdd00",
							"requiredSignaturesLength()": "6d22a0c7",
							"secondsLeft()": "86a83735",
							"setCaption(string)": "04b9f2f0",
							"setCreator(address)": "3f516018",
							"setData(bytes)": "ab62f0e1",
							"setDuration(uint256)": "f6be71d1",
							"setMessage(string)": "368b8772",
							"setRequiredQuorum(uint256)": "fc19e8ed",
							"setStartTimestamp(uint256)": "c44bef75",
							"setTarget(address)": "776d1a01",
							"sign()": "2ca15122",
							"signatures(uint256)": "8be10194",
							"signaturesKey()": "5fabb1bf",
							"signaturesLength()": "0077158b",
							"signers(uint256)": "2079fb9a",
							"signersKey()": "c7ac0917",
							"signersLength()": "41f684f3",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"CaptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"DurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Passed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSufficientSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSignaturesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"setCaption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signerId\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CaptionSet(string)\":{\"details\":\"Emitted when a caption is set.\",\"params\":{\"caption\":\"The string representing the new caption. Indexed for efficient log filtering.\"}},\"CreatorSet(address)\":{\"details\":\"Emitted when the creator address is set.\",\"params\":{\"creator\":\"The address of the newly set creator. Indexed for efficient log filtering.\"}},\"DataSet(address)\":{\"details\":\"Emitted when a data address is set.\",\"params\":{\"data\":\"The address of the newly set data. Indexed for efficient log filtering.\"}},\"DurationSet(uint256)\":{\"details\":\"Emitted when the duration in seconds is set.\",\"params\":{\"seconds_\":\"The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering.\"}},\"Executed()\":{\"details\":\"Emitted when an execution or operation is successfully completed. This event signals the successful execution of a particular functionality or task.\"},\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}},\"MessageSet(string)\":{\"details\":\"Emitted when a message is set.\",\"params\":{\"message\":\"The string representing the new message. Indexed for efficient log filtering.\"}},\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}},\"Passed()\":{\"details\":\"Emitted when a condition or step is successfully passed. This event signifies the successful completion of a specific action or checkpoint.\"},\"RequiredQuorumSet(uint256)\":{\"details\":\"Emitted when the required quorum is set.\",\"params\":{\"bp\":\"The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering.\"}},\"Signed(address)\":{\"details\":\"Emitted when a signing action occurs.\",\"params\":{\"signer\":\"The address of the signer. Indexed for efficient log filtering.\"}},\"SignerAdded(address)\":{\"details\":\"Emitted when a new signer is added.\",\"params\":{\"signer\":\"The address of the added signer. Indexed for efficient log filtering.\"}},\"StartTimestampSet(uint256)\":{\"details\":\"Emitted when the start timestamp is set.\",\"params\":{\"timestamp\":\"The uint256 representing the newly set start timestamp. Indexed for efficient log filtering.\"}},\"TargetSet(address)\":{\"details\":\"Emitted when the target address is set.\",\"params\":{\"target\":\"The address of the newly set target. Indexed for efficient log filtering.\"}}},\"kind\":\"dev\",\"methods\":{\"addSigner(address)\":{\"details\":\"Adds a new signer to the contract. Only the owner has the privilege to add a new signer.\",\"params\":{\"account\":\"The address of the new signer to be added.\"}},\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"executed()\":{\"details\":\"Checks if a specific operation or task has been successfully executed.\",\"returns\":{\"_0\":\"bool True if the operation or task has been executed, otherwise false.\"}},\"executedKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"EXECUTED\\\". This function is used to generate a unique key for tracking the execution status of a specific operation or task.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"EXECUTED\\\".\"}},\"hasSigned(address)\":{\"details\":\"Checks if an address has already provided a signature.\",\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"bool True if the address has signed, otherwise false.\"}},\"hasSufficientSignatures()\":{\"details\":\"Checks whether the number of collected signatures meets or exceeds the required threshold.\",\"returns\":{\"_0\":\"bool True if there are sufficient signatures, otherwise false.\"}},\"initialize()\":{\"details\":\"Initializes the contract, setting up any initial configurations or values. This function is typically called once, often during deployment.\"},\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"},\"isSigner(address)\":{\"details\":\"Checks if an address is a registered signer.\",\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"bool True if the address is a signer, otherwise false.\"}},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"},\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"passed()\":{\"details\":\"Checks if a specific action or step has been successfully passed.\",\"returns\":{\"_0\":\"bool True if the action or step has passed, otherwise false.\"}},\"passedKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"PASSED\\\". This function is used to generate a unique key for tracking the completion status of a specific action or step.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"PASSED\\\".\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"requiredQuorum()\":{\"details\":\"Retrieves the required quorum value from storage.\",\"returns\":{\"_0\":\"uint256 The current required quorum value.\"}},\"requiredQuorumKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"REQUIRED_QUORUM\\\". This function is used to generate a unique key for accessing the required quorum value.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"REQUIRED_QUORUM\\\".\"}},\"requiredSignaturesLength()\":{\"details\":\"Calculates the required number of signatures based on the quorum and the number of signers.\",\"returns\":{\"_0\":\"uint256 The current required number of signatures for a successful action.\"}},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"setCaption(string)\":{\"details\":\"Sets a new caption for the contract. Only the owner has the privilege to update the caption.\",\"params\":{\"caption\":\"The new caption to be set.\"}},\"setCreator(address)\":{\"details\":\"Sets a new creator for the contract. Only the owner has the privilege to update the creator address.\",\"params\":{\"account\":\"The new creator address to be set.\"}},\"setData(bytes)\":{\"details\":\"Sets new data for the contract. Only the owner has the privilege to update the data.\",\"params\":{\"data\":\"The new data to be set.\"}},\"setDuration(uint256)\":{\"details\":\"Sets a new duration in seconds for the contract. Only the owner has the privilege to update the duration.\",\"params\":{\"seconds_\":\"The new duration in seconds to be set.\"}},\"setMessage(string)\":{\"details\":\"Sets a new message for the contract. Only the owner has the privilege to update the message.\",\"params\":{\"message\":\"The new message to be set.\"}},\"setRequiredQuorum(uint256)\":{\"details\":\"Sets a new required quorum in basis points for the contract. Only the owner has the privilege to update the required quorum.\",\"params\":{\"bp\":\"The new required quorum in basis points to be set.\"}},\"setStartTimestamp(uint256)\":{\"details\":\"Sets a new start timestamp for the contract. Only the owner has the privilege to update the start timestamp.\",\"params\":{\"timestamp\":\"The new start timestamp to be set.\"}},\"setTarget(address)\":{\"details\":\"Sets a new target address for the contract. Only the owner has the privilege to update the target address.\",\"params\":{\"account\":\"The new target address to be set.\"}},\"sign()\":{\"details\":\"Signs the contract, indicating the sender's agreement or authorization. This function is typically called by a signer to provide their signature.\"},\"signatures(uint256)\":{\"details\":\"Retrieves the address of a signature based on its unique identifier.\",\"params\":{\"signatureId\":\"The identifier of the signature.\"},\"returns\":{\"_0\":\"address The address of the specified signature.\"}},\"signaturesKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"SIGNATURES\\\". This function is used to generate a unique key for storing signatures related to a process or action.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"SIGNATURES\\\".\"}},\"signaturesLength()\":{\"details\":\"Retrieves the total number of signatures collected.\",\"returns\":{\"_0\":\"uint256 The current length of the signatures set.\"}},\"signers(uint256)\":{\"details\":\"Retrieves the address of a signer based on their unique identifier.\",\"params\":{\"signerId\":\"The identifier of the signer.\"},\"returns\":{\"_0\":\"address The address of the specified signer.\"}},\"signersKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"SIGNERS\\\". This function is used to generate a unique key for managing a set of signers.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"SIGNERS\\\".\"}},\"signersLength()\":{\"details\":\"Retrieves the total number of signers currently registered.\",\"returns\":{\"_0\":\"uint256 The current length of the signers set.\"}},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol\":\"IMultiSigProposal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]},\"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol\":{\"keccak256\":\"0xb2e19e2a9fbc4a83a2374c73d42bf1ad33a71c823d5baba8ef701d51c61a89b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://031df183d113a16609f82cef93139493869f32ee3b60d4238dd5a21ea3b643de\",\"dweb:/ipfs/Qmb1nGQ6SMhuVEjXEWc9A1B6QeGDvWShmhqyccU1VYNwA2\"]},\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]},\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]},\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]},\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]},\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol": {
				"IMultiSigProposalImplementation": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "CaptionSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "creator",
									"type": "address"
								}
							],
							"name": "CreatorSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "data",
									"type": "address"
								}
							],
							"name": "DataSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "DurationSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Executed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "MessageSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "MultiSigProposalFactorySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "oldOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "Passed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "ReferendumProposalFactorySet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "RequiredQuorumSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								}
							],
							"name": "Signed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								}
							],
							"name": "SignerAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "StartTimestampSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "TargetSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "TerminalSet",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "addSigner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "execute",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "executedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "hasSigned",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasSufficientSignatures",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "isSigner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ownerkey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "passedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorum",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredQuorumKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requiredSignaturesLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "caption",
									"type": "string"
								}
							],
							"name": "setCaption",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setCreator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "setData",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "seconds_",
									"type": "uint256"
								}
							],
							"name": "setDuration",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "setMessage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setMultiSigProposalFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setReferendumProposalFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "bp",
									"type": "uint256"
								}
							],
							"name": "setRequiredQuorum",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "timestamp",
									"type": "uint256"
								}
							],
							"name": "setStartTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTarget",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "setTerminal",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sign",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "signatureId",
									"type": "uint256"
								}
							],
							"name": "signatures",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signaturesKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signaturesLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "signerId",
									"type": "uint256"
								}
							],
							"name": "signers",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signersKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signersLength",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminal",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminalKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"CaptionSet(string)": {
								"details": "Emitted when a caption is set.",
								"params": {
									"caption": "The string representing the new caption. Indexed for efficient log filtering."
								}
							},
							"CreatorSet(address)": {
								"details": "Emitted when the creator address is set.",
								"params": {
									"creator": "The address of the newly set creator. Indexed for efficient log filtering."
								}
							},
							"DataSet(address)": {
								"details": "Emitted when a data address is set.",
								"params": {
									"data": "The address of the newly set data. Indexed for efficient log filtering."
								}
							},
							"DurationSet(uint256)": {
								"details": "Emitted when the duration in seconds is set.",
								"params": {
									"seconds_": "The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering."
								}
							},
							"Executed()": {
								"details": "Emitted when an execution or operation is successfully completed. This event signals the successful execution of a particular functionality or task."
							},
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							},
							"MessageSet(string)": {
								"details": "Emitted when a message is set.",
								"params": {
									"message": "The string representing the new message. Indexed for efficient log filtering."
								}
							},
							"MultiSigProposalFactorySet(address)": {
								"details": "Emitted when the MultiSigProposalFactory address is set.",
								"params": {
									"account": "The address of the new MultiSigProposalFactory."
								}
							},
							"OwnershipTransferred(address,address)": {
								"details": "Emitted when ownership of the contract is transferred.",
								"params": {
									"newOwner": "The address of the new owner.",
									"oldOwner": "The address of the old owner."
								}
							},
							"Passed()": {
								"details": "Emitted when a condition or step is successfully passed. This event signifies the successful completion of a specific action or checkpoint."
							},
							"ReferendumProposalFactorySet(address)": {
								"details": "Emitted when the ReferendumProposalFactory address is set.",
								"params": {
									"account": "The address of the new ReferendumProposalFactory."
								}
							},
							"RequiredQuorumSet(uint256)": {
								"details": "Emitted when the required quorum is set.",
								"params": {
									"bp": "The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering."
								}
							},
							"Signed(address)": {
								"details": "Emitted when a signing action occurs.",
								"params": {
									"signer": "The address of the signer. Indexed for efficient log filtering."
								}
							},
							"SignerAdded(address)": {
								"details": "Emitted when a new signer is added.",
								"params": {
									"signer": "The address of the added signer. Indexed for efficient log filtering."
								}
							},
							"StartTimestampSet(uint256)": {
								"details": "Emitted when the start timestamp is set.",
								"params": {
									"timestamp": "The uint256 representing the newly set start timestamp. Indexed for efficient log filtering."
								}
							},
							"TargetSet(address)": {
								"details": "Emitted when the target address is set.",
								"params": {
									"target": "The address of the newly set target. Indexed for efficient log filtering."
								}
							},
							"TerminalSet(address)": {
								"details": "Emitted when the terminal address is set.",
								"params": {
									"account": "The address of the new terminal."
								}
							}
						},
						"kind": "dev",
						"methods": {
							"addSigner(address)": {
								"details": "Adds a new signer to the contract. Only the owner has the privilege to add a new signer.",
								"params": {
									"account": "The address of the new signer to be added."
								}
							},
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"execute()": {
								"details": "Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. TODO: Create another referendum proposal using the ReferendumProposalFactory."
							},
							"executed()": {
								"details": "Checks if a specific operation or task has been successfully executed.",
								"returns": {
									"_0": "bool True if the operation or task has been executed, otherwise false."
								}
							},
							"executedKey()": {
								"details": "Returns the keccak256 hash of the string \"EXECUTED\". This function is used to generate a unique key for tracking the execution status of a specific operation or task.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"EXECUTED\"."
								}
							},
							"hasSigned(address)": {
								"details": "Checks if an address has already provided a signature.",
								"params": {
									"account": "The address to check."
								},
								"returns": {
									"_0": "bool True if the address has signed, otherwise false."
								}
							},
							"hasSufficientSignatures()": {
								"details": "Checks whether the number of collected signatures meets or exceeds the required threshold.",
								"returns": {
									"_0": "bool True if there are sufficient signatures, otherwise false."
								}
							},
							"initialize()": {
								"details": "Initializes the contract, setting up any initial configurations or values. This function is typically called once, often during deployment."
							},
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							},
							"isSigner(address)": {
								"details": "Checks if an address is a registered signer.",
								"params": {
									"account": "The address to check."
								},
								"returns": {
									"_0": "bool True if the address is a signer, otherwise false."
								}
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							},
							"multiSigProposalFactory()": {
								"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the MultiSigProposalFactory."
								}
							},
							"multiSigProposalFactoryKey()": {
								"details": "Returns the key used to store the MultiSigProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
								}
							},
							"owner()": {
								"details": "Returns the current owner of the contract.",
								"returns": {
									"_0": "The address of the current owner."
								}
							},
							"ownerkey()": {
								"details": "Returns the key for the owner in the storage mapping.",
								"returns": {
									"_0": "The key for the owner."
								}
							},
							"passed()": {
								"details": "Checks if a specific action or step has been successfully passed.",
								"returns": {
									"_0": "bool True if the action or step has passed, otherwise false."
								}
							},
							"passedKey()": {
								"details": "Returns the keccak256 hash of the string \"PASSED\". This function is used to generate a unique key for tracking the completion status of a specific action or step.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"PASSED\"."
								}
							},
							"referendumProposalFactory()": {
								"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the ReferendumProposalFactory."
								}
							},
							"referendumProposalFactoryKey()": {
								"details": "Returns the key used to store the ReferendumProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
								}
							},
							"renounceOwnership()": {
								"details": "Renounces ownership, leaving the contract without an owner."
							},
							"requiredQuorum()": {
								"details": "Retrieves the required quorum value from storage.",
								"returns": {
									"_0": "uint256 The current required quorum value."
								}
							},
							"requiredQuorumKey()": {
								"details": "Returns the keccak256 hash of the string \"REQUIRED_QUORUM\". This function is used to generate a unique key for accessing the required quorum value.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"REQUIRED_QUORUM\"."
								}
							},
							"requiredSignaturesLength()": {
								"details": "Calculates the required number of signatures based on the quorum and the number of signers.",
								"returns": {
									"_0": "uint256 The current required number of signatures for a successful action."
								}
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"setCaption(string)": {
								"details": "Sets a new caption for the contract. Only the owner has the privilege to update the caption.",
								"params": {
									"caption": "The new caption to be set."
								}
							},
							"setCreator(address)": {
								"details": "Sets a new creator for the contract. Only the owner has the privilege to update the creator address.",
								"params": {
									"account": "The new creator address to be set."
								}
							},
							"setData(bytes)": {
								"details": "Sets new data for the contract. Only the owner has the privilege to update the data.",
								"params": {
									"data": "The new data to be set."
								}
							},
							"setDuration(uint256)": {
								"details": "Sets a new duration in seconds for the contract. Only the owner has the privilege to update the duration.",
								"params": {
									"seconds_": "The new duration in seconds to be set."
								}
							},
							"setMessage(string)": {
								"details": "Sets a new message for the contract. Only the owner has the privilege to update the message.",
								"params": {
									"message": "The new message to be set."
								}
							},
							"setMultiSigProposalFactory(address)": {
								"details": "Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
								"params": {
									"account": "The address of the new MultiSigProposalFactory."
								}
							},
							"setReferendumProposalFactory(address)": {
								"details": "Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
								"params": {
									"account": "The address of the new ReferendumProposalFactory."
								}
							},
							"setRequiredQuorum(uint256)": {
								"details": "Sets a new required quorum in basis points for the contract. Only the owner has the privilege to update the required quorum.",
								"params": {
									"bp": "The new required quorum in basis points to be set."
								}
							},
							"setStartTimestamp(uint256)": {
								"details": "Sets a new start timestamp for the contract. Only the owner has the privilege to update the start timestamp.",
								"params": {
									"timestamp": "The new start timestamp to be set."
								}
							},
							"setTarget(address)": {
								"details": "Sets a new target address for the contract. Only the owner has the privilege to update the target address.",
								"params": {
									"account": "The new target address to be set."
								}
							},
							"setTerminal(address)": {
								"details": "Sets the address of the terminal associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
								"params": {
									"account": "The address of the new terminal."
								}
							},
							"sign()": {
								"details": "Signs the contract, indicating the sender's agreement or authorization. This function is typically called by a signer to provide their signature."
							},
							"signatures(uint256)": {
								"details": "Retrieves the address of a signature based on its unique identifier.",
								"params": {
									"signatureId": "The identifier of the signature."
								},
								"returns": {
									"_0": "address The address of the specified signature."
								}
							},
							"signaturesKey()": {
								"details": "Returns the keccak256 hash of the string \"SIGNATURES\". This function is used to generate a unique key for storing signatures related to a process or action.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"SIGNATURES\"."
								}
							},
							"signaturesLength()": {
								"details": "Retrieves the total number of signatures collected.",
								"returns": {
									"_0": "uint256 The current length of the signatures set."
								}
							},
							"signers(uint256)": {
								"details": "Retrieves the address of a signer based on their unique identifier.",
								"params": {
									"signerId": "The identifier of the signer."
								},
								"returns": {
									"_0": "address The address of the specified signer."
								}
							},
							"signersKey()": {
								"details": "Returns the keccak256 hash of the string \"SIGNERS\". This function is used to generate a unique key for managing a set of signers.",
								"returns": {
									"_0": "bytes32 The keccak256 hash of \"SIGNERS\"."
								}
							},
							"signersLength()": {
								"details": "Retrieves the total number of signers currently registered.",
								"returns": {
									"_0": "uint256 The current length of the signers set."
								}
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							},
							"terminal()": {
								"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the terminal."
								}
							},
							"terminalKey()": {
								"details": "Returns the key used to store the terminal address.",
								"returns": {
									"_0": "bytes32 The key for the terminal in keccak256 hash."
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addSigner(address)": "eb12d61e",
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"counting()": "8554b847",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"execute()": "61461954",
							"executed()": "31a38c89",
							"executedKey()": "7870dfae",
							"hasSigned(address)": "bf6a1413",
							"hasSufficientSignatures()": "8bc301fd",
							"initialize()": "8129fc1c",
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926",
							"isSigner(address)": "7df73e27",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b",
							"multiSigProposalFactory()": "0065d30d",
							"multiSigProposalFactoryKey()": "d63391c0",
							"owner()": "8da5cb5b",
							"ownerkey()": "8133f6b1",
							"passed()": "a05b5c30",
							"passedKey()": "becfa6c0",
							"referendumProposalFactory()": "2053aa53",
							"referendumProposalFactoryKey()": "dedaace5",
							"renounceOwnership()": "715018a6",
							"requiredQuorum()": "7036014e",
							"requiredQuorumKey()": "372fdd00",
							"requiredSignaturesLength()": "6d22a0c7",
							"secondsLeft()": "86a83735",
							"setCaption(string)": "04b9f2f0",
							"setCreator(address)": "3f516018",
							"setData(bytes)": "ab62f0e1",
							"setDuration(uint256)": "f6be71d1",
							"setMessage(string)": "368b8772",
							"setMultiSigProposalFactory(address)": "297da9e1",
							"setReferendumProposalFactory(address)": "c138d1a0",
							"setRequiredQuorum(uint256)": "fc19e8ed",
							"setStartTimestamp(uint256)": "c44bef75",
							"setTarget(address)": "776d1a01",
							"setTerminal(address)": "bd9f98e1",
							"sign()": "2ca15122",
							"signatures(uint256)": "8be10194",
							"signaturesKey()": "5fabb1bf",
							"signaturesLength()": "0077158b",
							"signers(uint256)": "2079fb9a",
							"signersKey()": "c7ac0917",
							"signersLength()": "41f684f3",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36",
							"terminal()": "f45d0bc6",
							"terminalKey()": "41346f0a",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"CaptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"DurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MessageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MultiSigProposalFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Passed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ReferendumProposalFactorySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"RequiredQuorumSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"Signed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StartTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"TargetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TerminalSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasSigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasSufficientSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredQuorumKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSignaturesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"caption\",\"type\":\"string\"}],\"name\":\"setCaption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seconds_\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"setMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMultiSigProposalFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setReferendumProposalFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setRequiredQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTerminal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureId\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signaturesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signerId\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CaptionSet(string)\":{\"details\":\"Emitted when a caption is set.\",\"params\":{\"caption\":\"The string representing the new caption. Indexed for efficient log filtering.\"}},\"CreatorSet(address)\":{\"details\":\"Emitted when the creator address is set.\",\"params\":{\"creator\":\"The address of the newly set creator. Indexed for efficient log filtering.\"}},\"DataSet(address)\":{\"details\":\"Emitted when a data address is set.\",\"params\":{\"data\":\"The address of the newly set data. Indexed for efficient log filtering.\"}},\"DurationSet(uint256)\":{\"details\":\"Emitted when the duration in seconds is set.\",\"params\":{\"seconds_\":\"The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering.\"}},\"Executed()\":{\"details\":\"Emitted when an execution or operation is successfully completed. This event signals the successful execution of a particular functionality or task.\"},\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}},\"MessageSet(string)\":{\"details\":\"Emitted when a message is set.\",\"params\":{\"message\":\"The string representing the new message. Indexed for efficient log filtering.\"}},\"MultiSigProposalFactorySet(address)\":{\"details\":\"Emitted when the MultiSigProposalFactory address is set.\",\"params\":{\"account\":\"The address of the new MultiSigProposalFactory.\"}},\"OwnershipTransferred(address,address)\":{\"details\":\"Emitted when ownership of the contract is transferred.\",\"params\":{\"newOwner\":\"The address of the new owner.\",\"oldOwner\":\"The address of the old owner.\"}},\"Passed()\":{\"details\":\"Emitted when a condition or step is successfully passed. This event signifies the successful completion of a specific action or checkpoint.\"},\"ReferendumProposalFactorySet(address)\":{\"details\":\"Emitted when the ReferendumProposalFactory address is set.\",\"params\":{\"account\":\"The address of the new ReferendumProposalFactory.\"}},\"RequiredQuorumSet(uint256)\":{\"details\":\"Emitted when the required quorum is set.\",\"params\":{\"bp\":\"The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering.\"}},\"Signed(address)\":{\"details\":\"Emitted when a signing action occurs.\",\"params\":{\"signer\":\"The address of the signer. Indexed for efficient log filtering.\"}},\"SignerAdded(address)\":{\"details\":\"Emitted when a new signer is added.\",\"params\":{\"signer\":\"The address of the added signer. Indexed for efficient log filtering.\"}},\"StartTimestampSet(uint256)\":{\"details\":\"Emitted when the start timestamp is set.\",\"params\":{\"timestamp\":\"The uint256 representing the newly set start timestamp. Indexed for efficient log filtering.\"}},\"TargetSet(address)\":{\"details\":\"Emitted when the target address is set.\",\"params\":{\"target\":\"The address of the newly set target. Indexed for efficient log filtering.\"}},\"TerminalSet(address)\":{\"details\":\"Emitted when the terminal address is set.\",\"params\":{\"account\":\"The address of the new terminal.\"}}},\"kind\":\"dev\",\"methods\":{\"addSigner(address)\":{\"details\":\"Adds a new signer to the contract. Only the owner has the privilege to add a new signer.\",\"params\":{\"account\":\"The address of the new signer to be added.\"}},\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"execute()\":{\"details\":\"Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. TODO: Create another referendum proposal using the ReferendumProposalFactory.\"},\"executed()\":{\"details\":\"Checks if a specific operation or task has been successfully executed.\",\"returns\":{\"_0\":\"bool True if the operation or task has been executed, otherwise false.\"}},\"executedKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"EXECUTED\\\". This function is used to generate a unique key for tracking the execution status of a specific operation or task.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"EXECUTED\\\".\"}},\"hasSigned(address)\":{\"details\":\"Checks if an address has already provided a signature.\",\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"bool True if the address has signed, otherwise false.\"}},\"hasSufficientSignatures()\":{\"details\":\"Checks whether the number of collected signatures meets or exceeds the required threshold.\",\"returns\":{\"_0\":\"bool True if there are sufficient signatures, otherwise false.\"}},\"initialize()\":{\"details\":\"Initializes the contract, setting up any initial configurations or values. This function is typically called once, often during deployment.\"},\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"},\"isSigner(address)\":{\"details\":\"Checks if an address is a registered signer.\",\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"bool True if the address is a signer, otherwise false.\"}},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"},\"multiSigProposalFactory()\":{\"details\":\"Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the MultiSigProposalFactory.\"}},\"multiSigProposalFactoryKey()\":{\"details\":\"Returns the key used to store the MultiSigProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\"}},\"owner()\":{\"details\":\"Returns the current owner of the contract.\",\"returns\":{\"_0\":\"The address of the current owner.\"}},\"ownerkey()\":{\"details\":\"Returns the key for the owner in the storage mapping.\",\"returns\":{\"_0\":\"The key for the owner.\"}},\"passed()\":{\"details\":\"Checks if a specific action or step has been successfully passed.\",\"returns\":{\"_0\":\"bool True if the action or step has passed, otherwise false.\"}},\"passedKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"PASSED\\\". This function is used to generate a unique key for tracking the completion status of a specific action or step.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"PASSED\\\".\"}},\"referendumProposalFactory()\":{\"details\":\"Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the ReferendumProposalFactory.\"}},\"referendumProposalFactoryKey()\":{\"details\":\"Returns the key used to store the ReferendumProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\"}},\"renounceOwnership()\":{\"details\":\"Renounces ownership, leaving the contract without an owner.\"},\"requiredQuorum()\":{\"details\":\"Retrieves the required quorum value from storage.\",\"returns\":{\"_0\":\"uint256 The current required quorum value.\"}},\"requiredQuorumKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"REQUIRED_QUORUM\\\". This function is used to generate a unique key for accessing the required quorum value.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"REQUIRED_QUORUM\\\".\"}},\"requiredSignaturesLength()\":{\"details\":\"Calculates the required number of signatures based on the quorum and the number of signers.\",\"returns\":{\"_0\":\"uint256 The current required number of signatures for a successful action.\"}},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"setCaption(string)\":{\"details\":\"Sets a new caption for the contract. Only the owner has the privilege to update the caption.\",\"params\":{\"caption\":\"The new caption to be set.\"}},\"setCreator(address)\":{\"details\":\"Sets a new creator for the contract. Only the owner has the privilege to update the creator address.\",\"params\":{\"account\":\"The new creator address to be set.\"}},\"setData(bytes)\":{\"details\":\"Sets new data for the contract. Only the owner has the privilege to update the data.\",\"params\":{\"data\":\"The new data to be set.\"}},\"setDuration(uint256)\":{\"details\":\"Sets a new duration in seconds for the contract. Only the owner has the privilege to update the duration.\",\"params\":{\"seconds_\":\"The new duration in seconds to be set.\"}},\"setMessage(string)\":{\"details\":\"Sets a new message for the contract. Only the owner has the privilege to update the message.\",\"params\":{\"message\":\"The new message to be set.\"}},\"setMultiSigProposalFactory(address)\":{\"details\":\"Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.\",\"params\":{\"account\":\"The address of the new MultiSigProposalFactory.\"}},\"setReferendumProposalFactory(address)\":{\"details\":\"Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.\",\"params\":{\"account\":\"The address of the new ReferendumProposalFactory.\"}},\"setRequiredQuorum(uint256)\":{\"details\":\"Sets a new required quorum in basis points for the contract. Only the owner has the privilege to update the required quorum.\",\"params\":{\"bp\":\"The new required quorum in basis points to be set.\"}},\"setStartTimestamp(uint256)\":{\"details\":\"Sets a new start timestamp for the contract. Only the owner has the privilege to update the start timestamp.\",\"params\":{\"timestamp\":\"The new start timestamp to be set.\"}},\"setTarget(address)\":{\"details\":\"Sets a new target address for the contract. Only the owner has the privilege to update the target address.\",\"params\":{\"account\":\"The new target address to be set.\"}},\"setTerminal(address)\":{\"details\":\"Sets the address of the terminal associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.\",\"params\":{\"account\":\"The address of the new terminal.\"}},\"sign()\":{\"details\":\"Signs the contract, indicating the sender's agreement or authorization. This function is typically called by a signer to provide their signature.\"},\"signatures(uint256)\":{\"details\":\"Retrieves the address of a signature based on its unique identifier.\",\"params\":{\"signatureId\":\"The identifier of the signature.\"},\"returns\":{\"_0\":\"address The address of the specified signature.\"}},\"signaturesKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"SIGNATURES\\\". This function is used to generate a unique key for storing signatures related to a process or action.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"SIGNATURES\\\".\"}},\"signaturesLength()\":{\"details\":\"Retrieves the total number of signatures collected.\",\"returns\":{\"_0\":\"uint256 The current length of the signatures set.\"}},\"signers(uint256)\":{\"details\":\"Retrieves the address of a signer based on their unique identifier.\",\"params\":{\"signerId\":\"The identifier of the signer.\"},\"returns\":{\"_0\":\"address The address of the specified signer.\"}},\"signersKey()\":{\"details\":\"Returns the keccak256 hash of the string \\\"SIGNERS\\\". This function is used to generate a unique key for managing a set of signers.\",\"returns\":{\"_0\":\"bytes32 The keccak256 hash of \\\"SIGNERS\\\".\"}},\"signersLength()\":{\"details\":\"Retrieves the total number of signers currently registered.\",\"returns\":{\"_0\":\"uint256 The current length of the signers set.\"}},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"},\"terminal()\":{\"details\":\"Retrieves the address of the terminal associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the terminal.\"}},\"terminalKey()\":{\"details\":\"Returns the key used to store the terminal address.\",\"returns\":{\"_0\":\"bytes32 The key for the terminal in keccak256 hash.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol\":\"IMultiSigProposalImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/access-control/IOwnable.sol\":{\"keccak256\":\"0x1d12c060033c0cf06f5cd380511eb0d6010576ad7a05fae23fcc3785621a3960\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://835791130f15ab2646166cc4b23fc2bbfb26cda6584c99958b2a06d8a01f34bb\",\"dweb:/ipfs/QmdVj4kNEYQNTUeYb2ay3NXTyWYNSLWbR1JeDyfjUda23a\"]},\"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol\":{\"keccak256\":\"0xb2e19e2a9fbc4a83a2374c73d42bf1ad33a71c823d5baba8ef701d51c61a89b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://031df183d113a16609f82cef93139493869f32ee3b60d4238dd5a21ea3b643de\",\"dweb:/ipfs/Qmb1nGQ6SMhuVEjXEWc9A1B6QeGDvWShmhqyccU1VYNwA2\"]},\"contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol\":{\"keccak256\":\"0x594e68db40bca93c97b3e35872bfbfd575fab5ad365f32df4e40c1febf88ec54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://538f8e5fdf2aaf9598d68c914efd61b136dc82c67af6320631f30c0b01d71f25\",\"dweb:/ipfs/QmY84gEEAAJx2Bqj6ARy4r2CbMjALYgiNk3vDhW44NCEdy\"]},\"contracts/polygon/interfaces/utils/IAddressBook.sol\":{\"keccak256\":\"0x48949b286894826ceca3e10c392c89b58c9a96e53c5a9f652d23fe6b20808061\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0a130270d281538df250808a43ebb4e5d9bdbc82d94cd79a8a582b7c1803933\",\"dweb:/ipfs/QmdptXfaHwTrL7wgqJMC6Xow4r65Njsyiuo1CmCZ83iXan\"]},\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]},\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]},\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]},\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]},\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"IAddressBook": {
					"abi": [
						{
							"inputs": [],
							"name": "multiSigProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "multiSigProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "referendumProposalFactoryKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminal",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "terminalKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"multiSigProposalFactory()": {
								"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the MultiSigProposalFactory."
								}
							},
							"multiSigProposalFactoryKey()": {
								"details": "Returns the key used to store the MultiSigProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
								}
							},
							"referendumProposalFactory()": {
								"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the ReferendumProposalFactory."
								}
							},
							"referendumProposalFactoryKey()": {
								"details": "Returns the key used to store the ReferendumProposalFactory address.",
								"returns": {
									"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
								}
							},
							"terminal()": {
								"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
								"returns": {
									"_0": "address The address of the terminal."
								}
							},
							"terminalKey()": {
								"details": "Returns the key used to store the terminal address.",
								"returns": {
									"_0": "bytes32 The key for the terminal in keccak256 hash."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"multiSigProposalFactory()": "0065d30d",
							"multiSigProposalFactoryKey()": "d63391c0",
							"referendumProposalFactory()": "2053aa53",
							"referendumProposalFactoryKey()": "dedaace5",
							"terminal()": "f45d0bc6",
							"terminalKey()": "41346f0a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"multiSigProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referendumProposalFactoryKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multiSigProposalFactory()\":{\"details\":\"Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the MultiSigProposalFactory.\"}},\"multiSigProposalFactoryKey()\":{\"details\":\"Returns the key used to store the MultiSigProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the MultiSigProposalFactory in keccak256 hash.\"}},\"referendumProposalFactory()\":{\"details\":\"Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the ReferendumProposalFactory.\"}},\"referendumProposalFactoryKey()\":{\"details\":\"Returns the key used to store the ReferendumProposalFactory address.\",\"returns\":{\"_0\":\"bytes32 The key for the ReferendumProposalFactory in keccak256 hash.\"}},\"terminal()\":{\"details\":\"Retrieves the address of the terminal associated with the MultiSigProposalFactory.\",\"returns\":{\"_0\":\"address The address of the terminal.\"}},\"terminalKey()\":{\"details\":\"Returns the key used to store the terminal address.\",\"returns\":{\"_0\":\"bytes32 The key for the terminal in keccak256 hash.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"terminalKey => address multiSigProposalFactoryKey => address referendumProposalFactorykey => address\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IAddressBook.sol\":\"IAddressBook\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IAddressBook.sol\":{\"keccak256\":\"0x48949b286894826ceca3e10c392c89b58c9a96e53c5a9f652d23fe6b20808061\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f0a130270d281538df250808a43ebb4e5d9bdbc82d94cd79a8a582b7c1803933\",\"dweb:/ipfs/QmdptXfaHwTrL7wgqJMC6Xow4r65Njsyiuo1CmCZ83iXan\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "terminalKey => address multiSigProposalFactoryKey => address referendumProposalFactorykey => address",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"IInitializable": {
					"abi": [
						{
							"inputs": [],
							"name": "initialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initializedKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"initialized()": {
								"details": "Checks if the contract has been initialized."
							},
							"initializedKey()": {
								"details": "Returns the key for checking if the contract has been initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"initialized()": "158ef93e",
							"initializedKey()": "6676e926"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializedKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialized()\":{\"details\":\"Checks if the contract has been initialized.\"},\"initializedKey()\":{\"details\":\"Returns the key for checking if the contract has been initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IInitializable.sol\":\"IInitializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IInitializable.sol\":{\"keccak256\":\"0xed82926c2f88f54b0b6816dab9e6f5ce04951a16b999b9c754e20c63cfd95a6d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99b19d82e26d62cfa81c4cae70364d0d3c0f97389b59c64a3e99744bea551512\",\"dweb:/ipfs/QmWEqLexuEqG6mnvf8UeegLxML28vqN9Uj2kkGGTPBkFA8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"ILowLevelCall": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								}
							],
							"name": "LowLevelCall",
							"type": "event"
						}
					],
					"devdoc": {
						"events": {
							"LowLevelCall(address,bytes,bytes)": {
								"details": "Emitted when a low-level call is executed.",
								"params": {
									"data": "The data passed to the call.",
									"response": "The response received from the call.",
									"target": "The target address of the call."
								}
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"name\":\"LowLevelCall\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"LowLevelCall(address,bytes,bytes)\":{\"details\":\"Emitted when a low-level call is executed.\",\"params\":{\"data\":\"The data passed to the call.\",\"response\":\"The response received from the call.\",\"target\":\"The target address of the call.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":\"ILowLevelCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ILowLevelCall.sol\":{\"keccak256\":\"0x6684b4b00c87738eeace5d79fe3d7f24adcd8a4c40d37a005ccb30b233371756\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://90643fe2567c559774ae24670ad0be2a94b83e95cd2cb66a3d386f799d410a49\",\"dweb:/ipfs/QmbYLM1e9CaE8LcWoCj18QWmNXXMuh1P31o2numJUz9iHo\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"IPayload": {
					"abi": [
						{
							"inputs": [],
							"name": "data",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "dataKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "target",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "targetKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"data()": {
								"details": "Returns the current data bytes."
							},
							"dataKey()": {
								"details": "Returns the key for storing the data."
							},
							"target()": {
								"details": "Returns the current target address."
							},
							"targetKey()": {
								"details": "Returns the key for storing the target address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"data()": "73d4a13a",
							"dataKey()": "b859dd3e",
							"target()": "d4b83992",
							"targetKey()": "a73e8e36"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"data()\":{\"details\":\"Returns the current data bytes.\"},\"dataKey()\":{\"details\":\"Returns the key for storing the data.\"},\"target()\":{\"details\":\"Returns the current target address.\"},\"targetKey()\":{\"details\":\"Returns the key for storing the target address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"targetKey => address dataKey => bytes\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/IPayload.sol\":\"IPayload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/IPayload.sol\":{\"keccak256\":\"0x87e1549392f24937f337d19f6d907ee4a4174d6747ba3c5fd755f1829544dc0e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61dad97e83ab8eb2347a5dd53725e6ae4df9f8c4b9dcc2deb8bcf675d37a76a8\",\"dweb:/ipfs/QmXV1uLdsjrQASPc3PUuMy4BVXKJ8ruvr2jM3k4STVC2mf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "targetKey => address dataKey => bytes",
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"ITag": {
					"abi": [
						{
							"inputs": [],
							"name": "caption",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "captionKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creator",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "creatorKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "message",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "messageKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"caption()": {
								"details": "Returns the caption associated with the proposal."
							},
							"captionKey()": {
								"details": "Returns the key for storing the caption in storage."
							},
							"creator()": {
								"details": "Returns the address of the creator of the proposal."
							},
							"creatorKey()": {
								"details": "Returns the key for storing the creator in storage."
							},
							"message()": {
								"details": "Returns the message associated with the proposal."
							},
							"messageKey()": {
								"details": "Returns the key for storing the message in storage."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"caption()": "39540e5e",
							"captionKey()": "476221fe",
							"creator()": "02d05d3f",
							"creatorKey()": "5d32eeb5",
							"message()": "e21f37ce",
							"messageKey()": "58221c6b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"caption\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"caption()\":{\"details\":\"Returns the caption associated with the proposal.\"},\"captionKey()\":{\"details\":\"Returns the key for storing the caption in storage.\"},\"creator()\":{\"details\":\"Returns the address of the creator of the proposal.\"},\"creatorKey()\":{\"details\":\"Returns the key for storing the creator in storage.\"},\"message()\":{\"details\":\"Returns the message associated with the proposal.\"},\"messageKey()\":{\"details\":\"Returns the key for storing the message in storage.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ITag.sol\":\"ITag\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ITag.sol\":{\"keccak256\":\"0x4f1b30e16586aa23c0c12ce3d5bdd2ed92cef4e1f52c91cabfe32449eaab1e35\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c34e1a31840ed1f7d3a3421dbd1f71a5fb4f95bab6e866b38880a92b7478d9a4\",\"dweb:/ipfs/Qmd4koFDeEgxPV8EPd8YMPZoiE8RoYC72JsLtTLxaJRjkM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"ITimer": {
					"abi": [
						{
							"inputs": [],
							"name": "counting",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "duration",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "durationKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ended",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "secondsLeft",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestampKey",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "started",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"counting()": {
								"details": "Checks if the timer is actively counting."
							},
							"duration()": {
								"details": "Returns the duration."
							},
							"durationKey()": {
								"details": "Returns the key for the duration."
							},
							"endTimestamp()": {
								"details": "Returns the end timestamp."
							},
							"ended()": {
								"details": "Checks if the timer has ended."
							},
							"secondsLeft()": {
								"details": "Calculates the remaining seconds in the timer."
							},
							"startTimestamp()": {
								"details": "Returns the start timestamp."
							},
							"startTimestampKey()": {
								"details": "Returns the key for the start timestamp."
							},
							"started()": {
								"details": "Checks if the timer has started."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"counting()": "8554b847",
							"duration()": "0fb5a6b4",
							"durationKey()": "902b29ed",
							"endTimestamp()": "a85adeab",
							"ended()": "12fa6feb",
							"secondsLeft()": "86a83735",
							"startTimestamp()": "e6fd48bc",
							"startTimestampKey()": "6c6169bd",
							"started()": "1f2698ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"counting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestampKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"counting()\":{\"details\":\"Checks if the timer is actively counting.\"},\"duration()\":{\"details\":\"Returns the duration.\"},\"durationKey()\":{\"details\":\"Returns the key for the duration.\"},\"endTimestamp()\":{\"details\":\"Returns the end timestamp.\"},\"ended()\":{\"details\":\"Checks if the timer has ended.\"},\"secondsLeft()\":{\"details\":\"Calculates the remaining seconds in the timer.\"},\"startTimestamp()\":{\"details\":\"Returns the start timestamp.\"},\"startTimestampKey()\":{\"details\":\"Returns the key for the start timestamp.\"},\"started()\":{\"details\":\"Checks if the timer has started.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon/interfaces/utils/ITimer.sol\":\"ITimer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/polygon/interfaces/utils/ITimer.sol\":{\"keccak256\":\"0x60eb778cca072d83836fb48afd64eef3d6d690f356c1faa076412ef2c484d563\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ea4985c584bf476e3943fd14438fad3b32031a67ebb0af741d850740d17b158\",\"dweb:/ipfs/QmbwabMtAWiEaDP9sZVTfueZKPXXsCcZJkknSgoV9W9ncS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/polygon/interfaces/access-control/IOwnable.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/access-control/IOwnable.sol",
					"exportedSymbols": {
						"IOwnable": [
							32
						]
					},
					"id": 33,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IOwnable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:29:0",
								"text": " ownerKey => address"
							},
							"fullyImplemented": false,
							"id": 32,
							"linearizedBaseContracts": [
								32
							],
							"name": "IOwnable",
							"nameLocation": "97:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "113:180:0",
										"text": " @dev Emitted when ownership of the contract is transferred.\n @param oldOwner The address of the old owner.\n @param newOwner The address of the new owner."
									},
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 9,
									"name": "OwnershipTransferred",
									"nameLocation": "304:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "oldOwner",
												"nameLocation": "341:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "325:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "367:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 9,
												"src": "351:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "351:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:52:0"
									},
									"src": "298:79:0"
								},
								{
									"documentation": {
										"id": 10,
										"nodeType": "StructuredDocumentation",
										"src": "383:112:0",
										"text": " @dev Returns the key for the owner in the storage mapping.\n @return The key for the owner."
									},
									"functionSelector": "8133f6b1",
									"id": 15,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerkey",
									"nameLocation": "509:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "517:2:0"
									},
									"returnParameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "543:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 12,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "543:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "542:9:0"
									},
									"scope": 32,
									"src": "500:52:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "558:112:0",
										"text": " @dev Returns the current owner of the contract.\n @return The address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 21,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "684:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "689:2:0"
									},
									"returnParameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "715:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:9:0"
									},
									"scope": 32,
									"src": "675:49:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "730:81:0",
										"text": " @dev Renounces ownership, leaving the contract without an owner."
									},
									"functionSelector": "715018a6",
									"id": 25,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "renounceOwnership",
									"nameLocation": "825:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "842:2:0"
									},
									"returnParameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "853:0:0"
									},
									"scope": 32,
									"src": "816:38:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "860:135:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 31,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferOwnership",
									"nameLocation": "1009:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1035:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "1027:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1026:18:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1053:0:0"
									},
									"scope": 32,
									"src": "1000:54:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 33,
							"src": "87:969:0",
							"usedErrors": []
						}
					],
					"src": "32:1024:0"
				},
				"id": 0
			},
			"contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol",
					"exportedSymbols": {
						"IInitializable": [
							378
						],
						"ILowLevelCall": [
							390
						],
						"IMultiSigProposal": [
							275
						],
						"IOwnable": [
							32
						],
						"IPayload": [
							418
						],
						"ITag": [
							457
						],
						"ITimer": [
							514
						]
					},
					"id": 276,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 34,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ITag.sol",
							"file": "contracts/polygon/interfaces/utils/ITag.sol",
							"id": 35,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 458,
							"src": "56:53:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IPayload.sol",
							"file": "contracts/polygon/interfaces/utils/IPayload.sol",
							"id": 36,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 419,
							"src": "110:57:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ITimer.sol",
							"file": "contracts/polygon/interfaces/utils/ITimer.sol",
							"id": 37,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 515,
							"src": "168:55:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
							"file": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
							"id": 38,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 391,
							"src": "224:62:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IInitializable.sol",
							"file": "contracts/polygon/interfaces/utils/IInitializable.sol",
							"id": 39,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 379,
							"src": "287:63:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/access-control/IOwnable.sol",
							"file": "contracts/polygon/interfaces/access-control/IOwnable.sol",
							"id": 40,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 276,
							"sourceUnit": 33,
							"src": "351:66:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 41,
										"name": "ITag",
										"nameLocations": [
											"454:4:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 457,
										"src": "454:4:1"
									},
									"id": 42,
									"nodeType": "InheritanceSpecifier",
									"src": "454:4:1"
								},
								{
									"baseName": {
										"id": 43,
										"name": "IPayload",
										"nameLocations": [
											"464:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 418,
										"src": "464:8:1"
									},
									"id": 44,
									"nodeType": "InheritanceSpecifier",
									"src": "464:8:1"
								},
								{
									"baseName": {
										"id": 45,
										"name": "ITimer",
										"nameLocations": [
											"478:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 514,
										"src": "478:6:1"
									},
									"id": 46,
									"nodeType": "InheritanceSpecifier",
									"src": "478:6:1"
								},
								{
									"baseName": {
										"id": 47,
										"name": "ILowLevelCall",
										"nameLocations": [
											"490:13:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 390,
										"src": "490:13:1"
									},
									"id": 48,
									"nodeType": "InheritanceSpecifier",
									"src": "490:13:1"
								},
								{
									"baseName": {
										"id": 49,
										"name": "IInitializable",
										"nameLocations": [
											"509:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 378,
										"src": "509:14:1"
									},
									"id": 50,
									"nodeType": "InheritanceSpecifier",
									"src": "509:14:1"
								},
								{
									"baseName": {
										"id": 51,
										"name": "IOwnable",
										"nameLocations": [
											"529:8:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 32,
										"src": "529:8:1"
									},
									"id": 52,
									"nodeType": "InheritanceSpecifier",
									"src": "529:8:1"
								}
							],
							"canonicalName": "IMultiSigProposal",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 275,
							"linearizedBaseContracts": [
								275,
								32,
								378,
								390,
								514,
								418,
								457
							],
							"name": "IMultiSigProposal",
							"nameLocation": "429:17:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "545:147:1",
										"text": " @dev Emitted when a new signer is added.\n @param signer The address of the added signer. Indexed for efficient log filtering."
									},
									"eventSelector": "47d1c22a25bb3a5d4e481b9b1e6944c2eade3181a0a20b495ed61d35b5323f24",
									"id": 57,
									"name": "SignerAdded",
									"nameLocation": "703:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"indexed": true,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "731:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "715:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "715:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "714:24:1"
									},
									"src": "697:42:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 58,
										"nodeType": "StructuredDocumentation",
										"src": "745:143:1",
										"text": " @dev Emitted when a signing action occurs.\n @param signer The address of the signer. Indexed for efficient log filtering."
									},
									"eventSelector": "568aebae0f7dc6c96727fb4cdfdf7add45fec43fffd69b3fa71ea0898a27f8cc",
									"id": 62,
									"name": "Signed",
									"nameLocation": "899:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"indexed": true,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "922:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 62,
												"src": "906:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "906:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "905:24:1"
									},
									"src": "893:37:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "936:167:1",
										"text": " @dev Emitted when a condition or step is successfully passed.\n This event signifies the successful completion of a specific action or checkpoint."
									},
									"eventSelector": "5aa8a44622c21066164c551945caf713792e9fbee8ce54bb83cb3d5410549dfe",
									"id": 65,
									"name": "Passed",
									"nameLocation": "1114:6:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1120:2:1"
									},
									"src": "1108:15:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 66,
										"nodeType": "StructuredDocumentation",
										"src": "1129:176:1",
										"text": " @dev Emitted when an execution or operation is successfully completed.\n This event signals the successful execution of a particular functionality or task."
									},
									"eventSelector": "68f46c45a243a0e9065a97649faf9a5afe1692f2679e650c2f853b9cd734cc0e",
									"id": 68,
									"name": "Executed",
									"nameLocation": "1316:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1324:2:1"
									},
									"src": "1310:17:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1333:151:1",
										"text": " @dev Emitted when a caption is set.\n @param caption The string representing the new caption. Indexed for efficient log filtering."
									},
									"eventSelector": "7935b61140db6ed0dbbd02b692adfaa25439ab982bd6eea1879ae7be537cbfed",
									"id": 73,
									"name": "CaptionSet",
									"nameLocation": "1495:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"indexed": true,
												"mutability": "mutable",
												"name": "caption",
												"nameLocation": "1521:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "1506:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 70,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1506:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1505:24:1"
									},
									"src": "1489:41:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "1536:151:1",
										"text": " @dev Emitted when a message is set.\n @param message The string representing the new message. Indexed for efficient log filtering."
									},
									"eventSelector": "3d7f415c35b881f2d0a109b3d9a1377e1e14afec5cc1fd06b563ed160c5e2630",
									"id": 78,
									"name": "MessageSet",
									"nameLocation": "1698:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"indexed": true,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "1724:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "1709:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 75,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1709:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1708:24:1"
									},
									"src": "1692:41:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "1739:158:1",
										"text": " @dev Emitted when the creator address is set.\n @param creator The address of the newly set creator. Indexed for efficient log filtering."
									},
									"eventSelector": "d4396a7e1ee1013c611432f59b862687db5c35b5ae1fd43334ccba88fac8e678",
									"id": 83,
									"name": "CreatorSet",
									"nameLocation": "1908:10:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"indexed": true,
												"mutability": "mutable",
												"name": "creator",
												"nameLocation": "1935:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "1919:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1918:25:1"
									},
									"src": "1902:42:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "1950:155:1",
										"text": " @dev Emitted when the target address is set.\n @param target The address of the newly set target. Indexed for efficient log filtering."
									},
									"eventSelector": "3bfb4bbf112628248058745a3c57e35b13369386e474b8e56c552f3063a4a196",
									"id": 88,
									"name": "TargetSet",
									"nameLocation": "2116:9:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"indexed": true,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2142:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "2126:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:24:1"
									},
									"src": "2110:40:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 89,
										"nodeType": "StructuredDocumentation",
										"src": "2156:147:1",
										"text": " @dev Emitted when a data address is set.\n @param data The address of the newly set data. Indexed for efficient log filtering."
									},
									"eventSelector": "3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec",
									"id": 93,
									"name": "DataSet",
									"nameLocation": "2314:7:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"indexed": true,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2338:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "2322:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 90,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2322:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2321:22:1"
									},
									"src": "2308:36:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "2350:178:1",
										"text": " @dev Emitted when the start timestamp is set.\n @param timestamp The uint256 representing the newly set start timestamp. Indexed for efficient log filtering."
									},
									"eventSelector": "2b9ea1248daf3a58246ca1b3401344f8f1809f146bad26ccc6059cba160ed221",
									"id": 98,
									"name": "StartTimestampSet",
									"nameLocation": "2539:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 96,
												"indexed": true,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "2573:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "2557:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 95,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2557:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2556:27:1"
									},
									"src": "2533:51:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2590:185:1",
										"text": " @dev Emitted when the duration in seconds is set.\n @param seconds_ The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering."
									},
									"eventSelector": "234a8b70e70d5fc5ace24d19c8c988edfd5dc006d6f8356cab0273e2f084a909",
									"id": 103,
									"name": "DurationSet",
									"nameLocation": "2786:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"indexed": true,
												"mutability": "mutable",
												"name": "seconds_",
												"nameLocation": "2814:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "2798:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2798:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2797:26:1"
									},
									"src": "2780:44:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "2830:178:1",
										"text": " @dev Emitted when the required quorum is set.\n @param bp The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering."
									},
									"eventSelector": "79ba8674a90cd5c280a86c18d9b4fa843c1bc0a11c3afaf2c50df52c0ca0fb06",
									"id": 108,
									"name": "RequiredQuorumSet",
									"nameLocation": "3019:17:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "3053:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "3037:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3037:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3036:20:1"
									},
									"src": "3013:44:1"
								},
								{
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "3063:238:1",
										"text": " @dev Returns the keccak256 hash of the string \"REQUIRED_QUORUM\".\n This function is used to generate a unique key for accessing the required quorum value.\n @return bytes32 The keccak256 hash of \"REQUIRED_QUORUM\"."
									},
									"functionSelector": "372fdd00",
									"id": 114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredQuorumKey",
									"nameLocation": "3315:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3332:2:1"
									},
									"returnParameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 114,
												"src": "3358:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3358:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3357:9:1"
									},
									"scope": 275,
									"src": "3306:61:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 115,
										"nodeType": "StructuredDocumentation",
										"src": "3373:212:1",
										"text": " @dev Returns the keccak256 hash of the string \"SIGNERS\".\n This function is used to generate a unique key for managing a set of signers.\n @return bytes32 The keccak256 hash of \"SIGNERS\"."
									},
									"functionSelector": "c7ac0917",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signersKey",
									"nameLocation": "3599:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3609:2:1"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "3635:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 117,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3635:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3634:9:1"
									},
									"scope": 275,
									"src": "3590:54:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "3650:242:1",
										"text": " @dev Returns the keccak256 hash of the string \"SIGNATURES\".\n This function is used to generate a unique key for storing signatures related to a process or action.\n @return bytes32 The keccak256 hash of \"SIGNATURES\"."
									},
									"functionSelector": "5fabb1bf",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signaturesKey",
									"nameLocation": "3906:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3919:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "3945:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 123,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3945:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3944:9:1"
									},
									"scope": 275,
									"src": "3897:57:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "3960:244:1",
										"text": " @dev Returns the keccak256 hash of the string \"PASSED\".\n This function is used to generate a unique key for tracking the completion status of a specific action or step.\n @return bytes32 The keccak256 hash of \"PASSED\"."
									},
									"functionSelector": "becfa6c0",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "passedKey",
									"nameLocation": "4218:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4227:2:1"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "4253:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 129,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:9:1"
									},
									"scope": 275,
									"src": "4209:53:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "4268:250:1",
										"text": " @dev Returns the keccak256 hash of the string \"EXECUTED\".\n This function is used to generate a unique key for tracking the execution status of a specific operation or task.\n @return bytes32 The keccak256 hash of \"EXECUTED\"."
									},
									"functionSelector": "7870dfae",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executedKey",
									"nameLocation": "4532:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4543:2:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "4569:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 135,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4569:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4568:9:1"
									},
									"scope": 275,
									"src": "4523:55:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "4584:128:1",
										"text": " @dev Retrieves the required quorum value from storage.\n @return uint256 The current required quorum value."
									},
									"functionSelector": "7036014e",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredQuorum",
									"nameLocation": "4726:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4740:2:1"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "4766:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4766:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4765:9:1"
									},
									"scope": 275,
									"src": "4717:58:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "4781:202:1",
										"text": " @dev Calculates the required number of signatures based on the quorum and the number of signers.\n @return uint256 The current required number of signatures for a successful action."
									},
									"functionSelector": "6d22a0c7",
									"id": 150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requiredSignaturesLength",
									"nameLocation": "4997:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5021:2:1"
									},
									"returnParameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "5047:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5047:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5046:9:1"
									},
									"scope": 275,
									"src": "4988:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "5062:189:1",
										"text": " @dev Checks whether the number of collected signatures meets or exceeds the required threshold.\n @return bool True if there are sufficient signatures, otherwise false."
									},
									"functionSelector": "8bc301fd",
									"id": 156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasSufficientSignatures",
									"nameLocation": "5265:23:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5288:2:1"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "5314:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 153,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5314:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5313:6:1"
									},
									"scope": 275,
									"src": "5256:64:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "5326:200:1",
										"text": " @dev Retrieves the address of a signer based on their unique identifier.\n @param signerId The identifier of the signer.\n @return address The address of the specified signer."
									},
									"functionSelector": "2079fb9a",
									"id": 164,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signers",
									"nameLocation": "5540:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "signerId",
												"nameLocation": "5556:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "5548:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5548:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5547:18:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "5589:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5589:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5588:9:1"
									},
									"scope": 275,
									"src": "5531:67:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "5604:142:1",
										"text": " @dev Retrieves the total number of signers currently registered.\n @return uint256 The current length of the signers set."
									},
									"functionSelector": "41f684f3",
									"id": 170,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signersLength",
									"nameLocation": "5760:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5773:2:1"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "5799:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5799:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5798:9:1"
									},
									"scope": 275,
									"src": "5751:57:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "5814:178:1",
										"text": " @dev Checks if an address is a registered signer.\n @param account The address to check.\n @return bool True if the address is a signer, otherwise false."
									},
									"functionSelector": "7df73e27",
									"id": 178,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isSigner",
									"nameLocation": "6006:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6023:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "6015:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6015:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6014:17:1"
									},
									"returnParameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "6055:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 175,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6055:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6054:6:1"
									},
									"scope": 275,
									"src": "5997:64:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "6067:210:1",
										"text": " @dev Retrieves the address of a signature based on its unique identifier.\n @param signatureId The identifier of the signature.\n @return address The address of the specified signature."
									},
									"functionSelector": "8be10194",
									"id": 186,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signatures",
									"nameLocation": "6291:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "signatureId",
												"nameLocation": "6310:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "6302:19:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6301:21:1"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "6346:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6346:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6345:9:1"
									},
									"scope": 275,
									"src": "6282:73:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "6361:137:1",
										"text": " @dev Retrieves the total number of signatures collected.\n @return uint256 The current length of the signatures set."
									},
									"functionSelector": "0077158b",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "signaturesLength",
									"nameLocation": "6512:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6528:2:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "6554:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6554:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6553:9:1"
									},
									"scope": 275,
									"src": "6503:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "6569:187:1",
										"text": " @dev Checks if an address has already provided a signature.\n @param account The address to check.\n @return bool True if the address has signed, otherwise false."
									},
									"functionSelector": "bf6a1413",
									"id": 200,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasSigned",
									"nameLocation": "6770:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "6788:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "6780:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6780:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6779:17:1"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "6820:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 197,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6820:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:6:1"
									},
									"scope": 275,
									"src": "6761:65:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "6832:162:1",
										"text": " @dev Checks if a specific action or step has been successfully passed.\n @return bool True if the action or step has passed, otherwise false."
									},
									"functionSelector": "a05b5c30",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "passed",
									"nameLocation": "7008:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7014:2:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "7040:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 203,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7040:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7039:6:1"
									},
									"scope": 275,
									"src": "6999:47:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "7052:177:1",
										"text": " @dev Checks if a specific operation or task has been successfully executed.\n @return bool True if the operation or task has been executed, otherwise false."
									},
									"functionSelector": "31a38c89",
									"id": 212,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "executed",
									"nameLocation": "7243:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7251:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "7277:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 209,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7277:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7276:6:1"
									},
									"scope": 275,
									"src": "7234:49:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "7289:167:1",
										"text": " @dev Initializes the contract, setting up any initial configurations or values.\n This function is typically called once, often during deployment."
									},
									"functionSelector": "8129fc1c",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialize",
									"nameLocation": "7470:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 214,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7480:2:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7491:0:1"
									},
									"scope": 275,
									"src": "7461:31:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "7498:168:1",
										"text": " @dev Sets a new caption for the contract.\n Only the owner has the privilege to update the caption.\n @param caption The new caption to be set."
									},
									"functionSelector": "04b9f2f0",
									"id": 222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCaption",
									"nameLocation": "7680:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "caption",
												"nameLocation": "7705:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "7691:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 218,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7691:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7690:23:1"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7722:0:1"
									},
									"scope": 275,
									"src": "7671:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "7729:168:1",
										"text": " @dev Sets a new message for the contract.\n Only the owner has the privilege to update the message.\n @param message The new message to be set."
									},
									"functionSelector": "368b8772",
									"id": 228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setMessage",
									"nameLocation": "7911:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "7936:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "7922:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 224,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7922:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7921:23:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7953:0:1"
									},
									"scope": 275,
									"src": "7902:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 229,
										"nodeType": "StructuredDocumentation",
										"src": "7960:184:1",
										"text": " @dev Sets a new creator for the contract.\n Only the owner has the privilege to update the creator address.\n @param account The new creator address to be set."
									},
									"functionSelector": "3f516018",
									"id": 234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCreator",
									"nameLocation": "8158:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8177:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "8169:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8169:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8168:17:1"
									},
									"returnParameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8194:0:1"
									},
									"scope": 275,
									"src": "8149:46:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "8201:189:1",
										"text": " @dev Sets a new target address for the contract.\n Only the owner has the privilege to update the target address.\n @param account The new target address to be set."
									},
									"functionSelector": "776d1a01",
									"id": 240,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTarget",
									"nameLocation": "8404:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8422:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "8414:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8414:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8413:17:1"
									},
									"returnParameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8439:0:1"
									},
									"scope": 275,
									"src": "8395:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "8446:154:1",
										"text": " @dev Sets new data for the contract.\n Only the owner has the privilege to update the data.\n @param data The new data to be set."
									},
									"functionSelector": "ab62f0e1",
									"id": 246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setData",
									"nameLocation": "8614:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8635:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 246,
												"src": "8622:17:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 242,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8622:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8621:19:1"
									},
									"returnParameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8649:0:1"
									},
									"scope": 275,
									"src": "8605:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 247,
										"nodeType": "StructuredDocumentation",
										"src": "8656:194:1",
										"text": " @dev Sets a new start timestamp for the contract.\n Only the owner has the privilege to update the start timestamp.\n @param timestamp The new start timestamp to be set."
									},
									"functionSelector": "c44bef75",
									"id": 252,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setStartTimestamp",
									"nameLocation": "8864:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "timestamp",
												"nameLocation": "8890:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "8882:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8882:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8881:19:1"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8909:0:1"
									},
									"scope": 275,
									"src": "8855:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 253,
										"nodeType": "StructuredDocumentation",
										"src": "8916:194:1",
										"text": " @dev Sets a new duration in seconds for the contract.\n Only the owner has the privilege to update the duration.\n @param seconds_ The new duration in seconds to be set."
									},
									"functionSelector": "f6be71d1",
									"id": 258,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setDuration",
									"nameLocation": "9124:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "seconds_",
												"nameLocation": "9144:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "9136:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 254,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9136:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9135:18:1"
									},
									"returnParameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9162:0:1"
									},
									"scope": 275,
									"src": "9115:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 259,
										"nodeType": "StructuredDocumentation",
										"src": "9169:219:1",
										"text": " @dev Sets a new required quorum in basis points for the contract.\n Only the owner has the privilege to update the required quorum.\n @param bp The new required quorum in basis points to be set."
									},
									"functionSelector": "fc19e8ed",
									"id": 264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRequiredQuorum",
									"nameLocation": "9402:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "bp",
												"nameLocation": "9428:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "9420:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9420:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9419:12:1"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9440:0:1"
									},
									"scope": 275,
									"src": "9393:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "9447:180:1",
										"text": " @dev Adds a new signer to the contract.\n Only the owner has the privilege to add a new signer.\n @param account The address of the new signer to be added."
									},
									"functionSelector": "eb12d61e",
									"id": 270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addSigner",
									"nameLocation": "9641:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9659:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "9651:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 266,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9651:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9650:17:1"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9676:0:1"
									},
									"scope": 275,
									"src": "9632:45:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 271,
										"nodeType": "StructuredDocumentation",
										"src": "9683:173:1",
										"text": " @dev Signs the contract, indicating the sender's agreement or authorization.\n This function is typically called by a signer to provide their signature."
									},
									"functionSelector": "2ca15122",
									"id": 274,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "sign",
									"nameLocation": "9870:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9874:2:1"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9885:0:1"
									},
									"scope": 275,
									"src": "9861:25:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 276,
							"src": "419:9469:1",
							"usedErrors": []
						}
					],
					"src": "32:9856:1"
				},
				"id": 1
			},
			"contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/main/proposal/IMultiSigProposalImplementation.sol",
					"exportedSymbols": {
						"IAddressBook": [
							363
						],
						"IInitializable": [
							378
						],
						"ILowLevelCall": [
							390
						],
						"IMultiSigProposal": [
							275
						],
						"IMultiSigProposalImplementation": [
							323
						],
						"IOwnable": [
							32
						],
						"IPayload": [
							418
						],
						"ITag": [
							457
						],
						"ITimer": [
							514
						]
					},
					"id": 324,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 277,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:2"
						},
						{
							"absolutePath": "contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol",
							"file": "contracts/polygon/interfaces/governance/proposal/IMultiSigProposal.sol",
							"id": 278,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 324,
							"sourceUnit": 276,
							"src": "56:80:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/polygon/interfaces/utils/IAddressBook.sol",
							"file": "contracts/polygon/interfaces/utils/IAddressBook.sol",
							"id": 279,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 324,
							"sourceUnit": 364,
							"src": "137:61:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 280,
										"name": "IMultiSigProposal",
										"nameLocations": [
											"245:17:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 275,
										"src": "245:17:2"
									},
									"id": 281,
									"nodeType": "InheritanceSpecifier",
									"src": "245:17:2"
								},
								{
									"baseName": {
										"id": 282,
										"name": "IAddressBook",
										"nameLocations": [
											"264:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 363,
										"src": "264:12:2"
									},
									"id": 283,
									"nodeType": "InheritanceSpecifier",
									"src": "264:12:2"
								}
							],
							"canonicalName": "IMultiSigProposalImplementation",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 323,
							"linearizedBaseContracts": [
								323,
								363,
								275,
								32,
								378,
								390,
								514,
								418,
								457
							],
							"name": "IMultiSigProposalImplementation",
							"nameLocation": "210:31:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "288:117:2",
										"text": " @dev Emitted when the terminal address is set.\n @param account The address of the new terminal."
									},
									"eventSelector": "da041d56f89460d53852e1b9f9576dc62eb726bde1008706dd87cdfe647a6973",
									"id": 288,
									"name": "TerminalSet",
									"nameLocation": "416:11:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "444:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "428:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "427:25:2"
									},
									"src": "410:43:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "459:147:2",
										"text": " @dev Emitted when the MultiSigProposalFactory address is set.\n @param account The address of the new MultiSigProposalFactory."
									},
									"eventSelector": "d09c0624caca0531ea4b7bd26613634cf337f4065ef6aff84501cbc8182c5355",
									"id": 293,
									"name": "MultiSigProposalFactorySet",
									"nameLocation": "617:26:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "644:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "644:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "643:25:2"
									},
									"src": "611:58:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "675:151:2",
										"text": " @dev Emitted when the ReferendumProposalFactory address is set.\n @param account The address of the new ReferendumProposalFactory."
									},
									"eventSelector": "35c343c1b11e5cc8ae3b77869ed9a3d1c4191286edcfa2ad41e689ab012eadc1",
									"id": 298,
									"name": "ReferendumProposalFactorySet",
									"nameLocation": "837:28:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "882:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "866:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "866:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "865:25:2"
									},
									"src": "831:60:2"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "897:276:2",
										"text": " @dev Executes the MultiSigProposal and triggers additional actions.\n Calls the internal _execute function to mark the proposal as executed.\n Emits an Executed event.\n TODO: Create another referendum proposal using the ReferendumProposalFactory."
									},
									"functionSelector": "61461954",
									"id": 304,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "1187:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1194:2:2"
									},
									"returnParameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 304,
												"src": "1215:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1215:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1214:9:2"
									},
									"scope": 323,
									"src": "1178:46:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 305,
										"nodeType": "StructuredDocumentation",
										"src": "1230:209:2",
										"text": " @dev Sets the address of the terminal associated with the MultiSigProposalFactory.\n Only the owner is allowed to perform this action.\n @param account The address of the new terminal."
									},
									"functionSelector": "bd9f98e1",
									"id": 310,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTerminal",
									"nameLocation": "1453:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1473:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 310,
												"src": "1465:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1464:17:2"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1490:0:2"
									},
									"scope": 323,
									"src": "1444:47:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 311,
										"nodeType": "StructuredDocumentation",
										"src": "1497:239:2",
										"text": " @dev Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n Only the owner is allowed to perform this action.\n @param account The address of the new MultiSigProposalFactory."
									},
									"functionSelector": "297da9e1",
									"id": 316,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setMultiSigProposalFactory",
									"nameLocation": "1750:26:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1785:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 316,
												"src": "1777:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1777:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1776:17:2"
									},
									"returnParameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1802:0:2"
									},
									"scope": 323,
									"src": "1741:62:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 317,
										"nodeType": "StructuredDocumentation",
										"src": "1809:243:2",
										"text": " @dev Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n Only the owner is allowed to perform this action.\n @param account The address of the new ReferendumProposalFactory."
									},
									"functionSelector": "c138d1a0",
									"id": 322,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setReferendumProposalFactory",
									"nameLocation": "2066:28:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "2103:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 322,
												"src": "2095:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2095:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2094:17:2"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2120:0:2"
									},
									"scope": 323,
									"src": "2057:64:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 324,
							"src": "200:1923:2",
							"usedErrors": []
						}
					],
					"src": "32:2091:2"
				},
				"id": 2
			},
			"contracts/polygon/interfaces/utils/IAddressBook.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IAddressBook.sol",
					"exportedSymbols": {
						"IAddressBook": [
							363
						]
					},
					"id": 364,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 325,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IAddressBook",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 326,
								"nodeType": "StructuredDocumentation",
								"src": "57:114:3",
								"text": " terminalKey => address\n multiSigProposalFactoryKey => address\n referendumProposalFactorykey => address"
							},
							"fullyImplemented": false,
							"id": 363,
							"linearizedBaseContracts": [
								363
							],
							"name": "IAddressBook",
							"nameLocation": "182:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 327,
										"nodeType": "StructuredDocumentation",
										"src": "202:139:3",
										"text": " @dev Returns the key used to store the terminal address.\n @return bytes32 The key for the terminal in keccak256 hash."
									},
									"functionSelector": "41346f0a",
									"id": 332,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminalKey",
									"nameLocation": "355:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "366:2:3"
									},
									"returnParameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 332,
												"src": "392:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 329,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "392:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "391:9:3"
									},
									"scope": 363,
									"src": "346:55:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "407:169:3",
										"text": " @dev Returns the key used to store the MultiSigProposalFactory address.\n @return bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
									},
									"functionSelector": "d63391c0",
									"id": 338,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multiSigProposalFactoryKey",
									"nameLocation": "590:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "616:2:3"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 338,
												"src": "642:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 335,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "642:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "641:9:3"
									},
									"scope": 363,
									"src": "581:70:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "657:173:3",
										"text": " @dev Returns the key used to store the ReferendumProposalFactory address.\n @return bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
									},
									"functionSelector": "dedaace5",
									"id": 344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "referendumProposalFactoryKey",
									"nameLocation": "844:28:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "872:2:3"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "898:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 341,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "897:9:3"
									},
									"scope": 363,
									"src": "835:72:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "913:155:3",
										"text": " @dev Retrieves the address of the terminal associated with the MultiSigProposalFactory.\n @return address The address of the terminal."
									},
									"functionSelector": "f45d0bc6",
									"id": 350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "terminal",
									"nameLocation": "1082:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1090:2:3"
									},
									"returnParameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 350,
												"src": "1116:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 347,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1116:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1115:9:3"
									},
									"scope": 363,
									"src": "1073:52:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "1131:185:3",
										"text": " @dev Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.\n @return address The address of the MultiSigProposalFactory."
									},
									"functionSelector": "0065d30d",
									"id": 356,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "multiSigProposalFactory",
									"nameLocation": "1330:23:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1353:2:3"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "1379:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1379:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1378:9:3"
									},
									"scope": 363,
									"src": "1321:67:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "1394:189:3",
										"text": " @dev Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.\n @return address The address of the ReferendumProposalFactory."
									},
									"functionSelector": "2053aa53",
									"id": 362,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "referendumProposalFactory",
									"nameLocation": "1597:25:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1622:2:3"
									},
									"returnParameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "1648:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1648:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1647:9:3"
									},
									"scope": 363,
									"src": "1588:69:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 364,
							"src": "172:1487:3",
							"usedErrors": []
						}
					],
					"src": "32:1627:3"
				},
				"id": 3
			},
			"contracts/polygon/interfaces/utils/IInitializable.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IInitializable.sol",
					"exportedSymbols": {
						"IInitializable": [
							378
						]
					},
					"id": 379,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 365,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInitializable",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 378,
							"linearizedBaseContracts": [
								378
							],
							"name": "IInitializable",
							"nameLocation": "67:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "89:88:4",
										"text": " @dev Returns the key for checking if the contract has been initialized."
									},
									"functionSelector": "6676e926",
									"id": 371,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initializedKey",
									"nameLocation": "191:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "205:2:4"
									},
									"returnParameters": {
										"id": 370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 371,
												"src": "231:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 368,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "231:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "230:9:4"
									},
									"scope": 378,
									"src": "182:58:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "246:66:4",
										"text": " @dev Checks if the contract has been initialized."
									},
									"functionSelector": "158ef93e",
									"id": 377,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "initialized",
									"nameLocation": "326:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "337:2:4"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "363:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 374,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "363:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "362:6:4"
									},
									"scope": 378,
									"src": "317:52:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 379,
							"src": "57:314:4",
							"usedErrors": []
						}
					],
					"src": "32:339:4"
				},
				"id": 4
			},
			"contracts/polygon/interfaces/utils/ILowLevelCall.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ILowLevelCall.sol",
					"exportedSymbols": {
						"ILowLevelCall": [
							390
						]
					},
					"id": 391,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 380,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ILowLevelCall",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": true,
							"id": 390,
							"linearizedBaseContracts": [
								390
							],
							"name": "ILowLevelCall",
							"nameLocation": "67:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "88:222:5",
										"text": " @dev Emitted when a low-level call is executed.\n @param target The target address of the call.\n @param data The data passed to the call.\n @param response The response received from the call."
									},
									"eventSelector": "2bbbbbf24d2d80cec39de7a4633cf4c5e30a805731376b32927d93fd29cec143",
									"id": 389,
									"name": "LowLevelCall",
									"nameLocation": "321:12:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"indexed": true,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "350:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "334:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 382,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "334:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"indexed": true,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "372:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "358:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 384,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "358:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"indexed": true,
												"mutability": "mutable",
												"name": "response",
												"nameLocation": "392:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 389,
												"src": "378:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 386,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "378:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "333:68:5"
									},
									"src": "315:87:5"
								}
							],
							"scope": 391,
							"src": "57:347:5",
							"usedErrors": []
						}
					],
					"src": "32:372:5"
				},
				"id": 5
			},
			"contracts/polygon/interfaces/utils/IPayload.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/IPayload.sol",
					"exportedSymbols": {
						"IPayload": [
							418
						]
					},
					"id": 419,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 392,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPayload",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 393,
								"nodeType": "StructuredDocumentation",
								"src": "57:49:6",
								"text": " targetKey => address\n dataKey => bytes"
							},
							"fullyImplemented": false,
							"id": 418,
							"linearizedBaseContracts": [
								418
							],
							"name": "IPayload",
							"nameLocation": "117:8:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 394,
										"nodeType": "StructuredDocumentation",
										"src": "133:69:6",
										"text": " @dev Returns the key for storing the target address."
									},
									"functionSelector": "a73e8e36",
									"id": 399,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "targetKey",
									"nameLocation": "216:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "225:2:6"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 399,
												"src": "251:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 396,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "251:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "250:9:6"
									},
									"scope": 418,
									"src": "207:53:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 400,
										"nodeType": "StructuredDocumentation",
										"src": "266:59:6",
										"text": " @dev Returns the key for storing the data."
									},
									"functionSelector": "b859dd3e",
									"id": 405,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "dataKey",
									"nameLocation": "339:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:2:6"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "372:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 402,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "372:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "371:9:6"
									},
									"scope": 418,
									"src": "330:51:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "387:57:6",
										"text": " @dev Returns the current target address."
									},
									"functionSelector": "d4b83992",
									"id": 411,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "target",
									"nameLocation": "458:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "464:2:6"
									},
									"returnParameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 411,
												"src": "490:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "490:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "489:9:6"
									},
									"scope": 418,
									"src": "449:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "505:53:6",
										"text": " @dev Returns the current data bytes."
									},
									"functionSelector": "73d4a13a",
									"id": 417,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "data",
									"nameLocation": "572:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "576:2:6"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "602:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 414,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "602:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "601:14:6"
									},
									"scope": 418,
									"src": "563:53:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 419,
							"src": "107:511:6",
							"usedErrors": []
						}
					],
					"src": "32:586:6"
				},
				"id": 6
			},
			"contracts/polygon/interfaces/utils/ITag.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ITag.sol",
					"exportedSymbols": {
						"ITag": [
							457
						]
					},
					"id": 458,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 420,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITag",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 457,
							"linearizedBaseContracts": [
								457
							],
							"name": "ITag",
							"nameLocation": "67:4:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "79:73:7",
										"text": " @dev Returns the key for storing the caption in storage."
									},
									"functionSelector": "476221fe",
									"id": 426,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "captionKey",
									"nameLocation": "166:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 422,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "176:2:7"
									},
									"returnParameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 424,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "202:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 423,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "202:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "201:9:7"
									},
									"scope": 457,
									"src": "157:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "217:73:7",
										"text": " @dev Returns the key for storing the message in storage."
									},
									"functionSelector": "58221c6b",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "messageKey",
									"nameLocation": "304:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "314:2:7"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "340:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 429,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "340:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "339:9:7"
									},
									"scope": 457,
									"src": "295:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "355:73:7",
										"text": " @dev Returns the key for storing the creator in storage."
									},
									"functionSelector": "5d32eeb5",
									"id": 438,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "creatorKey",
									"nameLocation": "442:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "452:2:7"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "478:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 435,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "478:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "477:9:7"
									},
									"scope": 457,
									"src": "433:54:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "493:71:7",
										"text": " @dev Returns the caption associated with the proposal."
									},
									"functionSelector": "39540e5e",
									"id": 444,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "caption",
									"nameLocation": "578:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "585:2:7"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "611:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 441,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "611:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "610:15:7"
									},
									"scope": 457,
									"src": "569:57:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "632:71:7",
										"text": " @dev Returns the message associated with the proposal."
									},
									"functionSelector": "e21f37ce",
									"id": 450,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "message",
									"nameLocation": "717:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "724:2:7"
									},
									"returnParameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "750:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 447,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "750:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "749:15:7"
									},
									"scope": 457,
									"src": "708:57:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "771:73:7",
										"text": " @dev Returns the address of the creator of the proposal."
									},
									"functionSelector": "02d05d3f",
									"id": 456,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "creator",
									"nameLocation": "858:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "865:2:7"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 456,
												"src": "891:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:9:7"
									},
									"scope": 457,
									"src": "849:51:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 458,
							"src": "57:845:7",
							"usedErrors": []
						}
					],
					"src": "32:870:7"
				},
				"id": 7
			},
			"contracts/polygon/interfaces/utils/ITimer.sol": {
				"ast": {
					"absolutePath": "contracts/polygon/interfaces/utils/ITimer.sol",
					"exportedSymbols": {
						"ITimer": [
							514
						]
					},
					"id": 515,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 459,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ITimer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 514,
							"linearizedBaseContracts": [
								514
							],
							"name": "ITimer",
							"nameLocation": "67:6:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 460,
										"nodeType": "StructuredDocumentation",
										"src": "81:62:8",
										"text": " @dev Returns the key for the start timestamp."
									},
									"functionSelector": "6c6169bd",
									"id": 465,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "startTimestampKey",
									"nameLocation": "157:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "174:2:8"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "200:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "200:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "199:9:8"
									},
									"scope": 514,
									"src": "148:61:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "215:55:8",
										"text": " @dev Returns the key for the duration."
									},
									"functionSelector": "902b29ed",
									"id": 471,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "durationKey",
									"nameLocation": "284:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "295:2:8"
									},
									"returnParameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "321:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 468,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "321:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "320:9:8"
									},
									"scope": 514,
									"src": "275:55:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 472,
										"nodeType": "StructuredDocumentation",
										"src": "336:50:8",
										"text": " @dev Returns the start timestamp."
									},
									"functionSelector": "e6fd48bc",
									"id": 477,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "startTimestamp",
									"nameLocation": "400:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "414:2:8"
									},
									"returnParameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "440:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "440:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "439:9:8"
									},
									"scope": 514,
									"src": "391:58:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 478,
										"nodeType": "StructuredDocumentation",
										"src": "455:48:8",
										"text": " @dev Returns the end timestamp."
									},
									"functionSelector": "a85adeab",
									"id": 483,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "endTimestamp",
									"nameLocation": "517:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "529:2:8"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "555:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "554:9:8"
									},
									"scope": 514,
									"src": "508:56:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "570:43:8",
										"text": " @dev Returns the duration."
									},
									"functionSelector": "0fb5a6b4",
									"id": 489,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "duration",
									"nameLocation": "627:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "635:2:8"
									},
									"returnParameters": {
										"id": 488,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 489,
												"src": "661:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 486,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "661:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "660:9:8"
									},
									"scope": 514,
									"src": "618:52:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 490,
										"nodeType": "StructuredDocumentation",
										"src": "676:54:8",
										"text": " @dev Checks if the timer has started."
									},
									"functionSelector": "1f2698ab",
									"id": 495,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "started",
									"nameLocation": "744:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "751:2:8"
									},
									"returnParameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "777:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 492,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "777:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:6:8"
									},
									"scope": 514,
									"src": "735:48:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 496,
										"nodeType": "StructuredDocumentation",
										"src": "789:52:8",
										"text": " @dev Checks if the timer has ended."
									},
									"functionSelector": "12fa6feb",
									"id": 501,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ended",
									"nameLocation": "855:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "860:2:8"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "886:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 498,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "886:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:6:8"
									},
									"scope": 514,
									"src": "846:46:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 502,
										"nodeType": "StructuredDocumentation",
										"src": "898:63:8",
										"text": " @dev Checks if the timer is actively counting."
									},
									"functionSelector": "8554b847",
									"id": 507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "counting",
									"nameLocation": "975:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:2:8"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1009:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 504,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1009:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1008:6:8"
									},
									"scope": 514,
									"src": "966:49:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "1021:68:8",
										"text": " @dev Calculates the remaining seconds in the timer."
									},
									"functionSelector": "86a83735",
									"id": 513,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "secondsLeft",
									"nameLocation": "1103:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1114:2:8"
									},
									"returnParameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "1140:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 510,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1140:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1139:9:8"
									},
									"scope": 514,
									"src": "1094:55:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 515,
							"src": "57:1094:8",
							"usedErrors": []
						}
					],
					"src": "32:1119:8"
				},
				"id": 8
			}
		}
	}
}