{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "caption",
						"type": "string"
					}
				],
				"name": "CaptionSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "CreatorSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "DataSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "seconds_",
						"type": "uint256"
					}
				],
				"name": "DurationSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Executed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "response",
						"type": "bytes"
					}
				],
				"name": "LowLevelCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "MessageSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "MultiSigProposalFactorySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Passed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "ReferendumProposalFactorySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "RequiredQuorumSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "Signed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "SignerAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "StartTimestampSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "TargetSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "TerminalSet",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "addSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "caption",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "captionKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "counting",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creator",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "creatorKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "data",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dataKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "duration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "durationKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ended",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "execute",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "executed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "executedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasSigned",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hasSufficientSignatures",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initialized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "initializedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "isSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "message",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "messageKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "multiSigProposalFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "multiSigProposalFactoryKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ownerKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "passed",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "passedKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "referendumProposalFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "referendumProposalFactoryKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredQuorum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredQuorumKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requiredSignaturesLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "secondsLeft",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "caption",
						"type": "string"
					}
				],
				"name": "setCaption",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setCreator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "setData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "seconds_",
						"type": "uint256"
					}
				],
				"name": "setDuration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "message",
						"type": "string"
					}
				],
				"name": "setMessage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setMultiSigProposalFactory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setReferendumProposalFactory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "setRequiredQuorum",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "setStartTimestamp",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setTarget",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "setTerminal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sign",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "signatureId",
						"type": "uint256"
					}
				],
				"name": "signatures",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "signaturesKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "signaturesLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "signerId",
						"type": "uint256"
					}
				],
				"name": "signers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "signersKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "signersLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTimestampKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "started",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "target",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "targetKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "terminal",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "terminalKey",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"CaptionSet(string)": {
					"details": "Emitted when a caption is set.",
					"params": {
						"caption": "The string representing the new caption. Indexed for efficient log filtering."
					}
				},
				"CreatorSet(address)": {
					"details": "Emitted when the creator address is set.",
					"params": {
						"creator": "The address of the newly set creator. Indexed for efficient log filtering."
					}
				},
				"DataSet(bytes)": {
					"details": "Emitted when a data address is set.",
					"params": {
						"data": "The address of the newly set data. Indexed for efficient log filtering."
					}
				},
				"DurationSet(uint256)": {
					"details": "Emitted when the duration in seconds is set.",
					"params": {
						"seconds_": "The uint256 representing the newly set duration in seconds. Indexed for efficient log filtering."
					}
				},
				"Executed()": {
					"details": "Emitted when an execution or operation is successfully completed. This event signals the successful execution of a particular functionality or task."
				},
				"LowLevelCall(address,bytes,bytes)": {
					"details": "Emitted when a low-level call is executed.",
					"params": {
						"data": "The data passed to the call.",
						"response": "The response received from the call.",
						"target": "The target address of the call."
					}
				},
				"MessageSet(string)": {
					"details": "Emitted when a message is set.",
					"params": {
						"message": "The string representing the new message. Indexed for efficient log filtering."
					}
				},
				"MultiSigProposalFactorySet(address)": {
					"details": "Emitted when the MultiSigProposalFactory address is set.",
					"params": {
						"account": "The address of the new MultiSigProposalFactory."
					}
				},
				"OwnershipTransferred(address,address)": {
					"details": "Emitted when ownership of the contract is transferred.",
					"params": {
						"newOwner": "The address of the new owner.",
						"oldOwner": "The address of the old owner."
					}
				},
				"Passed()": {
					"details": "Emitted when a condition or step is successfully passed. This event signifies the successful completion of a specific action or checkpoint."
				},
				"ReferendumProposalFactorySet(address)": {
					"details": "Emitted when the ReferendumProposalFactory address is set.",
					"params": {
						"account": "The address of the new ReferendumProposalFactory."
					}
				},
				"RequiredQuorumSet(uint256)": {
					"details": "Emitted when the required quorum is set.",
					"params": {
						"bp": "The uint256 representing the newly set quorum in basis points. Indexed for efficient log filtering."
					}
				},
				"Signed(address)": {
					"details": "Emitted when a signing action occurs.",
					"params": {
						"signer": "The address of the signer. Indexed for efficient log filtering."
					}
				},
				"SignerAdded(address)": {
					"details": "Emitted when a new signer is added.",
					"params": {
						"signer": "The address of the added signer. Indexed for efficient log filtering."
					}
				},
				"StartTimestampSet(uint256)": {
					"details": "Emitted when the start timestamp is set.",
					"params": {
						"timestamp": "The uint256 representing the newly set start timestamp. Indexed for efficient log filtering."
					}
				},
				"TargetSet(address)": {
					"details": "Emitted when the target address is set.",
					"params": {
						"target": "The address of the newly set target. Indexed for efficient log filtering."
					}
				},
				"TerminalSet(address)": {
					"details": "Emitted when the terminal address is set.",
					"params": {
						"account": "The address of the new terminal."
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addSigner(address)": {
					"details": "Adds a new signer to the contract. Only the owner has the privilege to add a new signer.",
					"params": {
						"account": "The address of the new signer to be added."
					}
				},
				"caption()": {
					"details": "Returns the caption associated with the proposal."
				},
				"captionKey()": {
					"details": "Returns the key for storing the caption in storage."
				},
				"counting()": {
					"details": "Checks if the timer is actively counting."
				},
				"creator()": {
					"details": "Returns the address of the creator of the proposal."
				},
				"creatorKey()": {
					"details": "Returns the key for storing the creator in storage."
				},
				"data()": {
					"details": "Returns the current data bytes."
				},
				"dataKey()": {
					"details": "Returns the key for storing the data."
				},
				"duration()": {
					"details": "Returns the duration."
				},
				"durationKey()": {
					"details": "Returns the key for the duration."
				},
				"endTimestamp()": {
					"details": "Returns the end timestamp."
				},
				"ended()": {
					"details": "Checks if the timer has ended."
				},
				"execute()": {
					"details": "Executes the MultiSigProposal and triggers additional actions. Calls the internal _execute function to mark the proposal as executed. Emits an Executed event. TODO: Create another referendum proposal using the ReferendumProposalFactory."
				},
				"executed()": {
					"details": "Checks if a specific operation or task has been successfully executed.",
					"returns": {
						"_0": "bool True if the operation or task has been executed, otherwise false."
					}
				},
				"executedKey()": {
					"details": "Returns the keccak256 hash of the string \"EXECUTED\". This function is used to generate a unique key for tracking the execution status of a specific operation or task.",
					"returns": {
						"_0": "bytes32 The keccak256 hash of \"EXECUTED\"."
					}
				},
				"hasSigned(address)": {
					"details": "Checks if an address has already provided a signature.",
					"params": {
						"account": "The address to check."
					},
					"returns": {
						"_0": "bool True if the address has signed, otherwise false."
					}
				},
				"hasSufficientSignatures()": {
					"details": "Checks whether the number of collected signatures meets or exceeds the required threshold.",
					"returns": {
						"_0": "bool True if there are sufficient signatures, otherwise false."
					}
				},
				"initialize()": {
					"details": "Initializes the contract, setting up any initial configurations or values. This function is typically called once, often during deployment."
				},
				"initialized()": {
					"details": "Checks if the contract has been initialized."
				},
				"initializedKey()": {
					"details": "Returns the key for checking if the contract has been initialized."
				},
				"isSigner(address)": {
					"details": "Checks if an address is a registered signer.",
					"params": {
						"account": "The address to check."
					},
					"returns": {
						"_0": "bool True if the address is a signer, otherwise false."
					}
				},
				"message()": {
					"details": "Returns the message associated with the proposal."
				},
				"messageKey()": {
					"details": "Returns the key for storing the message in storage."
				},
				"multiSigProposalFactory()": {
					"details": "Retrieves the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the MultiSigProposalFactory."
					}
				},
				"multiSigProposalFactoryKey()": {
					"details": "Returns the key used to store the MultiSigProposalFactory address.",
					"returns": {
						"_0": "bytes32 The key for the MultiSigProposalFactory in keccak256 hash."
					}
				},
				"owner()": {
					"details": "Returns the current owner of the contract.",
					"returns": {
						"_0": "The address of the current owner."
					}
				},
				"ownerKey()": {
					"details": "Returns the key for the owner in the storage mapping.",
					"returns": {
						"_0": "The key for the owner."
					}
				},
				"passed()": {
					"details": "Checks if a specific action or step has been successfully passed.",
					"returns": {
						"_0": "bool True if the action or step has passed, otherwise false."
					}
				},
				"passedKey()": {
					"details": "Returns the keccak256 hash of the string \"PASSED\". This function is used to generate a unique key for tracking the completion status of a specific action or step.",
					"returns": {
						"_0": "bytes32 The keccak256 hash of \"PASSED\"."
					}
				},
				"referendumProposalFactory()": {
					"details": "Retrieves the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the ReferendumProposalFactory."
					}
				},
				"referendumProposalFactoryKey()": {
					"details": "Returns the key used to store the ReferendumProposalFactory address.",
					"returns": {
						"_0": "bytes32 The key for the ReferendumProposalFactory in keccak256 hash."
					}
				},
				"renounceOwnership()": {
					"details": "Renounces ownership, leaving the contract without an owner."
				},
				"requiredQuorum()": {
					"details": "Retrieves the required quorum value from storage.",
					"returns": {
						"_0": "uint256 The current required quorum value."
					}
				},
				"requiredQuorumKey()": {
					"details": "Returns the keccak256 hash of the string \"REQUIRED_QUORUM\". This function is used to generate a unique key for accessing the required quorum value.",
					"returns": {
						"_0": "bytes32 The keccak256 hash of \"REQUIRED_QUORUM\"."
					}
				},
				"requiredSignaturesLength()": {
					"details": "Calculates the required number of signatures based on the quorum and the number of signers.",
					"returns": {
						"_0": "uint256 The current required number of signatures for a successful action."
					}
				},
				"secondsLeft()": {
					"details": "Calculates the remaining seconds in the timer."
				},
				"setCaption(string)": {
					"details": "Sets a new caption for the contract. Only the owner has the privilege to update the caption.",
					"params": {
						"caption": "The new caption to be set."
					}
				},
				"setCreator(address)": {
					"details": "Sets a new creator for the contract. Only the owner has the privilege to update the creator address.",
					"params": {
						"account": "The new creator address to be set."
					}
				},
				"setData(bytes)": {
					"details": "Sets new data for the contract. Only the owner has the privilege to update the data.",
					"params": {
						"data": "The new data to be set."
					}
				},
				"setDuration(uint256)": {
					"details": "Sets a new duration in seconds for the contract. Only the owner has the privilege to update the duration.",
					"params": {
						"seconds_": "The new duration in seconds to be set."
					}
				},
				"setMessage(string)": {
					"details": "Sets a new message for the contract. Only the owner has the privilege to update the message.",
					"params": {
						"message": "The new message to be set."
					}
				},
				"setMultiSigProposalFactory(address)": {
					"details": "Sets the address of the MultiSigProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
					"params": {
						"account": "The address of the new MultiSigProposalFactory."
					}
				},
				"setReferendumProposalFactory(address)": {
					"details": "Sets the address of the ReferendumProposalFactory associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
					"params": {
						"account": "The address of the new ReferendumProposalFactory."
					}
				},
				"setRequiredQuorum(uint256)": {
					"details": "Sets a new required quorum in basis points for the contract. Only the owner has the privilege to update the required quorum.",
					"params": {
						"bp": "The new required quorum in basis points to be set."
					}
				},
				"setStartTimestamp(uint256)": {
					"details": "Sets a new start timestamp for the contract. Only the owner has the privilege to update the start timestamp.",
					"params": {
						"timestamp": "The new start timestamp to be set."
					}
				},
				"setTarget(address)": {
					"details": "Sets a new target address for the contract. Only the owner has the privilege to update the target address.",
					"params": {
						"account": "The new target address to be set."
					}
				},
				"setTerminal(address)": {
					"details": "Sets the address of the terminal associated with the MultiSigProposalFactory. Only the owner is allowed to perform this action.",
					"params": {
						"account": "The address of the new terminal."
					}
				},
				"sign()": {
					"details": "Signs the contract, indicating the sender's agreement or authorization. This function is typically called by a signer to provide their signature."
				},
				"signatures(uint256)": {
					"details": "Retrieves the address of a signature based on its unique identifier.",
					"params": {
						"signatureId": "The identifier of the signature."
					},
					"returns": {
						"_0": "address The address of the specified signature."
					}
				},
				"signaturesKey()": {
					"details": "Returns the keccak256 hash of the string \"SIGNATURES\". This function is used to generate a unique key for storing signatures related to a process or action.",
					"returns": {
						"_0": "bytes32 The keccak256 hash of \"SIGNATURES\"."
					}
				},
				"signaturesLength()": {
					"details": "Retrieves the total number of signatures collected.",
					"returns": {
						"_0": "uint256 The current length of the signatures set."
					}
				},
				"signers(uint256)": {
					"details": "Retrieves the address of a signer based on their unique identifier.",
					"params": {
						"signerId": "The identifier of the signer."
					},
					"returns": {
						"_0": "address The address of the specified signer."
					}
				},
				"signersKey()": {
					"details": "Returns the keccak256 hash of the string \"SIGNERS\". This function is used to generate a unique key for managing a set of signers.",
					"returns": {
						"_0": "bytes32 The keccak256 hash of \"SIGNERS\"."
					}
				},
				"signersLength()": {
					"details": "Retrieves the total number of signers currently registered.",
					"returns": {
						"_0": "uint256 The current length of the signers set."
					}
				},
				"startTimestamp()": {
					"details": "Returns the start timestamp."
				},
				"startTimestampKey()": {
					"details": "Returns the key for the start timestamp."
				},
				"started()": {
					"details": "Checks if the timer has started."
				},
				"target()": {
					"details": "Returns the current target address."
				},
				"targetKey()": {
					"details": "Returns the key for storing the target address."
				},
				"terminal()": {
					"details": "Retrieves the address of the terminal associated with the MultiSigProposalFactory.",
					"returns": {
						"_0": "address The address of the terminal."
					}
				},
				"terminalKey()": {
					"details": "Returns the key used to store the terminal address.",
					"returns": {
						"_0": "bytes32 The key for the terminal in keccak256 hash."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/polygon/main/proposal/MultiSigProposalImplementation.sol": "MultiSigProposalImplementation"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/polygon/abstract/access-control/Ownable.sol": {
			"keccak256": "0x11db09c5965f9f3f115abbfd29256bc233af505ba2db8bae7a87f2d109c10222",
			"license": "MIT",
			"urls": [
				"bzz-raw://13f258101d9e1001f8d23451ef9369ca4d531d9a3193cc8de3087b2fc86c937e",
				"dweb:/ipfs/QmWpPbNHSoxE4zPMg9sPwZcp885QNKb7ihVtn7xCogDBFQ"
			]
		},
		"contracts/polygon/abstract/governance/proposal/MultiSigProposal.sol": {
			"keccak256": "0x7a88354d2a113ab4c9ce8f936f465327da69e98f9b5416ae9b16d7fbfcbec59a",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1b9e63123758a60d05158284500123cdaac15fcc3a4d384ca44529b5f6fd2d1",
				"dweb:/ipfs/QmagMCUxX4AsmXqt4keyPtJRhRugBxeafJ6TEYJjjFX3uz"
			]
		},
		"contracts/polygon/abstract/storage/Storage.sol": {
			"keccak256": "0x160a037254c401dbf5be05149b00ec79162c2b6caef09bae6d1021fb98ce1f2e",
			"license": "MIT",
			"urls": [
				"bzz-raw://eb354384f7f39f0e060f457b2adb39e0a5e0256a3303ef08453b738499b9411e",
				"dweb:/ipfs/QmRefT11g49QJoSkG11CM8uUKMTA25A5ahiHRzLwM2Qj3i"
			]
		},
		"contracts/polygon/abstract/utils/AddressBook.sol": {
			"keccak256": "0xddd3d22978078dd9235d88d4abcb98a69044be89930eb111dfd41061671b9e69",
			"license": "MIT",
			"urls": [
				"bzz-raw://8107be7b32dd474672597161c550e7081ccb27e3c0b8c10eef055a8a6d713ab1",
				"dweb:/ipfs/QmVveiDjP7vfLMXiQYfbM2W3iS5TgZ1UmhZa2VjVtXbTA9"
			]
		},
		"contracts/polygon/abstract/utils/Initializable.sol": {
			"keccak256": "0xef736b7aa373ca42b32374f510b5102de360454fee21f0eeb02c273d01c25d63",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e521eab34a7c5464052ecaefc73275b715633054f7c54ec262a981249abdc5b",
				"dweb:/ipfs/QmSD2jReCCV3k2EdsqtTg2U74EGwyE6uZSf7mJZKVkbwtN"
			]
		},
		"contracts/polygon/abstract/utils/LowLevelCall.sol": {
			"keccak256": "0x12ce65a6fb6cedad00999f6f9d9197998dd260b1aed3c80cc2b2157b9fd11a0f",
			"license": "MIT",
			"urls": [
				"bzz-raw://81e04e8ecec37f3c55f667fb41999dcd587d7da507d7fcc918a7281c847df24a",
				"dweb:/ipfs/QmbPsBBoqJgKHTnMezZzBABuYJHMdMh9hDfmuubFWuCFdr"
			]
		},
		"contracts/polygon/abstract/utils/Payload.sol": {
			"keccak256": "0x2cb20e2c411642c2d27dbd3adbdf4f791e9774cd9141d1eef08ca292c0fa0849",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4eaca512d59c935bb098dd66f898213ac1baee9d8dd449a1543d224895e36c6",
				"dweb:/ipfs/QmT3WHzsLNZS4rwEH6DDSXrAeRKUZSdPc5FUxVwz3PVW2n"
			]
		},
		"contracts/polygon/abstract/utils/Tag.sol": {
			"keccak256": "0x52c7c7097077cc7970520d0626c9c031744f9788d041667f310246e1c9cb89f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://7fcff5f53e6d4b92a5378ac970f8b5da374e80fedc634a5e4dcf5625e497a341",
				"dweb:/ipfs/QmPubrWvemDay6NcZ5Ynz5X58i3KgTSx4VytCWRoCn6Rh8"
			]
		},
		"contracts/polygon/abstract/utils/Timer.sol": {
			"keccak256": "0x18636881018f78e46953d0204235f371e3ed5730dc9f7751d4013559baaa5865",
			"license": "MIT",
			"urls": [
				"bzz-raw://21cc986c31c72ee0204944821ff288bea11b52a4b535659bac0f4351a9a0651e",
				"dweb:/ipfs/QmdNH27jfEQ3hS4PmmqtAqHmsbth6xjhwY53A5GWN8KRWu"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/math/Math.sol": {
			"keccak256": "0xffe8a176523d38132299bc22fd6bb138954ba3f35d41a86d004dac50dc31b615",
			"license": "MIT",
			"urls": [
				"bzz-raw://67b3d7e2d3042e5061168827e518b2eb546be0f4a3f764f654c28205c5a428e5",
				"dweb:/ipfs/Qma3d9Vim9NrzWAFASxpDppgGXo8MWZ6zorsgAYYXsbXph"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/math/SafeCast.sol": {
			"keccak256": "0x57984e48977d103f341e7c64180fcd3c2e09bdd02e585318779ca43845a2adc8",
			"license": "MIT",
			"urls": [
				"bzz-raw://385a907140ff953c1bbbc884661dcb9d1ad20780a105453c6d36f7ebcb78b445",
				"dweb:/ipfs/QmRtdUhATvWu3T7fu3gEXzACQ33yZxMvkBn52yWn4B4P4D"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/structs/BitMaps.sol": {
			"keccak256": "0x78dd37e219accdaa6f3d16b6a234284054a9806fa43cc732dd0aa7943b55638e",
			"license": "MIT",
			"urls": [
				"bzz-raw://0089a95579a67e46ef8247306f727d47da7ba834ed68cbd60a431b48fd6027f6",
				"dweb:/ipfs/QmRUkxxQ63qKaqkRfPJTRzM4sDLJ9nXVaTrkyn1TDdE91V"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/structs/Checkpoints.sol": {
			"keccak256": "0x644db19b1e69fb99b1ffd68d8d26ca38b134c9eecf6dac51adf386829e56a0b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://889402f6e944638549561a37e6e42a565118ca12306abd95c1ab32a895d7c686",
				"dweb:/ipfs/QmdXToFMLazMEtyEgCFN48Kai3anefjUzTacEaoM6Cgjzf"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/structs/DoubleEndedQueue.sol": {
			"keccak256": "0x668e9e588b132e215375ae0b0233edcfb89067a5cee66ade1a6f69f7b6b4f206",
			"license": "MIT",
			"urls": [
				"bzz-raw://b75421ca6bb7a37d2ac93de71b95121dcb67e920fde42dd8ddf3ac3ae89acb56",
				"dweb:/ipfs/QmfUMDRzgzuJNh99U2B47Fjr8sYq5eMrnnrXESwAAXWveE"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/structs/EnumerableMap.sol": {
			"keccak256": "0xf7d311d4bc1a611f69ea3d44893602cab5f4b0b339295e5085f4d5117614c3ff",
			"license": "MIT",
			"urls": [
				"bzz-raw://19351930ede89c279228443ca9d388ca1b5060dcaf8384294f7016192bba4fee",
				"dweb:/ipfs/QmaYDEsegdyhd4CyVv9DWQTAzCDwEzFsUhE8TXD4BTKxGy"
			]
		},
		"contracts/polygon/external/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892",
			"license": "MIT",
			"urls": [
				"bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593",
				"dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT"
			]
		},
		"contracts/polygon/interfaces/main/proposal/IReferendumProposalFactory.sol": {
			"keccak256": "0x7192ce26b4526a99af0c399a399ba607441c864737a373c9d683cd4c0526630f",
			"license": "MIT",
			"urls": [
				"bzz-raw://1aa74ea9d69e21f49e6c7c12ba2551f815941fb787d4f8548b5eaffc3259be1b",
				"dweb:/ipfs/QmeXzT9AbbtSo9S6NiaVyqVbLHweN1ooj19Gw99rUUtXPG"
			]
		},
		"contracts/polygon/interfaces/proxy/IBaseFactory.sol": {
			"keccak256": "0x4915ebcefbcbc6b6f65c761ee6be430754d16e1c85b12f07292ec6dba32415a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://03cbe10ed3a2c42a22f85b653bc11db77cf4c53bca687cb77ba37c2e238735de",
				"dweb:/ipfs/QmZP48p2Ju3pKyx27JLbjgAsysGJJ5kobjUJ5zrn7VrL9U"
			]
		},
		"contracts/polygon/main/proposal/MultiSigProposalImplementation.sol": {
			"keccak256": "0xfecedf49433fe1813752d1ca8a8707b339d3595e864221a72f6798408514b7c1",
			"license": "MIT",
			"urls": [
				"bzz-raw://26a7fa5705552c7fd0b4b66fa16db11788827a78a786fca1f42fd17c11f22be5",
				"dweb:/ipfs/Qmd1yAJd3j1hhGksgyntPcA3daoKTZHeJTFtqY4FRj5AQq"
			]
		}
	},
	"version": 1
}